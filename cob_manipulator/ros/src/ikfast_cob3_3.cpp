/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 55 generated on 2012-04-10 13:05:16.137361
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifdef IKFAST_HEADER
#include IKFAST_HEADER
#endif

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IKReal)6.28318530717959)
#define IKPI  ((IKReal)3.14159265358979)
#define IKPI_2  ((IKReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// defined when creating a shared object/dll
#ifdef IKFAST_CLIBRARY
#ifdef _MSC_VER
#define IKFAST_API extern "C" __declspec(dllexport)
#else
#define IKFAST_API extern "C"
#endif
#else
#define IKFAST_API
#endif

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

#ifdef IKFAST_REAL
typedef IKFAST_REAL IKReal;
#else
typedef double IKReal;
#endif

class IKSolution
{
public:
    /// Gets a solution given its free parameters
    /// \param pfree The free parameters required, range is in [-pi,pi]
    void GetSolution(IKReal* psolution, const IKReal* pfree) const {
        for(std::size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].freeind < 0 )
                psolution[i] = basesol[i].foffset;
            else {
                IKFAST_ASSERT(pfree != NULL);
                psolution[i] = pfree[basesol[i].freeind]*basesol[i].fmul + basesol[i].foffset;
                if( psolution[i] > IKPI ) {
                    psolution[i] -= IK2PI;
                }
                else if( psolution[i] < -IKPI ) {
                    psolution[i] += IK2PI;
                }
            }
        }
    }

    /// Gets the free parameters the solution requires to be set before a full solution can be returned
    /// \return vector of indices indicating the free parameters
    const std::vector<int>& GetFree() const { return vfree; }

    struct VARIABLE
    {
        VARIABLE() : fmul(0), foffset(0), freeind(-1), maxsolutions(1) {
            indices[0] = indices[1] = -1;
        }
        IKReal fmul, foffset; ///< joint value is fmul*sol[freeind]+foffset
        signed char freeind; ///< if >= 0, mimics another joint
        unsigned char maxsolutions; ///< max possible indices, 0 if controlled by free index or a free joint itself
        unsigned char indices[2]; ///< unique index of the solution used to keep track on what part it came from. sometimes a solution can be repeated for different indices. store at least another repeated root
    };

    std::vector<VARIABLE> basesol;       ///< solution and their offsets if joints are mimiced
    std::vector<int> vfree;

    bool Validate() const {
        for(size_t i = 0; i < basesol.size(); ++i) {
            if( basesol[i].maxsolutions == (unsigned char)-1) {
                return false;
            }
            if( basesol[i].maxsolutions > 0 ) {
                if( basesol[i].indices[0] >= basesol[i].maxsolutions ) {
                    return false;
                }
                if( basesol[i].indices[1] != (unsigned char)-1 && basesol[i].indices[1] >= basesol[i].maxsolutions ) {
                    return false;
                }
            }
        }
        return true;
    }

    void GetSolutionIndices(std::vector<unsigned int>& v) const {
        v.resize(0);
        v.push_back(0);
        for(int i = (int)basesol.size()-1; i >= 0; --i) {
            if( basesol[i].maxsolutions != (unsigned char)-1 && basesol[i].maxsolutions > 1 ) {
                for(size_t j = 0; j < v.size(); ++j) {
                    v[j] *= basesol[i].maxsolutions;
                }
                size_t orgsize=v.size();
                if( basesol[i].indices[1] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v.push_back(v[j]+basesol[i].indices[1]);
                    }
                }
                if( basesol[i].indices[0] != (unsigned char)-1 ) {
                    for(size_t j = 0; j < orgsize; ++j) {
                        v[j] += basesol[i].indices[0];
                    }
                }
            }
        }
    }
};

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IKReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IKReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IKReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline float IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return 1.0f;
    }
    else if( f < 0 ) {
        return -1.0f;
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void fk(const IKReal* j, IKReal* eetrans, IKReal* eerot) {
IKReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76,x77,x78,x79,x80,x81,x82,x83,x84,x85,x86,x87,x88,x89,x90,x91,x92,x93,x94,x95,x96,x97,x98,x99,x100,x101,x102,x103,x104,x105,x106,x107,x108,x109,x110,x111,x112,x113,x114,x115,x116,x117,x118,x119,x120,x121,x122,x123,x124,x125,x126,x127,x128,x129,x130,x131,x132,x133,x134,x135,x136,x137,x138,x139,x140;
x0=IKcos(j[3]);
x1=IKcos(j[4]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[4]);
x5=IKsin(j[6]);
x6=IKsin(j[3]);
x7=IKcos(j[1]);
x8=IKcos(j[6]);
x9=IKsin(j[5]);
x10=IKsin(j[1]);
x11=IKcos(j[5]);
x12=((x10)*(x6));
x13=((x0)*(x3)*(x7));
x14=((x13)+(x12));
x15=IKsin(j[0]);
x16=IKcos(j[0]);
x17=((x6)*(x7));
x18=((x0)*(x10)*(x3));
x19=((x0)*(x2)*(x4));
x20=((x1)*(x3));
x21=((((-1.00000000000000)*(x20)))+(x19));
x22=((x2)*(x6)*(x9));
x23=((x0)*(x1)*(x2));
x24=((x3)*(x4));
x25=((x24)+(x23));
x26=((-1.00000000000000)*(x25));
x27=((x11)*(x26));
x28=((0.972931094596394)*(x15));
x29=((0.101137151016057)*(x16));
x30=((x28)+(x29));
x31=((-1.00000000000000)*(x30));
x32=((x17)*(x3));
x33=((x0)*(x10));
x34=((((-1.00000000000000)*(x33)))+(x32));
x35=((x34)*(x9));
x36=((x1)*(x14));
x37=((x2)*(x4)*(x7));
x38=((((-1.00000000000000)*(x37)))+(x36));
x39=((x11)*(x38));
x40=((x39)+(x35));
x41=((-1.00000000000000)*(x14));
x42=((x4)*(x41));
x43=((x1)*(x2)*(x7));
x44=((((-1.00000000000000)*(x43)))+(x42));
x45=((0.101137151016057)*(x15));
x46=((0.972931094596394)*(x16));
x47=((((-1.00000000000000)*(x46)))+(x45));
x48=((x12)*(x3));
x49=((x0)*(x7));
x50=((x48)+(x49));
x51=((x50)*(x9));
x52=((((-1.00000000000000)*(x17)))+(x18));
x53=((x1)*(x52));
x54=((x10)*(x2)*(x4));
x55=((x53)+(((-1.00000000000000)*(x54))));
x56=((x11)*(x55));
x57=((x56)+(x51));
x58=((((-1.00000000000000)*(x18)))+(x17));
x59=((x4)*(x58));
x60=((x1)*(x10)*(x2));
x61=((x59)+(((-1.00000000000000)*(x60))));
x62=((x21)*(x5));
x63=((((-1.00000000000000)*(x22)))+(x27));
x64=((x63)*(x8));
x65=((x62)+(x64));
x66=((x44)*(x5));
x67=((x40)*(x8));
x68=((x66)+(x67));
x69=((0.706654482808221)*(x16));
x70=((0.0767641701389179)*(x15));
x71=((x70)+(x69));
x72=((x21)*(x8));
x73=((((-1.00000000000000)*(x27)))+(x22));
x74=((x5)*(x73));
x75=((x74)+(x72));
x76=((-1.00000000000000)*(x40));
x77=((x5)*(x76));
x78=((x44)*(x8));
x79=((x77)+(x78));
x80=((0.0767641701389179)*(x16));
x81=((0.706654482808221)*(x15));
x82=((x80)+(((-1.00000000000000)*(x81))));
x83=((-1.00000000000000)*(x57));
x84=((x25)*(x9));
x85=((x11)*(x2)*(x6));
x86=((x84)+(((-1.00000000000000)*(x85))));
x87=((x11)*(x34));
x88=((((-1.00000000000000)*(x36)))+(x37));
x89=((x88)*(x9));
x90=((x89)+(x87));
x91=((x54)+(((-1.00000000000000)*(x53))));
x92=((0.0570000000000000)*(x24));
x93=((0.0570000000000000)*(x23));
x94=((x93)+(x92));
x95=((x9)*(x94));
x96=((0.000500000000000000)*(x19));
x97=((x95)+(x96));
x98=((0.0570000000000000)*(x85));
x99=((0.000500000000000000)*(x20));
x100=((0.390000000000000)*(x2)*(x6));
x101=((0.00200000000000000)*(x3));
x102=((x100)+(x101)+(x99)+(x98));
x103=((((-1.00000000000000)*(x102)))+(x97));
x104=((0.390000000000000)*(x32));
x105=((0.000500000000000000)*(x12));
x106=((0.000500000000000000)*(x13));
x107=((x105)+(x106));
x108=((-1.00000000000000)*(x107));
x109=((x108)*(x4));
x110=((0.0570000000000000)*(x32));
x111=((0.0570000000000000)*(x33));
x112=((((-1.00000000000000)*(x111)))+(x110));
x113=((x11)*(x112));
x114=((0.0570000000000000)*(x37));
x115=((0.0570000000000000)*(x36));
x116=((((-1.00000000000000)*(x115)))+(x114));
x117=((x116)*(x9));
x118=((x113)+(x117)+(x109)+(x104));
x119=((0.00200000000000000)*(x2)*(x7));
x120=((0.000500000000000000)*(x43));
x121=((0.390000000000000)*(x33));
x122=((0.400000000000000)*(x10));
x123=((x122)+(x120)+(x121)+(x119));
x124=((((-1.00000000000000)*(x123)))+(x118));
x125=((0.0570000000000000)*(x54));
x126=((0.0570000000000000)*(x53));
x127=((((-1.00000000000000)*(x126)))+(x125));
x128=((0.0570000000000000)*(x49));
x129=((0.0570000000000000)*(x48));
x130=((x128)+(x129));
x131=((0.000500000000000000)*(x17));
x132=((0.000500000000000000)*(x18));
x133=((x131)+(((-1.00000000000000)*(x132))));
x134=((0.700293308986599)*(x16));
x135=((0.217973272100839)*(x15));
x136=((x134)+(((-1.00000000000000)*(x135))));
x137=((0.217973272100839)*(x16));
x138=((0.700293308986599)*(x15));
x139=((x137)+(x138));
x140=((-1.00000000000000)*(x139));
eerot[0]=((((-0.207789224580627)*(x57)*(x8)))+(((-0.207789224580627)*(x5)*(x61)))+(((x31)*(x65)))+(((x47)*(x68))));
eerot[1]=((((x47)*(x79)))+(((-0.207789224580627)*(x61)*(x8)))+(((x31)*(x75)))+(((-0.207789224580627)*(x5)*(x83))));
eerot[2]=((((-0.207789224580627)*(x9)*(x91)))+(((-0.207789224580627)*(x11)*(x50)))+(((x47)*(x90)))+(((x31)*(x86))));
eetrans[0]=((-0.0544796365071901)+(((0.000103894612290313)*(x60)))+(((0.000415578449161254)*(x10)*(x2)))+(((-0.00194586218919279)*(x15)))+(((x103)*(x31)))+(((x124)*(x47)))+(((-0.000202274302032115)*(x16)))+(((-0.0810377975864445)*(x49)))+(((-0.0810377975864445)*(x48)))+(((-0.207789224580627)*(x133)*(x4)))+(((-0.207789224580627)*(x11)*(x130)))+(((-0.0831156898322508)*(x7)))+(((-0.207789224580627)*(x127)*(x9))));
eerot[3]=((((-0.703382331388789)*(x5)*(x61)))+(((x68)*(x82)))+(((-0.703382331388789)*(x57)*(x8)))+(((x65)*(x71))));
eerot[4]=((((x79)*(x82)))+(((-0.703382331388789)*(x5)*(x83)))+(((-0.703382331388789)*(x61)*(x8)))+(((x71)*(x75))));
eerot[5]=((((-0.703382331388789)*(x9)*(x91)))+(((x82)*(x90)))+(((-0.703382331388789)*(x11)*(x50)))+(((x71)*(x86))));
eetrans[1]=((-0.220912416460953)+(((-0.703382331388789)*(x127)*(x9)))+(((x124)*(x82)))+(((0.000153528340277836)*(x15)))+(((0.00141330896561644)*(x16)))+(((0.00140676466277758)*(x10)*(x2)))+(((0.000351691165694395)*(x60)))+(((-0.703382331388789)*(x133)*(x4)))+(((-0.274319109241628)*(x49)))+(((-0.274319109241628)*(x48)))+(((-0.703382331388789)*(x11)*(x130)))+(((-0.281352932555516)*(x7)))+(((x103)*(x71))));
eerot[6]=((((x136)*(x65)))+(((0.679762409992089)*(x57)*(x8)))+(((0.679762409992089)*(x5)*(x61)))+(((x140)*(x68))));
eerot[7]=((((0.679762409992089)*(x5)*(x83)))+(((0.679762409992089)*(x61)*(x8)))+(((x140)*(x79)))+(((x136)*(x75))));
eerot[8]=((((0.679762409992089)*(x9)*(x91)))+(((x136)*(x86)))+(((x140)*(x90)))+(((0.679762409992089)*(x11)*(x50))));
eetrans[2]=((1.00806050151348)+(((x124)*(x140)))+(((-0.000339881204996045)*(x60)))+(((-0.000435946544201677)*(x15)))+(((-0.00135952481998418)*(x10)*(x2)))+(((x103)*(x136)))+(((0.271904963996836)*(x7)))+(((0.679762409992089)*(x127)*(x9)))+(((0.00140058661797320)*(x16)))+(((0.679762409992089)*(x11)*(x130)))+(((0.265107339896915)*(x49)))+(((0.265107339896915)*(x48)))+(((0.679762409992089)*(x133)*(x4))));
}

IKFAST_API int getNumFreeParameters() { return 1; }
IKFAST_API int* getFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int getNumJoints() { return 7; }

IKFAST_API int getIKRealSize() { return sizeof(IKReal); }

IKFAST_API int getIKType() { return 0x67000001; }

class IKSolver {
public:
IKReal j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j0,cj0,sj0,htj0,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij0[2], _nj0;

bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
j1=numeric_limits<IKReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IKReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IKReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IKReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IKReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IKReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    vsolutions.resize(0); vsolutions.reserve(8);
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

IKReal x141=IKcos(j0);
IKReal x142=IKsin(j0);
new_r00=((((-0.217973272100839)*(r20)*(x141)))+(((-0.972931094596394)*(r00)*(x141)))+(((0.0767641701389179)*(r10)*(x141)))+(((-0.706654482808221)*(r10)*(x142)))+(((-0.700293308986599)*(r20)*(x142)))+(((0.101137151016057)*(r00)*(x142))));
IKReal x143=IKcos(j0);
IKReal x144=IKsin(j0);
new_r01=((((0.0767641701389179)*(r11)*(x143)))+(((-0.700293308986599)*(r21)*(x144)))+(((-0.972931094596394)*(r01)*(x143)))+(((-0.217973272100839)*(r21)*(x143)))+(((-0.706654482808221)*(r11)*(x144)))+(((0.101137151016057)*(r01)*(x144))));
IKReal x145=IKsin(j0);
IKReal x146=IKcos(j0);
new_r02=((((-0.700293308986599)*(r22)*(x145)))+(((0.101137151016057)*(r02)*(x145)))+(((-0.217973272100839)*(r22)*(x146)))+(((0.0767641701389179)*(r12)*(x146)))+(((-0.706654482808221)*(r12)*(x145)))+(((-0.972931094596394)*(r02)*(x146))));
IKReal x147=IKcos(j0);
IKReal x148=IKsin(j0);
new_px=((((-0.00576481760791527)*(r02)*(x148)))+(((-0.700293308986599)*(pz)*(x148)))+(((-0.706654482808221)*(py)*(x148)))+(((0.0399167186122362)*(r22)*(x148)))+(((-0.972931094596394)*(px)*(x147)))+(((0.0124244765097478)*(r22)*(x147)))+(((0.555339190088168)*(x148)))+(((0.101137151016057)*(px)*(x148)))+(((0.0554570723919944)*(r02)*(x147)))+(((0.0767641701389179)*(py)*(x147)))+(((0.183683471933361)*(x147)))+(((0.0402793055200686)*(r12)*(x148)))+(((-0.217973272100839)*(pz)*(x147)))+(((-0.00437555769791832)*(r12)*(x147))));
new_r10=((((-0.207789224580627)*(r00)))+(((0.679762409992089)*(r20)))+(((-0.703382331388789)*(r10))));
new_r11=((((-0.207789224580627)*(r01)))+(((0.679762409992089)*(r21)))+(((-0.703382331388789)*(r11))));
new_r12=((((-0.207789224580627)*(r02)))+(((0.679762409992089)*(r22)))+(((-0.703382331388789)*(r12))));
new_py=((-0.851947807874941)+(((0.0400927928891610)*(r12)))+(((-0.0387464573695491)*(r22)))+(((-0.207789224580627)*(px)))+(((0.679762409992089)*(pz)))+(((-0.703382331388789)*(py)))+(((0.0118439858010957)*(r02))));
IKReal x149=IKcos(j0);
IKReal x150=IKsin(j0);
new_r20=((((0.700293308986599)*(r20)*(x149)))+(((-0.217973272100839)*(r20)*(x150)))+(((0.706654482808221)*(r10)*(x149)))+(((0.0767641701389179)*(r10)*(x150)))+(((-0.972931094596394)*(r00)*(x150)))+(((-0.101137151016057)*(r00)*(x149))));
IKReal x151=IKcos(j0);
IKReal x152=IKsin(j0);
new_r21=((((0.0767641701389179)*(r11)*(x152)))+(((-0.972931094596394)*(r01)*(x152)))+(((0.706654482808221)*(r11)*(x151)))+(((-0.217973272100839)*(r21)*(x152)))+(((-0.101137151016057)*(r01)*(x151)))+(((0.700293308986599)*(r21)*(x151))));
IKReal x153=IKcos(j0);
IKReal x154=IKsin(j0);
new_r22=((((-0.101137151016057)*(r02)*(x153)))+(((0.706654482808221)*(r12)*(x153)))+(((-0.217973272100839)*(r22)*(x154)))+(((0.700293308986599)*(r22)*(x153)))+(((0.0767641701389179)*(r12)*(x154)))+(((-0.972931094596394)*(r02)*(x154))));
IKReal x155=IKcos(j0);
IKReal x156=IKsin(j0);
new_pz=((-0.00200000000000000)+(((0.700293308986599)*(pz)*(x155)))+(((-0.00437555769791832)*(r12)*(x156)))+(((-0.0399167186122362)*(r22)*(x155)))+(((-0.972931094596394)*(px)*(x156)))+(((-0.101137151016057)*(px)*(x155)))+(((0.0124244765097478)*(r22)*(x156)))+(((0.00576481760791527)*(r02)*(x155)))+(((0.0554570723919944)*(r02)*(x156)))+(((0.0767641701389179)*(py)*(x156)))+(((0.706654482808221)*(py)*(x155)))+(((-0.555339190088168)*(x155)))+(((0.183683471933361)*(x156)))+(((-0.0402793055200686)*(r12)*(x155)))+(((-0.217973272100839)*(pz)*(x156))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((-1.00000000000000)*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((-1.00000000000000)*(pz)*(r00))));
rxp0_2=((((-1.00000000000000)*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((-1.00000000000000)*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((-1.00000000000000)*(pz)*(r01))));
rxp1_2=((((-1.00000000000000)*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((-1.00000000000000)*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((-1.00000000000000)*(pz)*(r02))));
rxp2_2=((((-1.00000000000000)*(px)*(r12)))+(((py)*(r02))));
IKReal op[72], zeror[48];
int numroots;
IKReal x157=((0.00100000000000000)*(npy));
IKReal x158=((0.780000000000000)*(npz));
IKReal x159=((-0.00790375000000000)+(pp));
IKReal x160=((x157)+(x158));
IKReal x161=((((-1.00000000000000)*(x160)))+(x159));
IKReal x162=((-0.00200000000000000)*(npx));
IKReal x163=((x157)+(x159));
IKReal x164=((((-1.00000000000000)*(x158)))+(x163));
IKReal x165=((pp)*(r02));
IKReal x166=((0.000390000000000000)*(r01));
IKReal x167=((0.00100000000000000)*(rxp0_0));
IKReal x168=((0.000400000000000000)*(r20));
IKReal x169=((0.00789625000000000)*(r02));
IKReal x170=((0.780000000000000)*(px));
IKReal x171=((0.800000000000000)*(rxp2_2));
IKReal x172=((2.00000000000000)*(npz)*(px));
IKReal x173=((pp)*(r12));
IKReal x174=((0.000390000000000000)*(r11));
IKReal x175=((0.00100000000000000)*(rxp0_1));
IKReal x176=((0.00789625000000000)*(r12));
IKReal x177=((0.780000000000000)*(py));
IKReal x178=((2.00000000000000)*(npz)*(py));
IKReal x179=((x173)+(x177)+(x176));
IKReal x180=((x178)+(x175)+(x174));
IKReal x181=((((-1.00000000000000)*(x180)))+(x179));
IKReal x182=((0.00200000000000000)*(rxp1_1));
IKReal x183=((0.000780000000000000)*(r10));
IKReal x184=((((-1.00000000000000)*(x183)))+(x182));
IKReal x185=((0.000800000000000000)*(r21));
IKReal x186=((0.000780000000000000)*(r00));
IKReal x187=((0.00200000000000000)*(rxp1_0));
IKReal x188=((x179)+(x175)+(x174));
IKReal x189=((((-1.00000000000000)*(x178)))+(x188));
IKReal x190=((-1.56000000000000)*(npx));
IKReal x191=((3.12000000000000)*(npy));
IKReal x192=((1.56000000000000)*(npx));
IKReal x193=((0.000800000000000000)*(r22));
IKReal x194=((4.00000000000000)*(npx)*(px));
IKReal x195=((1.60000000000000)*(rxp0_2));
IKReal x196=((0.00200000000000000)*(rxp2_0));
IKReal x197=((0.0157925000000000)*(r00));
IKReal x198=((2.00000000000000)*(pp)*(r00));
IKReal x199=((4.00000000000000)*(npx)*(py));
IKReal x200=((0.00200000000000000)*(rxp2_1));
IKReal x201=((0.0157925000000000)*(r10));
IKReal x202=((2.00000000000000)*(pp)*(r10));
IKReal x203=((x202)+(x201)+(x200));
IKReal x204=((((-1.00000000000000)*(x199)))+(x203));
IKReal x205=((8.00000000000000)*(npy)*(py));
IKReal x206=((0.0315850000000000)*(r11));
IKReal x207=((4.00000000000000)*(pp)*(r11));
IKReal x208=((x207)+(x206));
IKReal x209=((((-1.00000000000000)*(x208)))+(x205));
IKReal x210=((3.20000000000000)*(rxp1_2));
IKReal x211=((4.00000000000000)*(pp)*(r01));
IKReal x212=((0.0315850000000000)*(r01));
IKReal x213=((8.00000000000000)*(npy)*(px));
IKReal x214=((x199)+(x200));
IKReal x215=((x202)+(x201));
IKReal x216=((x214)+(((-1.00000000000000)*(x215))));
IKReal x217=((x159)+(x158));
IKReal x218=((((-1.00000000000000)*(x157)))+(x217));
IKReal x219=((x160)+(x159));
IKReal x220=((x178)+(x175)+(x177));
IKReal x221=((x173)+(x174)+(x176));
IKReal x222=((x220)+(((-1.00000000000000)*(x221))));
IKReal x223=((x182)+(x183));
IKReal x224=((-1.00000000000000)*(x223));
IKReal x225=((x178)+(x174)+(x177));
IKReal x226=((x173)+(x175)+(x176));
IKReal x227=((x225)+(((-1.00000000000000)*(x226))));
op[0]=x161;
op[1]=0;
op[2]=x162;
op[3]=0;
op[4]=x164;
op[5]=0;
op[6]=0;
op[7]=x161;
op[8]=0;
op[9]=x162;
op[10]=0;
op[11]=x164;
op[12]=((((-1.00000000000000)*(x168)))+(((-1.00000000000000)*(x167)))+(((-1.00000000000000)*(x166)))+(((-1.00000000000000)*(x171)))+(((-1.00000000000000)*(x172)))+(x170)+(x169)+(x165));
op[13]=x181;
op[14]=((((-1.00000000000000)*(x186)))+(x185)+(x187));
op[15]=x184;
op[16]=((((-1.00000000000000)*(x171)))+(((-1.00000000000000)*(x172)))+(x170)+(x168)+(x169)+(x166)+(x167)+(x165));
op[17]=x189;
op[18]=x181;
op[19]=((((-1.00000000000000)*(x169)))+(((-1.00000000000000)*(x168)))+(((-1.00000000000000)*(x165)))+(((-1.00000000000000)*(x170)))+(((-1.00000000000000)*(x171)))+(x172)+(x166)+(x167));
op[20]=x184;
op[21]=((((-1.00000000000000)*(x187)))+(x185)+(x186));
op[22]=x189;
op[23]=((((-1.00000000000000)*(x169)))+(((-1.00000000000000)*(x165)))+(((-1.00000000000000)*(x167)))+(((-1.00000000000000)*(x166)))+(((-1.00000000000000)*(x170)))+(((-1.00000000000000)*(x171)))+(x172)+(x168));
op[24]=x190;
op[25]=0;
op[26]=x191;
op[27]=0;
op[28]=x192;
op[29]=0;
op[30]=0;
op[31]=x190;
op[32]=0;
op[33]=x191;
op[34]=0;
op[35]=x192;
op[36]=((((-1.00000000000000)*(x194)))+(((-1.00000000000000)*(x195)))+(x198)+(x193)+(x197)+(x196));
op[37]=x204;
op[38]=((x210)+(x213)+(((-1.00000000000000)*(x212)))+(((-1.00000000000000)*(x211))));
op[39]=x209;
op[40]=((((-1.00000000000000)*(x198)))+(((-1.00000000000000)*(x197)))+(x193)+(x196)+(x195)+(x194));
op[41]=x216;
op[42]=x204;
op[43]=((((-1.00000000000000)*(x198)))+(((-1.00000000000000)*(x195)))+(((-1.00000000000000)*(x196)))+(((-1.00000000000000)*(x197)))+(x193)+(x194));
op[44]=x209;
op[45]=((x210)+(x211)+(x212)+(((-1.00000000000000)*(x213))));
op[46]=x216;
op[47]=((((-1.00000000000000)*(x194)))+(((-1.00000000000000)*(x196)))+(x198)+(x193)+(x197)+(x195));
op[48]=x218;
op[49]=0;
op[50]=x162;
op[51]=0;
op[52]=x219;
op[53]=0;
op[54]=0;
op[55]=x218;
op[56]=0;
op[57]=x162;
op[58]=0;
op[59]=x219;
op[60]=((((-1.00000000000000)*(x169)))+(((-1.00000000000000)*(x165)))+(((-1.00000000000000)*(x166)))+(x171)+(x170)+(x172)+(x168)+(x167));
op[61]=x222;
op[62]=((((-1.00000000000000)*(x187)))+(((-1.00000000000000)*(x186)))+(((-1.00000000000000)*(x185))));
op[63]=x224;
op[64]=((((-1.00000000000000)*(x169)))+(((-1.00000000000000)*(x168)))+(((-1.00000000000000)*(x165)))+(((-1.00000000000000)*(x167)))+(x171)+(x170)+(x172)+(x166));
op[65]=x227;
op[66]=x222;
op[67]=((((-1.00000000000000)*(x167)))+(((-1.00000000000000)*(x170)))+(((-1.00000000000000)*(x172)))+(x171)+(x168)+(x169)+(x166)+(x165));
op[68]=x224;
op[69]=((((-1.00000000000000)*(x185)))+(x186)+(x187));
op[70]=x227;
op[71]=((((-1.00000000000000)*(x168)))+(((-1.00000000000000)*(x166)))+(((-1.00000000000000)*(x170)))+(((-1.00000000000000)*(x172)))+(x171)+(x169)+(x167)+(x165));
solvedialyticpoly8qep(op,zeror,numroots);
IKReal j5array[16], cj5array[16], sj5array[16], j6array[16], cj6array[16], sj6array[16], j1array[16], cj1array[16], sj1array[16];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ij5 += 3)
{
IKReal htj5 = zeror[ij5+0], htj6 = zeror[ij5+1], htj1 = zeror[ij5+2];
j5array[numsolutions]=((2.00000000000000)*(atan(htj5)));
j6array[numsolutions]=((2.00000000000000)*(atan(htj6)));
j1array[numsolutions]=((2.00000000000000)*(atan(htj1)));
IKReal x228=(htj5)*(htj5);
IKReal x229=(htj6)*(htj6);
IKReal x230=(htj1)*(htj1);
cj5array[numsolutions]=((((IKabs(((1.00000000000000)+(x228))) != 0)?((IKReal)1/(((1.00000000000000)+(x228)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x228))))));
cj6array[numsolutions]=((((IKabs(((1.00000000000000)+(x229))) != 0)?((IKReal)1/(((1.00000000000000)+(x229)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x229))))));
cj1array[numsolutions]=((((IKabs(((1.00000000000000)+(x230))) != 0)?((IKReal)1/(((1.00000000000000)+(x230)))):(IKReal)1.0e30))*(((1.00000000000000)+(((-1.00000000000000)*(x230))))));
sj5array[numsolutions]=((2.00000000000000)*(htj5)*(((IKabs(((1.00000000000000)+((htj5)*(htj5)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj5)*(htj5))))):(IKReal)1.0e30)));
sj6array[numsolutions]=((2.00000000000000)*(htj6)*(((IKabs(((1.00000000000000)+((htj6)*(htj6)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj6)*(htj6))))):(IKReal)1.0e30)));
sj1array[numsolutions]=((2.00000000000000)*(htj1)*(((IKabs(((1.00000000000000)+((htj1)*(htj1)))) != 0)?((IKReal)1/(((1.00000000000000)+((htj1)*(htj1))))):(IKReal)1.0e30)));
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j5valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj5 = 16;
_nj6 = 1;
_nj1 = 1;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
_ij6[0] = 0; _ij6[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( !j5valid[iij5] ) { continue; }
if( IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(cj6array[ij5]-cj6array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij5]-sj6array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij5]-cj1array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij5]-sj1array[iij5]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j5valid[iij5]=false; _ij5[1] = iij5; _ij6[1] = 0; _ij1[1] = 0;  break; 
}
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

    j6 = j6array[ij5]; cj6 = cj6array[ij5]; sj6 = sj6array[ij5];

    j1 = j1array[ij5]; cj1 = cj1array[ij5]; sj1 = sj1array[ij5];

{
IKReal dummyeval[1];
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[2];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j1)), 6.28318530717959)));
evalcond[1]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((195.000000000000)*(cj6)*(r00)*(sj5)))+(((195.000000000000)*(cj5)*(r02)))+(((-500.000000000000)*(px)))+(((0.250000000000000)*(cj6)*(r01)))+(((0.250000000000000)*(r00)*(sj6)))+(((-195.000000000000)*(r01)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((195.000000000000)*(cj5)*(r22)))+(((0.250000000000000)*(r20)*(sj6)))+(((-195.000000000000)*(r21)*(sj5)*(sj6)))+(((-500.000000000000)*(pz)))+(((195.000000000000)*(cj6)*(r20)*(sj5)))+(((0.250000000000000)*(cj6)*(r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((195.000000000000)*(cj6)*(r00)*(sj5)))+(((195.000000000000)*(cj5)*(r02)))+(((-500.000000000000)*(px)))+(((0.250000000000000)*(cj6)*(r01)))+(((0.250000000000000)*(r00)*(sj6)))+(((-195.000000000000)*(r01)*(sj5)*(sj6)))))+IKsqr(((((195.000000000000)*(cj5)*(r22)))+(((0.250000000000000)*(r20)*(sj6)))+(((-195.000000000000)*(r21)*(sj5)*(sj6)))+(((-500.000000000000)*(pz)))+(((195.000000000000)*(cj6)*(r20)*(sj5)))+(((0.250000000000000)*(cj6)*(r21)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((195.000000000000)*(cj6)*(r00)*(sj5)))+(((195.000000000000)*(cj5)*(r02)))+(((-500.000000000000)*(px)))+(((0.250000000000000)*(cj6)*(r01)))+(((0.250000000000000)*(r00)*(sj6)))+(((-195.000000000000)*(r01)*(sj5)*(sj6)))), ((((195.000000000000)*(cj5)*(r22)))+(((0.250000000000000)*(r20)*(sj6)))+(((-195.000000000000)*(r21)*(sj5)*(sj6)))+(((-500.000000000000)*(pz)))+(((195.000000000000)*(cj6)*(r20)*(sj5)))+(((0.250000000000000)*(cj6)*(r21)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[2];
evalcond[0]=((((-0.00200000000000000)*(IKcos(j2))))+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.00200000000000000)*(IKsin(j2))))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst45;
IKReal x231=(cj6)*(cj6);
IKReal x232=(sj6)*(sj6);
gconst45=IKsign(((((cj5)*(r11)*(r20)*(x231)))+(((cj5)*(r11)*(r20)*(x232)))+(((-1.00000000000000)*(r10)*(r22)*(sj5)*(sj6)))+(((r12)*(r20)*(sj5)*(sj6)))+(((cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj6)*(r11)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x231)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x232)))));
IKReal x233=(cj6)*(cj6);
IKReal x234=(sj6)*(sj6);
dummyeval[0]=((((cj5)*(r11)*(r20)*(x234)))+(((cj5)*(r11)*(r20)*(x233)))+(((-1.00000000000000)*(r10)*(r22)*(sj5)*(sj6)))+(((r12)*(r20)*(sj5)*(sj6)))+(((cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj6)*(r11)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x234)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x233))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))+IKsqr(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))), ((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKsin(j3))))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(IKcos(j3))))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst48;
IKReal x235=(cj6)*(cj6);
IKReal x236=(sj6)*(sj6);
gconst48=IKsign(((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x235)))+(((cj5)*(r01)*(r20)*(x236)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x235)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x236)))));
IKReal x237=(cj6)*(cj6);
IKReal x238=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x237)))+(((cj5)*(r01)*(r20)*(x238)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x238)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x237))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst48)*(((((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r20)))+(((cj3)*(r22)*(sj5)))+(((cj3)*(cj5)*(r21)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst48)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst48)*(((((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r20)))+(((cj3)*(r22)*(sj5)))+(((cj3)*(cj5)*(r21)*(sj6)))))), ((gconst48)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x239=IKsin(j4);
IKReal x240=IKcos(j4);
evalcond[0]=((-1.00000000000000)+(((r22)*(sj5)*(x239)))+(((-1.00000000000000)*(cj6)*(r21)*(x240)))+(((-1.00000000000000)*(r20)*(sj6)*(x240)))+(((cj5)*(r21)*(sj6)*(x239)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x239))));
evalcond[1]=((((r22)*(sj5)*(x240)))+(((cj6)*(r21)*(x239)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x240)))+(((r20)*(sj6)*(x239)))+(((cj5)*(r21)*(sj6)*(x240))));
evalcond[2]=((((-1.00000000000000)*(r00)*(sj6)*(x240)))+(((-1.00000000000000)*(cj6)*(r01)*(x240)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x239)))+(((r02)*(sj5)*(x239)))+(((cj5)*(r01)*(sj6)*(x239))));
evalcond[3]=((((cj5)*(r11)*(sj6)*(x239)))+(((-1.00000000000000)*(r10)*(sj6)*(x240)))+(((r12)*(sj5)*(x239)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x239)))+(((-1.00000000000000)*(cj6)*(r11)*(x240))));
evalcond[4]=((cj3)+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x240)))+(((r02)*(sj5)*(x240)))+(((cj5)*(r01)*(sj6)*(x240)))+(((r00)*(sj6)*(x239)))+(((cj6)*(r01)*(x239))));
evalcond[5]=((((r12)*(sj5)*(x240)))+(((r10)*(sj6)*(x239)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x240)))+(((cj5)*(r11)*(sj6)*(x240)))+(((-1.00000000000000)*(sj3)))+(((cj6)*(r11)*(x239))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))+IKsqr(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))), ((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj6)*(r00)*(sj5)))+(IKsin(j3))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(IKcos(j3))))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst50;
IKReal x241=(cj5)*(cj5);
IKReal x242=(r20)*(r20);
IKReal x243=(sj6)*(sj6);
IKReal x244=(cj6)*(cj6);
IKReal x245=(r21)*(r21);
gconst50=IKsign(((((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x241)))+(((-1.00000000000000)*(x242)*(x243)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((-2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((-1.00000000000000)*(x241)*(x242)*(x244)))+(((-1.00000000000000)*(x241)*(x243)*(x245)))+(((-1.00000000000000)*(x244)*(x245)))));
IKReal x246=(cj5)*(cj5);
IKReal x247=(r20)*(r20);
IKReal x248=(sj6)*(sj6);
IKReal x249=(cj6)*(cj6);
IKReal x250=(r21)*(r21);
dummyeval[0]=((((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x246)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((-2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((-1.00000000000000)*(x249)*(x250)))+(((-1.00000000000000)*(x246)*(x248)*(x250)))+(((-1.00000000000000)*(x247)*(x248)))+(((-1.00000000000000)*(x246)*(x247)*(x249))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst50)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst50)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst50)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)))))), ((gconst50)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x251=IKsin(j4);
IKReal x252=IKcos(j4);
evalcond[0]=((1.00000000000000)+(((-1.00000000000000)*(cj6)*(r21)*(x252)))+(((-1.00000000000000)*(r20)*(sj6)*(x252)))+(((cj5)*(r21)*(sj6)*(x251)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x251)))+(((r22)*(sj5)*(x251))));
evalcond[1]=((((r20)*(sj6)*(x251)))+(((cj6)*(r21)*(x251)))+(((cj5)*(r21)*(sj6)*(x252)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x252)))+(((r22)*(sj5)*(x252))));
evalcond[2]=((((-1.00000000000000)*(r00)*(sj6)*(x252)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x251)))+(((r02)*(sj5)*(x251)))+(((cj5)*(r01)*(sj6)*(x251)))+(((-1.00000000000000)*(cj6)*(r01)*(x252))));
evalcond[3]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x251)))+(((cj5)*(r11)*(sj6)*(x251)))+(((r12)*(sj5)*(x251)))+(((-1.00000000000000)*(cj6)*(r11)*(x252)))+(((-1.00000000000000)*(r10)*(sj6)*(x252))));
evalcond[4]=((((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x252)))+(((r02)*(sj5)*(x252)))+(((-1.00000000000000)*(cj3)))+(((cj6)*(r01)*(x251)))+(((cj5)*(r01)*(sj6)*(x252)))+(((r00)*(sj6)*(x251))));
evalcond[5]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x252)))+(((cj6)*(r11)*(x251)))+(((cj5)*(r11)*(sj6)*(x252)))+(((r12)*(sj5)*(x252)))+(((-1.00000000000000)*(sj3)))+(((r10)*(sj6)*(x251))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(IKsin(j3))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(IKcos(j3))))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst52;
IKReal x253=(cj6)*(cj6);
IKReal x254=(sj6)*(sj6);
gconst52=IKsign(((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x254)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x253)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x253)))+(((cj5)*(r01)*(r20)*(x254)))));
IKReal x255=(cj6)*(cj6);
IKReal x256=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x256)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x255)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x256)))+(((cj5)*(r01)*(r20)*(x255))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst52)*(((((cj3)*(cj5)*(r01)*(sj6)))+(((cj3)*(r02)*(sj5)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst52)*(((((-1.00000000000000)*(cj3)*(r00)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj6)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst52)*(((((cj3)*(cj5)*(r01)*(sj6)))+(((cj3)*(r02)*(sj5)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r00)))))), ((gconst52)*(((((-1.00000000000000)*(cj3)*(r00)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj6)*(r01)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x257=IKsin(j4);
IKReal x258=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj6)*(r21)*(x258)))+(((-1.00000000000000)*(r20)*(sj6)*(x258)))+(((cj5)*(r21)*(sj6)*(x257)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x257)))+(((r22)*(sj5)*(x257))));
evalcond[1]=((((r20)*(sj6)*(x257)))+(((cj6)*(r21)*(x257)))+(((cj5)*(r21)*(sj6)*(x258)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x258)))+(((-1.00000000000000)*(cj3)))+(((r22)*(sj5)*(x258))));
evalcond[2]=((-1.00000000000000)+(((-1.00000000000000)*(r00)*(sj6)*(x258)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x257)))+(((r02)*(sj5)*(x257)))+(((cj5)*(r01)*(sj6)*(x257)))+(((-1.00000000000000)*(cj6)*(r01)*(x258))));
evalcond[3]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x257)))+(((cj5)*(r11)*(sj6)*(x257)))+(((r12)*(sj5)*(x257)))+(((-1.00000000000000)*(cj6)*(r11)*(x258)))+(((-1.00000000000000)*(r10)*(sj6)*(x258))));
evalcond[4]=((((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x258)))+(((r02)*(sj5)*(x258)))+(((cj6)*(r01)*(x257)))+(((cj5)*(r01)*(sj6)*(x258)))+(((r00)*(sj6)*(x257))));
evalcond[5]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x258)))+(((cj6)*(r11)*(x257)))+(((cj5)*(r11)*(sj6)*(x258)))+(((r12)*(sj5)*(x258)))+(((-1.00000000000000)*(sj3)))+(((r10)*(sj6)*(x257))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(((-1.00000000000000)*(IKsin(j3))))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(IKcos(j3))))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst54;
IKReal x259=(cj6)*(cj6);
IKReal x260=(sj6)*(sj6);
gconst54=IKsign(((((cj5)*(r00)*(r21)*(x259)))+(((cj6)*(r01)*(r22)*(sj5)))+(((-1.00000000000000)*(cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x259)))+(((-1.00000000000000)*(r02)*(r20)*(sj5)*(sj6)))+(((cj5)*(r00)*(r21)*(x260)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x260)))+(((r00)*(r22)*(sj5)*(sj6)))));
IKReal x261=(cj6)*(cj6);
IKReal x262=(sj6)*(sj6);
dummyeval[0]=((((cj6)*(r01)*(r22)*(sj5)))+(((-1.00000000000000)*(cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(r02)*(r20)*(sj5)*(sj6)))+(((cj5)*(r00)*(r21)*(x261)))+(((cj5)*(r00)*(r21)*(x262)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x261)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x262)))+(((r00)*(r22)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst54)*(((((cj3)*(cj5)*(r01)*(sj6)))+(((cj3)*(r02)*(sj5)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst54)*(((((-1.00000000000000)*(cj3)*(r00)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj6)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst54)*(((((cj3)*(cj5)*(r01)*(sj6)))+(((cj3)*(r02)*(sj5)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r00)))))), ((gconst54)*(((((-1.00000000000000)*(cj3)*(r00)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj6)*(r01)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x263=IKsin(j4);
IKReal x264=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x263)))+(((cj5)*(r21)*(sj6)*(x263)))+(((-1.00000000000000)*(cj6)*(r21)*(x264)))+(((-1.00000000000000)*(r20)*(sj6)*(x264)))+(((r22)*(sj5)*(x263))));
evalcond[1]=((cj3)+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x264)))+(((cj5)*(r21)*(sj6)*(x264)))+(((r20)*(sj6)*(x263)))+(((cj6)*(r21)*(x263)))+(((r22)*(sj5)*(x264))));
evalcond[2]=((1.00000000000000)+(((-1.00000000000000)*(r00)*(sj6)*(x264)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x263)))+(((-1.00000000000000)*(cj6)*(r01)*(x264)))+(((cj5)*(r01)*(sj6)*(x263)))+(((r02)*(sj5)*(x263))));
evalcond[3]=((((r12)*(sj5)*(x263)))+(((-1.00000000000000)*(r10)*(sj6)*(x264)))+(((cj5)*(r11)*(sj6)*(x263)))+(((-1.00000000000000)*(cj6)*(r11)*(x264)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x263))));
evalcond[4]=((((cj6)*(r01)*(x263)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x264)))+(((r00)*(sj6)*(x263)))+(((cj5)*(r01)*(sj6)*(x264)))+(((r02)*(sj5)*(x264))));
evalcond[5]=((((r12)*(sj5)*(x264)))+(((r10)*(sj6)*(x263)))+(((cj6)*(r11)*(x263)))+(((cj5)*(r11)*(sj6)*(x264)))+(((-1.00000000000000)*(sj3)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x264))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))))+IKsqr(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))), ((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x265=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x265)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj2)*(x265)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(IKcos(j3))))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst46;
IKReal x266=(sj6)*(sj6);
IKReal x267=(cj5)*(cj5);
IKReal x268=(cj6)*(cj6);
gconst46=IKsign(((((r00)*(r10)*(x267)*(x268)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(r12)*(sj5)))+(((-1.00000000000000)*(cj6)*(r01)*(r10)*(sj6)*(x267)))+(((r02)*(r12)*((sj5)*(sj5))))+(((-1.00000000000000)*(cj6)*(r00)*(r11)*(sj6)*(x267)))+(((r00)*(r10)*(x266)))+(((r01)*(r11)*(x266)*(x267)))+(((cj6)*(r00)*(r11)*(sj6)))+(((cj5)*(r02)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r02)*(r10)*(sj5)))+(((cj6)*(r01)*(r10)*(sj6)))+(((r01)*(r11)*(x268)))+(((cj5)*(r01)*(r12)*(sj5)*(sj6)))));
IKReal x269=(sj6)*(sj6);
IKReal x270=(cj5)*(cj5);
IKReal x271=(cj6)*(cj6);
dummyeval[0]=((((r01)*(r11)*(x269)*(x270)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(r12)*(sj5)))+(((r02)*(r12)*((sj5)*(sj5))))+(((-1.00000000000000)*(cj6)*(r01)*(r10)*(sj6)*(x270)))+(((r00)*(r10)*(x269)))+(((-1.00000000000000)*(cj6)*(r00)*(r11)*(sj6)*(x270)))+(((cj6)*(r00)*(r11)*(sj6)))+(((cj5)*(r02)*(r11)*(sj5)*(sj6)))+(((r00)*(r10)*(x270)*(x271)))+(((-1.00000000000000)*(cj5)*(cj6)*(r02)*(r10)*(sj5)))+(((cj6)*(r01)*(r10)*(sj6)))+(((r01)*(r11)*(x271)))+(((cj5)*(r01)*(r12)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst46)*(((((-1.00000000000000)*(cj2)*(cj3)*(r10)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj3)*(cj6)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((((-1.00000000000000)*(cj2)*(cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj3)*(r12)*(sj5)))+(((cj2)*(cj3)*(cj5)*(cj6)*(r10))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst46)*(((((-1.00000000000000)*(cj2)*(cj3)*(r10)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj3)*(cj6)*(r11)))))), ((gconst46)*(((((-1.00000000000000)*(cj2)*(cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj3)*(r12)*(sj5)))+(((cj2)*(cj3)*(cj5)*(cj6)*(r10)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x272=IKsin(j4);
IKReal x273=IKcos(j4);
evalcond[0]=((((r22)*(sj5)*(x272)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x272)))+(((cj5)*(r21)*(sj6)*(x272)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj6)*(r21)*(x273)))+(((-1.00000000000000)*(r20)*(sj6)*(x273))));
evalcond[1]=((((r22)*(sj5)*(x273)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x273)))+(((cj5)*(r21)*(sj6)*(x273)))+(((r20)*(sj6)*(x272)))+(((cj6)*(r21)*(x272)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x272)))+(((-1.00000000000000)*(r00)*(sj6)*(x273)))+(((r02)*(sj5)*(x272)))+(((cj5)*(r01)*(sj6)*(x272)))+(((-1.00000000000000)*(cj6)*(r01)*(x273)))+(((-1.00000000000000)*(sj2))));
evalcond[3]=((((r12)*(sj5)*(x272)))+(((-1.00000000000000)*(r10)*(sj6)*(x273)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x272)))+(((-1.00000000000000)*(cj6)*(r11)*(x273)))+(((cj5)*(r11)*(sj6)*(x272))));
evalcond[4]=((((cj2)*(cj3)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x273)))+(((cj6)*(r01)*(x272)))+(((r00)*(sj6)*(x272)))+(((r02)*(sj5)*(x273)))+(((cj5)*(r01)*(sj6)*(x273))));
evalcond[5]=((((r12)*(sj5)*(x273)))+(((r10)*(sj6)*(x272)))+(((cj6)*(r11)*(x272)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x273)))+(((cj5)*(r11)*(sj6)*(x273)))+(((-1.00000000000000)*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))))+IKsqr(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))), ((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x274=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x274)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj2)*(x274)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(IKcos(j3))))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst46;
IKReal x275=(sj6)*(sj6);
IKReal x276=(cj5)*(cj5);
IKReal x277=(cj6)*(cj6);
gconst46=IKsign(((((-1.00000000000000)*(cj5)*(cj6)*(r00)*(r12)*(sj5)))+(((r02)*(r12)*((sj5)*(sj5))))+(((-1.00000000000000)*(cj6)*(r01)*(r10)*(sj6)*(x276)))+(((-1.00000000000000)*(cj6)*(r00)*(r11)*(sj6)*(x276)))+(((cj6)*(r00)*(r11)*(sj6)))+(((r00)*(r10)*(x275)))+(((cj5)*(r02)*(r11)*(sj5)*(sj6)))+(((r01)*(r11)*(x275)*(x276)))+(((-1.00000000000000)*(cj5)*(cj6)*(r02)*(r10)*(sj5)))+(((cj6)*(r01)*(r10)*(sj6)))+(((r01)*(r11)*(x277)))+(((cj5)*(r01)*(r12)*(sj5)*(sj6)))+(((r00)*(r10)*(x276)*(x277)))));
IKReal x278=(sj6)*(sj6);
IKReal x279=(cj5)*(cj5);
IKReal x280=(cj6)*(cj6);
dummyeval[0]=((((-1.00000000000000)*(cj5)*(cj6)*(r00)*(r12)*(sj5)))+(((r02)*(r12)*((sj5)*(sj5))))+(((-1.00000000000000)*(cj6)*(r01)*(r10)*(sj6)*(x279)))+(((r00)*(r10)*(x279)*(x280)))+(((-1.00000000000000)*(cj6)*(r00)*(r11)*(sj6)*(x279)))+(((cj6)*(r00)*(r11)*(sj6)))+(((r00)*(r10)*(x278)))+(((cj5)*(r02)*(r11)*(sj5)*(sj6)))+(((r01)*(r11)*(x280)))+(((r01)*(r11)*(x278)*(x279)))+(((-1.00000000000000)*(cj5)*(cj6)*(r02)*(r10)*(sj5)))+(((cj6)*(r01)*(r10)*(sj6)))+(((cj5)*(r01)*(r12)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst46)*(((((-1.00000000000000)*(cj2)*(cj3)*(r10)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj3)*(cj6)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst46)*(((((-1.00000000000000)*(cj2)*(cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj3)*(r12)*(sj5)))+(((cj2)*(cj3)*(cj5)*(cj6)*(r10))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst46)*(((((-1.00000000000000)*(cj2)*(cj3)*(r10)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj3)*(cj6)*(r11)))))), ((gconst46)*(((((-1.00000000000000)*(cj2)*(cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj3)*(r12)*(sj5)))+(((cj2)*(cj3)*(cj5)*(cj6)*(r10)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x281=IKsin(j4);
IKReal x282=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj6)*(r21)*(x282)))+(((-1.00000000000000)*(cj2)))+(((cj5)*(r21)*(sj6)*(x281)))+(((r22)*(sj5)*(x281)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x281)))+(((-1.00000000000000)*(r20)*(sj6)*(x282))));
evalcond[1]=((((cj6)*(r21)*(x281)))+(((cj5)*(r21)*(sj6)*(x282)))+(((r22)*(sj5)*(x282)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x282)))+(((-1.00000000000000)*(cj3)*(sj2)))+(((r20)*(sj6)*(x281))));
evalcond[2]=((((-1.00000000000000)*(cj6)*(r01)*(x282)))+(((-1.00000000000000)*(r00)*(sj6)*(x282)))+(((cj5)*(r01)*(sj6)*(x281)))+(((r02)*(sj5)*(x281)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x281)))+(((-1.00000000000000)*(sj2))));
evalcond[3]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x281)))+(((-1.00000000000000)*(cj6)*(r11)*(x282)))+(((-1.00000000000000)*(r10)*(sj6)*(x282)))+(((cj5)*(r11)*(sj6)*(x281)))+(((r12)*(sj5)*(x281))));
evalcond[4]=((((cj2)*(cj3)))+(((cj5)*(r01)*(sj6)*(x282)))+(((r02)*(sj5)*(x282)))+(((cj6)*(r01)*(x281)))+(((r00)*(sj6)*(x281)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x282))));
evalcond[5]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x282)))+(((cj6)*(r11)*(x281)))+(((r10)*(sj6)*(x281)))+(((cj5)*(r11)*(sj6)*(x282)))+(((-1.00000000000000)*(sj3)))+(((r12)*(sj5)*(x282))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst45)*(((((-1.00000000000000)*(cj2)*(cj6)*(r11)))+(((-1.00000000000000)*(cj2)*(r10)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst45)*(((((cj2)*(cj5)*(cj6)*(r10)))+(((-1.00000000000000)*(cj2)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj2)*(r12)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst45)*(((((-1.00000000000000)*(cj2)*(cj6)*(r11)))+(((-1.00000000000000)*(cj2)*(r10)*(sj6)))))), ((gconst45)*(((((cj2)*(cj5)*(cj6)*(r10)))+(((-1.00000000000000)*(cj2)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj2)*(r12)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[3];
IKReal x283=IKsin(j4);
IKReal x284=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj6)*(r21)*(x284)))+(((-1.00000000000000)*(cj2)))+(((cj5)*(r21)*(sj6)*(x283)))+(((r22)*(sj5)*(x283)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x283)))+(((-1.00000000000000)*(r20)*(sj6)*(x284))));
evalcond[1]=((((-1.00000000000000)*(cj6)*(r01)*(x284)))+(((-1.00000000000000)*(r00)*(sj6)*(x284)))+(((cj5)*(r01)*(sj6)*(x283)))+(((r02)*(sj5)*(x283)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x283)))+(((-1.00000000000000)*(sj2))));
evalcond[2]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x283)))+(((-1.00000000000000)*(cj6)*(r11)*(x284)))+(((-1.00000000000000)*(r10)*(sj6)*(x284)))+(((cj5)*(r11)*(sj6)*(x283)))+(((r12)*(sj5)*(x283))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5)))))+IKsqr(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5)))), ((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x285=IKsin(j3);
IKReal x286=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x285)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((-1.00000000000000)*(cj2)*(x285)))+(((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(x286)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(sj2)*(x286)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj2)*(x286)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((-1.00000000000000)*(x285)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j1)), 6.28318530717959)));
evalcond[1]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((195.000000000000)*(r01)*(sj5)*(sj6)))+(((-195.000000000000)*(cj6)*(r00)*(sj5)))+(((-0.250000000000000)*(r00)*(sj6)))+(((-0.250000000000000)*(cj6)*(r01)))+(((500.000000000000)*(px)))+(((-195.000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((195.000000000000)*(cj5)*(r22)))+(((0.250000000000000)*(r20)*(sj6)))+(((-195.000000000000)*(r21)*(sj5)*(sj6)))+(((-500.000000000000)*(pz)))+(((195.000000000000)*(cj6)*(r20)*(sj5)))+(((0.250000000000000)*(cj6)*(r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((195.000000000000)*(r01)*(sj5)*(sj6)))+(((-195.000000000000)*(cj6)*(r00)*(sj5)))+(((-0.250000000000000)*(r00)*(sj6)))+(((-0.250000000000000)*(cj6)*(r01)))+(((500.000000000000)*(px)))+(((-195.000000000000)*(cj5)*(r02)))))+IKsqr(((((195.000000000000)*(cj5)*(r22)))+(((0.250000000000000)*(r20)*(sj6)))+(((-195.000000000000)*(r21)*(sj5)*(sj6)))+(((-500.000000000000)*(pz)))+(((195.000000000000)*(cj6)*(r20)*(sj5)))+(((0.250000000000000)*(cj6)*(r21)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((195.000000000000)*(r01)*(sj5)*(sj6)))+(((-195.000000000000)*(cj6)*(r00)*(sj5)))+(((-0.250000000000000)*(r00)*(sj6)))+(((-0.250000000000000)*(cj6)*(r01)))+(((500.000000000000)*(px)))+(((-195.000000000000)*(cj5)*(r02)))), ((((195.000000000000)*(cj5)*(r22)))+(((0.250000000000000)*(r20)*(sj6)))+(((-195.000000000000)*(r21)*(sj5)*(sj6)))+(((-500.000000000000)*(pz)))+(((195.000000000000)*(cj6)*(r20)*(sj5)))+(((0.250000000000000)*(cj6)*(r21)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[2];
evalcond[0]=((((-0.00200000000000000)*(IKcos(j2))))+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.00200000000000000)*(IKsin(j2))))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst55;
IKReal x287=(sj6)*(sj6);
IKReal x288=(cj6)*(cj6);
gconst55=IKsign(((((-1.00000000000000)*(r00)*(r12)*(sj5)*(sj6)))+(((cj6)*(r02)*(r11)*(sj5)))+(((-1.00000000000000)*(cj6)*(r01)*(r12)*(sj5)))+(((cj5)*(r01)*(r10)*(x287)))+(((cj5)*(r01)*(r10)*(x288)))+(((-1.00000000000000)*(cj5)*(r00)*(r11)*(x288)))+(((-1.00000000000000)*(cj5)*(r00)*(r11)*(x287)))+(((r02)*(r10)*(sj5)*(sj6)))));
IKReal x289=(sj6)*(sj6);
IKReal x290=(cj6)*(cj6);
dummyeval[0]=((((cj5)*(r01)*(r10)*(x290)))+(((-1.00000000000000)*(cj5)*(r00)*(r11)*(x290)))+(((-1.00000000000000)*(r00)*(r12)*(sj5)*(sj6)))+(((cj6)*(r02)*(r11)*(sj5)))+(((-1.00000000000000)*(cj6)*(r01)*(r12)*(sj5)))+(((cj5)*(r01)*(r10)*(x289)))+(((-1.00000000000000)*(cj5)*(r00)*(r11)*(x289)))+(((r02)*(r10)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(IKsin(j3))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(IKcos(j3))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst58;
IKReal x291=(cj6)*(cj6);
IKReal x292=(sj6)*(sj6);
gconst58=IKsign(((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x291)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x292)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((cj5)*(r00)*(r11)*(x292)))+(((cj5)*(r00)*(r11)*(x291)))+(((r00)*(r12)*(sj5)*(sj6)))));
IKReal x293=(cj6)*(cj6);
IKReal x294=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x293)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x294)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((cj5)*(r00)*(r11)*(x294)))+(((cj5)*(r00)*(r11)*(x293)))+(((r00)*(r12)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst58)*(((((r02)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(sj3)))+(((cj5)*(r01)*(sj3)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst58)*(((((-1.00000000000000)*(cj6)*(r01)*(sj3)))+(((-1.00000000000000)*(r00)*(sj3)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst58)*(((((r02)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(sj3)))+(((cj5)*(r01)*(sj3)*(sj6)))))), ((gconst58)*(((((-1.00000000000000)*(cj6)*(r01)*(sj3)))+(((-1.00000000000000)*(r00)*(sj3)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x295=IKsin(j4);
IKReal x296=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj6)*(r21)*(x296)))+(((r22)*(sj5)*(x295)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x295)))+(((-1.00000000000000)*(r20)*(sj6)*(x296)))+(((cj5)*(r21)*(sj6)*(x295))));
evalcond[1]=((((cj6)*(r21)*(x295)))+(((r22)*(sj5)*(x296)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x296)))+(((r20)*(sj6)*(x295)))+(((-1.00000000000000)*(cj3)))+(((cj5)*(r21)*(sj6)*(x296))));
evalcond[2]=((1.00000000000000)+(((r02)*(sj5)*(x295)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x295)))+(((cj5)*(r01)*(sj6)*(x295)))+(((-1.00000000000000)*(cj6)*(r01)*(x296)))+(((-1.00000000000000)*(r00)*(sj6)*(x296))));
evalcond[3]=((((r12)*(sj5)*(x295)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x295)))+(((cj5)*(r11)*(sj6)*(x295)))+(((-1.00000000000000)*(cj6)*(r11)*(x296)))+(((-1.00000000000000)*(r10)*(sj6)*(x296))));
evalcond[4]=((((r02)*(sj5)*(x296)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x296)))+(((cj5)*(r01)*(sj6)*(x296)))+(((cj6)*(r01)*(x295)))+(((r00)*(sj6)*(x295))));
evalcond[5]=((sj3)+(((r10)*(sj6)*(x295)))+(((r12)*(sj5)*(x296)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x296)))+(((cj5)*(r11)*(sj6)*(x296)))+(((cj6)*(r11)*(x295))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(((-1.00000000000000)*(IKsin(j3))))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(IKcos(j3))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst60;
IKReal x297=(cj6)*(cj6);
IKReal x298=(sj6)*(sj6);
gconst60=IKsign(((((cj6)*(r01)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x297)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x298)))+(((-1.00000000000000)*(cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(r02)*(r20)*(sj5)*(sj6)))+(((cj5)*(r00)*(r21)*(x298)))+(((cj5)*(r00)*(r21)*(x297)))+(((r00)*(r22)*(sj5)*(sj6)))));
IKReal x299=(cj6)*(cj6);
IKReal x300=(sj6)*(sj6);
dummyeval[0]=((((cj5)*(r00)*(r21)*(x300)))+(((cj6)*(r01)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x299)))+(((-1.00000000000000)*(cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x300)))+(((-1.00000000000000)*(r02)*(r20)*(sj5)*(sj6)))+(((cj5)*(r00)*(r21)*(x299)))+(((r00)*(r22)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst60)*(((((cj3)*(cj5)*(r01)*(sj6)))+(((cj3)*(r02)*(sj5)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst60)*(((((-1.00000000000000)*(cj3)*(r00)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj6)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst60)*(((((cj3)*(cj5)*(r01)*(sj6)))+(((cj3)*(r02)*(sj5)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r00)))))), ((gconst60)*(((((-1.00000000000000)*(cj3)*(r00)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj6)*(r01)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x301=IKsin(j4);
IKReal x302=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x301)))+(((cj5)*(r21)*(sj6)*(x301)))+(((-1.00000000000000)*(cj6)*(r21)*(x302)))+(((-1.00000000000000)*(r20)*(sj6)*(x302)))+(((r22)*(sj5)*(x301))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x302)))+(cj3)+(((cj5)*(r21)*(sj6)*(x302)))+(((r20)*(sj6)*(x301)))+(((r22)*(sj5)*(x302)))+(((cj6)*(r21)*(x301))));
evalcond[2]=((-1.00000000000000)+(((-1.00000000000000)*(r00)*(sj6)*(x302)))+(((cj5)*(r01)*(sj6)*(x301)))+(((-1.00000000000000)*(cj6)*(r01)*(x302)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x301)))+(((r02)*(sj5)*(x301))));
evalcond[3]=((((cj5)*(r11)*(sj6)*(x301)))+(((-1.00000000000000)*(r10)*(sj6)*(x302)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x301)))+(((-1.00000000000000)*(cj6)*(r11)*(x302)))+(((r12)*(sj5)*(x301))));
evalcond[4]=((((cj5)*(r01)*(sj6)*(x302)))+(((r00)*(sj6)*(x301)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x302)))+(((cj6)*(r01)*(x301)))+(((r02)*(sj5)*(x302))));
evalcond[5]=((((cj5)*(r11)*(sj6)*(x302)))+(sj3)+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x302)))+(((r10)*(sj6)*(x301)))+(((r12)*(sj5)*(x302)))+(((cj6)*(r11)*(x301))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))+IKsqr(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))), ((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj6)*(r00)*(sj5)))+(IKsin(j3))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(IKcos(j3))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst62;
IKReal x303=(cj6)*(cj6);
IKReal x304=(sj6)*(sj6);
gconst62=IKsign(((((-1.00000000000000)*(r10)*(r22)*(sj5)*(sj6)))+(((cj5)*(r11)*(r20)*(x304)))+(((cj5)*(r11)*(r20)*(x303)))+(((r12)*(r20)*(sj5)*(sj6)))+(((cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x303)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x304)))+(((-1.00000000000000)*(cj6)*(r11)*(r22)*(sj5)))));
IKReal x305=(cj6)*(cj6);
IKReal x306=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(r10)*(r22)*(sj5)*(sj6)))+(((cj5)*(r11)*(r20)*(x306)))+(((cj5)*(r11)*(r20)*(x305)))+(((r12)*(r20)*(sj5)*(sj6)))+(((cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x305)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x306)))+(((-1.00000000000000)*(cj6)*(r11)*(r22)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst62)*(((((cj5)*(r21)*(sj3)*(sj6)))+(((r22)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst62)*(((((-1.00000000000000)*(r20)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst62)*(((((cj5)*(r21)*(sj3)*(sj6)))+(((r22)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj3)))))), ((gconst62)*(((((-1.00000000000000)*(r20)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj3)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x307=IKsin(j4);
IKReal x308=IKcos(j4);
evalcond[0]=((-1.00000000000000)+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x307)))+(((cj5)*(r21)*(sj6)*(x307)))+(((-1.00000000000000)*(cj6)*(r21)*(x308)))+(((-1.00000000000000)*(r20)*(sj6)*(x308)))+(((r22)*(sj5)*(x307))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x308)))+(((cj5)*(r21)*(sj6)*(x308)))+(((r20)*(sj6)*(x307)))+(((r22)*(sj5)*(x308)))+(((cj6)*(r21)*(x307))));
evalcond[2]=((((-1.00000000000000)*(r00)*(sj6)*(x308)))+(((cj5)*(r01)*(sj6)*(x307)))+(((-1.00000000000000)*(cj6)*(r01)*(x308)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x307)))+(((r02)*(sj5)*(x307))));
evalcond[3]=((((cj5)*(r11)*(sj6)*(x307)))+(((-1.00000000000000)*(r10)*(sj6)*(x308)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x307)))+(((-1.00000000000000)*(cj6)*(r11)*(x308)))+(((r12)*(sj5)*(x307))));
evalcond[4]=((((cj5)*(r01)*(sj6)*(x308)))+(((r00)*(sj6)*(x307)))+(((-1.00000000000000)*(cj3)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x308)))+(((cj6)*(r01)*(x307)))+(((r02)*(sj5)*(x308))));
evalcond[5]=((((cj5)*(r11)*(sj6)*(x308)))+(sj3)+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x308)))+(((r10)*(sj6)*(x307)))+(((r12)*(sj5)*(x308)))+(((cj6)*(r11)*(x307))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))+IKsqr(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))), ((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKsin(j3))))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(IKcos(j3))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst64;
IKReal x309=(cj6)*(cj6);
IKReal x310=(sj6)*(sj6);
gconst64=IKsign(((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x310)))+(((cj5)*(r01)*(r20)*(x309)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x310)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x309)))));
IKReal x311=(cj6)*(cj6);
IKReal x312=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x312)))+(((cj5)*(r01)*(r20)*(x311)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x312)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x311))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst64)*(((((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r20)))+(((cj3)*(r22)*(sj5)))+(((cj3)*(cj5)*(r21)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst64)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst64)*(((((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r20)))+(((cj3)*(r22)*(sj5)))+(((cj3)*(cj5)*(r21)*(sj6)))))), ((gconst64)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x313=IKsin(j4);
IKReal x314=IKcos(j4);
evalcond[0]=((1.00000000000000)+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x313)))+(((r22)*(sj5)*(x313)))+(((-1.00000000000000)*(r20)*(sj6)*(x314)))+(((-1.00000000000000)*(cj6)*(r21)*(x314)))+(((cj5)*(r21)*(sj6)*(x313))));
evalcond[1]=((((cj6)*(r21)*(x313)))+(((r20)*(sj6)*(x313)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x314)))+(((r22)*(sj5)*(x314)))+(((cj5)*(r21)*(sj6)*(x314))));
evalcond[2]=((((r02)*(sj5)*(x313)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x313)))+(((-1.00000000000000)*(r00)*(sj6)*(x314)))+(((-1.00000000000000)*(cj6)*(r01)*(x314)))+(((cj5)*(r01)*(sj6)*(x313))));
evalcond[3]=((((-1.00000000000000)*(r10)*(sj6)*(x314)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x313)))+(((-1.00000000000000)*(cj6)*(r11)*(x314)))+(((cj5)*(r11)*(sj6)*(x313)))+(((r12)*(sj5)*(x313))));
evalcond[4]=((((r00)*(sj6)*(x313)))+(cj3)+(((r02)*(sj5)*(x314)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x314)))+(((cj6)*(r01)*(x313)))+(((cj5)*(r01)*(sj6)*(x314))));
evalcond[5]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x314)))+(sj3)+(((cj6)*(r11)*(x313)))+(((cj5)*(r11)*(sj6)*(x314)))+(((r12)*(sj5)*(x314)))+(((r10)*(sj6)*(x313))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))))+IKsqr(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))), ((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x315=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x315)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj2)*(x315)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(IKcos(j3))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst56;
IKReal x316=(r11)*(r11);
IKReal x317=(cj5)*(cj5);
IKReal x318=(cj6)*(cj6);
IKReal x319=(r10)*(r10);
IKReal x320=(sj6)*(sj6);
gconst56=IKsign(((((-2.00000000000000)*(cj5)*(cj6)*(r10)*(r12)*(sj5)))+(((x316)*(x317)*(x320)))+(((-2.00000000000000)*(cj6)*(r10)*(r11)*(sj6)*(x317)))+(((2.00000000000000)*(cj5)*(r11)*(r12)*(sj5)*(sj6)))+((((r12)*(r12))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r10)*(r11)*(sj6)))+(((x317)*(x318)*(x319)))+(((x319)*(x320)))+(((x316)*(x318)))));
IKReal x321=(r11)*(r11);
IKReal x322=(cj5)*(cj5);
IKReal x323=(cj6)*(cj6);
IKReal x324=(r10)*(r10);
IKReal x325=(sj6)*(sj6);
dummyeval[0]=((((-2.00000000000000)*(cj5)*(cj6)*(r10)*(r12)*(sj5)))+(((-2.00000000000000)*(cj6)*(r10)*(r11)*(sj6)*(x322)))+(((x321)*(x322)*(x325)))+(((2.00000000000000)*(cj5)*(r11)*(r12)*(sj5)*(sj6)))+(((x324)*(x325)))+((((r12)*(r12))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r10)*(r11)*(sj6)))+(((x322)*(x323)*(x324)))+(((x321)*(x323))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst56)*(((((-1.00000000000000)*(cj6)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst56)*(((((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj6)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)))+(((cj5)*(cj6)*(r10)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst56)*(((((-1.00000000000000)*(cj6)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj6)))))), ((gconst56)*(((((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj6)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)))+(((cj5)*(cj6)*(r10)*(sj3)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x326=IKsin(j4);
IKReal x327=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj6)*(r21)*(x327)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x326)))+(((-1.00000000000000)*(r20)*(sj6)*(x327)))+(((cj5)*(r21)*(sj6)*(x326)))+(((-1.00000000000000)*(cj2)))+(((r22)*(sj5)*(x326))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x327)))+(((cj6)*(r21)*(x326)))+(((cj5)*(r21)*(sj6)*(x327)))+(((r22)*(sj5)*(x327)))+(((r20)*(sj6)*(x326)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((sj2)+(((cj5)*(r01)*(sj6)*(x326)))+(((r02)*(sj5)*(x326)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x326)))+(((-1.00000000000000)*(r00)*(sj6)*(x327)))+(((-1.00000000000000)*(cj6)*(r01)*(x327))));
evalcond[3]=((((cj5)*(r11)*(sj6)*(x326)))+(((-1.00000000000000)*(r10)*(sj6)*(x327)))+(((r12)*(sj5)*(x326)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x326)))+(((-1.00000000000000)*(cj6)*(r11)*(x327))));
evalcond[4]=((((cj6)*(r01)*(x326)))+(((r00)*(sj6)*(x326)))+(((-1.00000000000000)*(cj2)*(cj3)))+(((cj5)*(r01)*(sj6)*(x327)))+(((r02)*(sj5)*(x327)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x327))));
evalcond[5]=((((cj5)*(r11)*(sj6)*(x327)))+(sj3)+(((r10)*(sj6)*(x326)))+(((cj6)*(r11)*(x326)))+(((r12)*(sj5)*(x327)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x327))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))))+IKsqr(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))), ((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x328=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x328)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj2)*(x328)))+(((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(IKcos(j3))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst56;
IKReal x329=(r11)*(r11);
IKReal x330=(cj5)*(cj5);
IKReal x331=(cj6)*(cj6);
IKReal x332=(r10)*(r10);
IKReal x333=(sj6)*(sj6);
gconst56=IKsign(((((-2.00000000000000)*(cj5)*(cj6)*(r10)*(r12)*(sj5)))+(((x332)*(x333)))+(((x330)*(x331)*(x332)))+(((2.00000000000000)*(cj5)*(r11)*(r12)*(sj5)*(sj6)))+(((x329)*(x330)*(x333)))+((((r12)*(r12))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r10)*(r11)*(sj6)))+(((x329)*(x331)))+(((-2.00000000000000)*(cj6)*(r10)*(r11)*(sj6)*(x330)))));
IKReal x334=(r11)*(r11);
IKReal x335=(cj5)*(cj5);
IKReal x336=(cj6)*(cj6);
IKReal x337=(r10)*(r10);
IKReal x338=(sj6)*(sj6);
dummyeval[0]=((((x334)*(x336)))+(((-2.00000000000000)*(cj5)*(cj6)*(r10)*(r12)*(sj5)))+(((x337)*(x338)))+(((x335)*(x336)*(x337)))+(((2.00000000000000)*(cj5)*(r11)*(r12)*(sj5)*(sj6)))+((((r12)*(r12))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r10)*(r11)*(sj6)))+(((x334)*(x335)*(x338)))+(((-2.00000000000000)*(cj6)*(r10)*(r11)*(sj6)*(x335))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst56)*(((((-1.00000000000000)*(cj6)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst56)*(((((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj6)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)))+(((cj5)*(cj6)*(r10)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst56)*(((((-1.00000000000000)*(cj6)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj6)))))), ((gconst56)*(((((-1.00000000000000)*(cj5)*(r11)*(sj3)*(sj6)))+(((-1.00000000000000)*(r12)*(sj3)*(sj5)))+(((cj5)*(cj6)*(r10)*(sj3)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x339=IKsin(j4);
IKReal x340=IKcos(j4);
evalcond[0]=((((cj5)*(r21)*(sj6)*(x339)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x339)))+(((r22)*(sj5)*(x339)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj6)*(r21)*(x340)))+(((-1.00000000000000)*(r20)*(sj6)*(x340))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x340)))+(((r20)*(sj6)*(x339)))+(((cj6)*(r21)*(x339)))+(((cj5)*(r21)*(sj6)*(x340)))+(((r22)*(sj5)*(x340)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((((cj5)*(r01)*(sj6)*(x339)))+(sj2)+(((-1.00000000000000)*(cj6)*(r01)*(x340)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x339)))+(((-1.00000000000000)*(r00)*(sj6)*(x340)))+(((r02)*(sj5)*(x339))));
evalcond[3]=((((-1.00000000000000)*(r10)*(sj6)*(x340)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x339)))+(((r12)*(sj5)*(x339)))+(((-1.00000000000000)*(cj6)*(r11)*(x340)))+(((cj5)*(r11)*(sj6)*(x339))));
evalcond[4]=((((-1.00000000000000)*(cj2)*(cj3)))+(((r02)*(sj5)*(x340)))+(((cj6)*(r01)*(x339)))+(((r00)*(sj6)*(x339)))+(((cj5)*(r01)*(sj6)*(x340)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x340))));
evalcond[5]=((sj3)+(((cj5)*(r11)*(sj6)*(x340)))+(((r10)*(sj6)*(x339)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x340)))+(((cj6)*(r11)*(x339)))+(((r12)*(sj5)*(x340))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst55)*(((((-1.00000000000000)*(cj6)*(r11)*(sj2)))+(((-1.00000000000000)*(r10)*(sj2)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst55)*(((((-1.00000000000000)*(cj5)*(r11)*(sj2)*(sj6)))+(((-1.00000000000000)*(r12)*(sj2)*(sj5)))+(((cj5)*(cj6)*(r10)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst55)*(((((-1.00000000000000)*(cj6)*(r11)*(sj2)))+(((-1.00000000000000)*(r10)*(sj2)*(sj6)))))), ((gconst55)*(((((-1.00000000000000)*(cj5)*(r11)*(sj2)*(sj6)))+(((-1.00000000000000)*(r12)*(sj2)*(sj5)))+(((cj5)*(cj6)*(r10)*(sj2)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[3];
IKReal x341=IKsin(j4);
IKReal x342=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x341)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj6)*(r21)*(x342)))+(((cj5)*(r21)*(sj6)*(x341)))+(((r22)*(sj5)*(x341)))+(((-1.00000000000000)*(r20)*(sj6)*(x342))));
evalcond[1]=((sj2)+(((-1.00000000000000)*(cj6)*(r01)*(x342)))+(((r02)*(sj5)*(x341)))+(((-1.00000000000000)*(r00)*(sj6)*(x342)))+(((cj5)*(r01)*(sj6)*(x341)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x341))));
evalcond[2]=((((cj5)*(r11)*(sj6)*(x341)))+(((-1.00000000000000)*(r10)*(sj6)*(x342)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x341)))+(((-1.00000000000000)*(cj6)*(r11)*(x342)))+(((r12)*(sj5)*(x341))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-1.00000000000000)*(cj6)*(r11)*(sj4)))+(((-1.00000000000000)*(cj4)*(r12)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(r11)*(sj6)))+(((cj4)*(cj5)*(cj6)*(r10)))+(((-1.00000000000000)*(r10)*(sj4)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj6)*(r11)*(sj4)))+(((-1.00000000000000)*(cj4)*(r12)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(r11)*(sj6)))+(((cj4)*(cj5)*(cj6)*(r10)))+(((-1.00000000000000)*(r10)*(sj4)*(sj6)))))+IKsqr(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.00000000000000)*(cj6)*(r11)*(sj4)))+(((-1.00000000000000)*(cj4)*(r12)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(r11)*(sj6)))+(((cj4)*(cj5)*(cj6)*(r10)))+(((-1.00000000000000)*(r10)*(sj4)*(sj6)))), ((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x343=IKsin(j3);
IKReal x344=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x343)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj2)*(x343)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(x344)+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6)))+(((-1.00000000000000)*(sj2)*(x344))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))+(((-1.00000000000000)*(cj2)*(x344))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(x343)+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j1)), 6.28318530717959)));
evalcond[1]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((-195.000000000000)*(r11)*(sj5)*(sj6)))+(((195.000000000000)*(cj6)*(r10)*(sj5)))+(((195.000000000000)*(cj5)*(r12)))+(((-500.000000000000)*(py)))+(((0.250000000000000)*(cj6)*(r11)))+(((0.250000000000000)*(r10)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((195.000000000000)*(cj5)*(r22)))+(((0.250000000000000)*(r20)*(sj6)))+(((-195.000000000000)*(r21)*(sj5)*(sj6)))+(((-500.000000000000)*(pz)))+(((195.000000000000)*(cj6)*(r20)*(sj5)))+(((0.250000000000000)*(cj6)*(r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-195.000000000000)*(r11)*(sj5)*(sj6)))+(((195.000000000000)*(cj6)*(r10)*(sj5)))+(((195.000000000000)*(cj5)*(r12)))+(((-500.000000000000)*(py)))+(((0.250000000000000)*(cj6)*(r11)))+(((0.250000000000000)*(r10)*(sj6)))))+IKsqr(((((195.000000000000)*(cj5)*(r22)))+(((0.250000000000000)*(r20)*(sj6)))+(((-195.000000000000)*(r21)*(sj5)*(sj6)))+(((-500.000000000000)*(pz)))+(((195.000000000000)*(cj6)*(r20)*(sj5)))+(((0.250000000000000)*(cj6)*(r21)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-195.000000000000)*(r11)*(sj5)*(sj6)))+(((195.000000000000)*(cj6)*(r10)*(sj5)))+(((195.000000000000)*(cj5)*(r12)))+(((-500.000000000000)*(py)))+(((0.250000000000000)*(cj6)*(r11)))+(((0.250000000000000)*(r10)*(sj6)))), ((((195.000000000000)*(cj5)*(r22)))+(((0.250000000000000)*(r20)*(sj6)))+(((-195.000000000000)*(r21)*(sj5)*(sj6)))+(((-500.000000000000)*(pz)))+(((195.000000000000)*(cj6)*(r20)*(sj5)))+(((0.250000000000000)*(cj6)*(r21)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[2];
evalcond[0]=((((-0.00200000000000000)*(IKcos(j2))))+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.00200000000000000)*(IKsin(j2))))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst65;
IKReal x345=(cj6)*(cj6);
IKReal x346=(sj6)*(sj6);
gconst65=IKsign(((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x345)))+(((cj5)*(r01)*(r20)*(x346)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x345)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x346)))));
IKReal x347=(cj6)*(cj6);
IKReal x348=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x348)))+(((cj5)*(r01)*(r20)*(x347)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x347)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x348))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(IKcos(j3))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(IKsin(j3))))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst68;
IKReal x349=(cj6)*(cj6);
IKReal x350=(sj6)*(sj6);
gconst68=IKsign(((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x350)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x350)))+(((cj5)*(r01)*(r20)*(x349)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x349)))));
IKReal x351=(cj6)*(cj6);
IKReal x352=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x352)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x351)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x351)))+(((cj5)*(r01)*(r20)*(x352))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst68)*(((((cj5)*(r21)*(sj3)*(sj6)))+(((r22)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst68)*(((((-1.00000000000000)*(r20)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst68)*(((((cj5)*(r21)*(sj3)*(sj6)))+(((r22)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj3)))))), ((gconst68)*(((((-1.00000000000000)*(r20)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj3)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x353=IKsin(j4);
IKReal x354=IKcos(j4);
evalcond[0]=((-1.00000000000000)+(((-1.00000000000000)*(cj6)*(r21)*(x354)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x353)))+(((-1.00000000000000)*(r20)*(sj6)*(x354)))+(((cj5)*(r21)*(sj6)*(x353)))+(((r22)*(sj5)*(x353))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x354)))+(((cj6)*(r21)*(x353)))+(((cj5)*(r21)*(sj6)*(x354)))+(((r20)*(sj6)*(x353)))+(((r22)*(sj5)*(x354))));
evalcond[2]=((((-1.00000000000000)*(cj6)*(r01)*(x354)))+(((cj5)*(r01)*(sj6)*(x353)))+(((r02)*(sj5)*(x353)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x353)))+(((-1.00000000000000)*(r00)*(sj6)*(x354))));
evalcond[3]=((((cj5)*(r11)*(sj6)*(x353)))+(((-1.00000000000000)*(r10)*(sj6)*(x354)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x353)))+(((-1.00000000000000)*(cj6)*(r11)*(x354)))+(((r12)*(sj5)*(x353))));
evalcond[4]=((sj3)+(((cj5)*(r01)*(sj6)*(x354)))+(((cj6)*(r01)*(x353)))+(((r00)*(sj6)*(x353)))+(((r02)*(sj5)*(x354)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x354))));
evalcond[5]=((((cj5)*(r11)*(sj6)*(x354)))+(cj3)+(((r10)*(sj6)*(x353)))+(((cj6)*(r11)*(x353)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x354)))+(((r12)*(sj5)*(x354))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(IKcos(j3))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(IKsin(j3))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst70;
IKReal x355=(cj6)*(cj6);
IKReal x356=(sj6)*(sj6);
gconst70=IKsign(((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x356)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x355)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x356)))+(((cj5)*(r01)*(r20)*(x355)))));
IKReal x357=(cj6)*(cj6);
IKReal x358=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x357)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x358)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x358)))+(((cj5)*(r01)*(r20)*(x357))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst70)*(((((cj5)*(r21)*(sj3)*(sj6)))+(((r22)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst70)*(((((-1.00000000000000)*(r20)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst70)*(((((cj5)*(r21)*(sj3)*(sj6)))+(((r22)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj3)))))), ((gconst70)*(((((-1.00000000000000)*(r20)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj3)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x359=IKsin(j4);
IKReal x360=IKcos(j4);
evalcond[0]=((1.00000000000000)+(((-1.00000000000000)*(cj6)*(r21)*(x360)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x359)))+(((-1.00000000000000)*(r20)*(sj6)*(x360)))+(((cj5)*(r21)*(sj6)*(x359)))+(((r22)*(sj5)*(x359))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x360)))+(((cj6)*(r21)*(x359)))+(((cj5)*(r21)*(sj6)*(x360)))+(((r22)*(sj5)*(x360)))+(((r20)*(sj6)*(x359))));
evalcond[2]=((((-1.00000000000000)*(r00)*(sj6)*(x360)))+(((-1.00000000000000)*(cj6)*(r01)*(x360)))+(((cj5)*(r01)*(sj6)*(x359)))+(((r02)*(sj5)*(x359)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x359))));
evalcond[3]=((((cj5)*(r11)*(sj6)*(x359)))+(((-1.00000000000000)*(r10)*(sj6)*(x360)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x359)))+(((-1.00000000000000)*(cj6)*(r11)*(x360)))+(((r12)*(sj5)*(x359))));
evalcond[4]=((((r02)*(sj5)*(x360)))+(sj3)+(((cj6)*(r01)*(x359)))+(((r00)*(sj6)*(x359)))+(((cj5)*(r01)*(sj6)*(x360)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x360))));
evalcond[5]=((((r10)*(sj6)*(x359)))+(((-1.00000000000000)*(cj3)))+(((cj6)*(r11)*(x359)))+(((r12)*(sj5)*(x360)))+(((cj5)*(r11)*(sj6)*(x360)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x360))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(IKsin(j3))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(IKcos(j3))+(((cj5)*(r02))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst72;
IKReal x361=(sj6)*(sj6);
IKReal x362=(cj6)*(cj6);
gconst72=IKsign(((((cj5)*(r01)*(r10)*(x362)))+(((cj5)*(r01)*(r10)*(x361)))+(((-1.00000000000000)*(r00)*(r12)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r11)*(x361)))+(((-1.00000000000000)*(cj5)*(r00)*(r11)*(x362)))+(((cj6)*(r02)*(r11)*(sj5)))+(((-1.00000000000000)*(cj6)*(r01)*(r12)*(sj5)))+(((r02)*(r10)*(sj5)*(sj6)))));
IKReal x363=(sj6)*(sj6);
IKReal x364=(cj6)*(cj6);
dummyeval[0]=((((cj5)*(r01)*(r10)*(x364)))+(((cj5)*(r01)*(r10)*(x363)))+(((-1.00000000000000)*(r00)*(r12)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r11)*(x364)))+(((-1.00000000000000)*(cj5)*(r00)*(r11)*(x363)))+(((cj6)*(r02)*(r11)*(sj5)))+(((-1.00000000000000)*(cj6)*(r01)*(r12)*(sj5)))+(((r02)*(r10)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst72)*(((((r12)*(sj3)*(sj5)))+(((cj5)*(r11)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst72)*(((((-1.00000000000000)*(cj6)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst72)*(((((r12)*(sj3)*(sj5)))+(((cj5)*(r11)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(sj3)))))), ((gconst72)*(((((-1.00000000000000)*(cj6)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x365=IKsin(j4);
IKReal x366=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj6)*(r21)*(x366)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x365)))+(((cj5)*(r21)*(sj6)*(x365)))+(((-1.00000000000000)*(r20)*(sj6)*(x366)))+(((r22)*(sj5)*(x365))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x366)))+(((cj5)*(r21)*(sj6)*(x366)))+(((-1.00000000000000)*(cj3)))+(((r22)*(sj5)*(x366)))+(((cj6)*(r21)*(x365)))+(((r20)*(sj6)*(x365))));
evalcond[2]=((((r02)*(sj5)*(x365)))+(((-1.00000000000000)*(r00)*(sj6)*(x366)))+(((-1.00000000000000)*(cj6)*(r01)*(x366)))+(((cj5)*(r01)*(sj6)*(x365)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x365))));
evalcond[3]=((-1.00000000000000)+(((r12)*(sj5)*(x365)))+(((cj5)*(r11)*(sj6)*(x365)))+(((-1.00000000000000)*(r10)*(sj6)*(x366)))+(((-1.00000000000000)*(cj6)*(r11)*(x366)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x365))));
evalcond[4]=((((r02)*(sj5)*(x366)))+(sj3)+(((r00)*(sj6)*(x365)))+(((cj5)*(r01)*(sj6)*(x366)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x366)))+(((cj6)*(r01)*(x365))));
evalcond[5]=((((r10)*(sj6)*(x365)))+(((r12)*(sj5)*(x366)))+(((cj5)*(r11)*(sj6)*(x366)))+(((cj6)*(r11)*(x365)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x366))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(((-1.00000000000000)*(IKsin(j3))))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(IKcos(j3))+(((cj5)*(r02))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst74;
IKReal x367=(cj6)*(cj6);
IKReal x368=(sj6)*(sj6);
gconst74=IKsign(((((-1.00000000000000)*(cj5)*(r11)*(r20)*(x367)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x368)))+(((cj5)*(r10)*(r21)*(x367)))+(((cj5)*(r10)*(r21)*(x368)))+(((cj6)*(r11)*(r22)*(sj5)))+(((-1.00000000000000)*(r12)*(r20)*(sj5)*(sj6)))+(((r10)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r12)*(r21)*(sj5)))));
IKReal x369=(cj6)*(cj6);
IKReal x370=(sj6)*(sj6);
dummyeval[0]=((((cj5)*(r10)*(r21)*(x370)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x369)))+(((cj5)*(r10)*(r21)*(x369)))+(((cj6)*(r11)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x370)))+(((-1.00000000000000)*(r12)*(r20)*(sj5)*(sj6)))+(((r10)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r12)*(r21)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst74)*(((((cj3)*(r12)*(sj5)))+(((cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst74)*(((((-1.00000000000000)*(cj3)*(cj6)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst74)*(((((cj3)*(r12)*(sj5)))+(((cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r10)))))), ((gconst74)*(((((-1.00000000000000)*(cj3)*(cj6)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x371=IKsin(j4);
IKReal x372=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x371)))+(((-1.00000000000000)*(r20)*(sj6)*(x372)))+(((cj5)*(r21)*(sj6)*(x371)))+(((r22)*(sj5)*(x371)))+(((-1.00000000000000)*(cj6)*(r21)*(x372))));
evalcond[1]=((((r20)*(sj6)*(x371)))+(cj3)+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x372)))+(((cj5)*(r21)*(sj6)*(x372)))+(((r22)*(sj5)*(x372)))+(((cj6)*(r21)*(x371))));
evalcond[2]=((((-1.00000000000000)*(r00)*(sj6)*(x372)))+(((-1.00000000000000)*(cj6)*(r01)*(x372)))+(((r02)*(sj5)*(x371)))+(((cj5)*(r01)*(sj6)*(x371)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x371))));
evalcond[3]=((1.00000000000000)+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x371)))+(((r12)*(sj5)*(x371)))+(((cj5)*(r11)*(sj6)*(x371)))+(((-1.00000000000000)*(r10)*(sj6)*(x372)))+(((-1.00000000000000)*(cj6)*(r11)*(x372))));
evalcond[4]=((sj3)+(((r02)*(sj5)*(x372)))+(((r00)*(sj6)*(x371)))+(((cj5)*(r01)*(sj6)*(x372)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x372)))+(((cj6)*(r01)*(x371))));
evalcond[5]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x372)))+(((r10)*(sj6)*(x371)))+(((r12)*(sj5)*(x372)))+(((cj5)*(r11)*(sj6)*(x372)))+(((cj6)*(r11)*(x371))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x373=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x373)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(IKcos(j3))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj2)*(x373)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst66;
IKReal x374=(cj6)*(cj6);
IKReal x375=(cj5)*(cj5);
IKReal x376=(r01)*(r01);
IKReal x377=(r00)*(r00);
IKReal x378=(sj6)*(sj6);
gconst66=IKsign(((((-2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)*(x375)))+((((r02)*(r02))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(r01)*(r02)*(sj5)*(sj6)))+(((x377)*(x378)))+(((x374)*(x376)))+(((2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)))+(((x375)*(x376)*(x378)))+(((x374)*(x375)*(x377)))+(((-2.00000000000000)*(cj5)*(cj6)*(r00)*(r02)*(sj5)))));
IKReal x379=(cj6)*(cj6);
IKReal x380=(cj5)*(cj5);
IKReal x381=(r01)*(r01);
IKReal x382=(r00)*(r00);
IKReal x383=(sj6)*(sj6);
dummyeval[0]=(((((r02)*(r02))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(r01)*(r02)*(sj5)*(sj6)))+(((-2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)*(x380)))+(((x382)*(x383)))+(((x379)*(x381)))+(((x380)*(x381)*(x383)))+(((x379)*(x380)*(x382)))+(((2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)))+(((-2.00000000000000)*(cj5)*(cj6)*(r00)*(r02)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst66)*(((((-1.00000000000000)*(cj6)*(r01)*(sj3)))+(((-1.00000000000000)*(r00)*(sj3)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst66)*(((((-1.00000000000000)*(cj5)*(r01)*(sj3)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj3)))+(((-1.00000000000000)*(r02)*(sj3)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst66)*(((((-1.00000000000000)*(cj6)*(r01)*(sj3)))+(((-1.00000000000000)*(r00)*(sj3)*(sj6)))))), ((gconst66)*(((((-1.00000000000000)*(cj5)*(r01)*(sj3)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj3)))+(((-1.00000000000000)*(r02)*(sj3)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x384=IKsin(j4);
IKReal x385=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj2)))+(((cj5)*(r21)*(sj6)*(x384)))+(((-1.00000000000000)*(r20)*(sj6)*(x385)))+(((-1.00000000000000)*(cj6)*(r21)*(x385)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x384)))+(((r22)*(sj5)*(x384))));
evalcond[1]=((((cj6)*(r21)*(x384)))+(((cj5)*(r21)*(sj6)*(x385)))+(((r20)*(sj6)*(x384)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x385)))+(((r22)*(sj5)*(x385)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x384)))+(((-1.00000000000000)*(cj6)*(r01)*(x385)))+(((cj5)*(r01)*(sj6)*(x384)))+(((-1.00000000000000)*(r00)*(sj6)*(x385)))+(((r02)*(sj5)*(x384))));
evalcond[3]=((((cj5)*(r11)*(sj6)*(x384)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x384)))+(((-1.00000000000000)*(cj6)*(r11)*(x385)))+(((-1.00000000000000)*(r10)*(sj6)*(x385)))+(((r12)*(sj5)*(x384)))+(((-1.00000000000000)*(sj2))));
evalcond[4]=((((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x385)))+(sj3)+(((cj5)*(r01)*(sj6)*(x385)))+(((r00)*(sj6)*(x384)))+(((cj6)*(r01)*(x384)))+(((r02)*(sj5)*(x385))));
evalcond[5]=((((cj5)*(r11)*(sj6)*(x385)))+(((cj2)*(cj3)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x385)))+(((cj6)*(r11)*(x384)))+(((r12)*(sj5)*(x385)))+(((r10)*(sj6)*(x384))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x386=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))+(((sj2)*(x386))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(IKcos(j3))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((-1.00000000000000)*(cj2)*(x386)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst66;
IKReal x387=(cj6)*(cj6);
IKReal x388=(cj5)*(cj5);
IKReal x389=(r01)*(r01);
IKReal x390=(r00)*(r00);
IKReal x391=(sj6)*(sj6);
gconst66=IKsign(((((x387)*(x389)))+(((x387)*(x388)*(x390)))+((((r02)*(r02))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(r01)*(r02)*(sj5)*(sj6)))+(((-2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)*(x388)))+(((x390)*(x391)))+(((2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)))+(((x388)*(x389)*(x391)))+(((-2.00000000000000)*(cj5)*(cj6)*(r00)*(r02)*(sj5)))));
IKReal x392=(cj6)*(cj6);
IKReal x393=(cj5)*(cj5);
IKReal x394=(r01)*(r01);
IKReal x395=(r00)*(r00);
IKReal x396=(sj6)*(sj6);
dummyeval[0]=((((x395)*(x396)))+((((r02)*(r02))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(r01)*(r02)*(sj5)*(sj6)))+(((x393)*(x394)*(x396)))+(((x392)*(x393)*(x395)))+(((-2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)*(x393)))+(((2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)))+(((x392)*(x394)))+(((-2.00000000000000)*(cj5)*(cj6)*(r00)*(r02)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst66)*(((((-1.00000000000000)*(cj6)*(r01)*(sj3)))+(((-1.00000000000000)*(r00)*(sj3)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst66)*(((((-1.00000000000000)*(cj5)*(r01)*(sj3)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj3)))+(((-1.00000000000000)*(r02)*(sj3)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst66)*(((((-1.00000000000000)*(cj6)*(r01)*(sj3)))+(((-1.00000000000000)*(r00)*(sj3)*(sj6)))))), ((gconst66)*(((((-1.00000000000000)*(cj5)*(r01)*(sj3)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj3)))+(((-1.00000000000000)*(r02)*(sj3)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x397=IKsin(j4);
IKReal x398=IKcos(j4);
evalcond[0]=((((cj5)*(r21)*(sj6)*(x397)))+(((-1.00000000000000)*(cj6)*(r21)*(x398)))+(((-1.00000000000000)*(r20)*(sj6)*(x398)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x397)))+(((r22)*(sj5)*(x397))));
evalcond[1]=((((cj5)*(r21)*(sj6)*(x398)))+(((r20)*(sj6)*(x397)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x398)))+(((r22)*(sj5)*(x398)))+(((cj6)*(r21)*(x397)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((((-1.00000000000000)*(r00)*(sj6)*(x398)))+(((cj5)*(r01)*(sj6)*(x397)))+(((r02)*(sj5)*(x397)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x397)))+(((-1.00000000000000)*(cj6)*(r01)*(x398))));
evalcond[3]=((((-1.00000000000000)*(cj6)*(r11)*(x398)))+(((cj5)*(r11)*(sj6)*(x397)))+(((r12)*(sj5)*(x397)))+(((-1.00000000000000)*(r10)*(sj6)*(x398)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x397)))+(((-1.00000000000000)*(sj2))));
evalcond[4]=((sj3)+(((cj5)*(r01)*(sj6)*(x398)))+(((r02)*(sj5)*(x398)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x398)))+(((cj6)*(r01)*(x397)))+(((r00)*(sj6)*(x397))));
evalcond[5]=((((cj2)*(cj3)))+(((r10)*(sj6)*(x397)))+(((cj5)*(r11)*(sj6)*(x398)))+(((r12)*(sj5)*(x398)))+(((cj6)*(r11)*(x397)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x398))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst65)*(((((-1.00000000000000)*(cj2)*(cj6)*(r01)))+(((-1.00000000000000)*(cj2)*(r00)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst65)*(((((-1.00000000000000)*(cj2)*(r02)*(sj5)))+(((cj2)*(cj5)*(cj6)*(r00)))+(((-1.00000000000000)*(cj2)*(cj5)*(r01)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst65)*(((((-1.00000000000000)*(cj2)*(cj6)*(r01)))+(((-1.00000000000000)*(cj2)*(r00)*(sj6)))))), ((gconst65)*(((((-1.00000000000000)*(cj2)*(r02)*(sj5)))+(((cj2)*(cj5)*(cj6)*(r00)))+(((-1.00000000000000)*(cj2)*(cj5)*(r01)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[3];
IKReal x399=IKsin(j4);
IKReal x400=IKcos(j4);
evalcond[0]=((((cj5)*(r21)*(sj6)*(x399)))+(((-1.00000000000000)*(cj6)*(r21)*(x400)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x399)))+(((r22)*(sj5)*(x399)))+(((-1.00000000000000)*(r20)*(sj6)*(x400))));
evalcond[1]=((((-1.00000000000000)*(cj6)*(r01)*(x400)))+(((cj5)*(r01)*(sj6)*(x399)))+(((r02)*(sj5)*(x399)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x399)))+(((-1.00000000000000)*(r00)*(sj6)*(x400))));
evalcond[2]=((((cj5)*(r11)*(sj6)*(x399)))+(((r12)*(sj5)*(x399)))+(((-1.00000000000000)*(cj6)*(r11)*(x400)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x399)))+(((-1.00000000000000)*(r10)*(sj6)*(x400)))+(((-1.00000000000000)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-1.00000000000000)*(cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(sj6)))+(((-1.00000000000000)*(cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(cj6)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(sj6)))+(((-1.00000000000000)*(cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(cj6)*(r00)))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.00000000000000)*(cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(sj6)))+(((-1.00000000000000)*(cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(cj6)*(r00)))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x401=IKsin(j3);
IKReal x402=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x401)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(x402)+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj2)*(x401)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((-1.00000000000000)*(sj2)*(x402)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(x401)+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj2)*(x402)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j1)), 6.28318530717959)));
evalcond[1]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  )
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((-0.250000000000000)*(r10)*(sj6)))+(((-195.000000000000)*(cj6)*(r10)*(sj5)))+(((-0.250000000000000)*(cj6)*(r11)))+(((-195.000000000000)*(cj5)*(r12)))+(((500.000000000000)*(py)))+(((195.000000000000)*(r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((195.000000000000)*(cj5)*(r22)))+(((0.250000000000000)*(r20)*(sj6)))+(((-195.000000000000)*(r21)*(sj5)*(sj6)))+(((-500.000000000000)*(pz)))+(((195.000000000000)*(cj6)*(r20)*(sj5)))+(((0.250000000000000)*(cj6)*(r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.250000000000000)*(r10)*(sj6)))+(((-195.000000000000)*(cj6)*(r10)*(sj5)))+(((-0.250000000000000)*(cj6)*(r11)))+(((-195.000000000000)*(cj5)*(r12)))+(((500.000000000000)*(py)))+(((195.000000000000)*(r11)*(sj5)*(sj6)))))+IKsqr(((((195.000000000000)*(cj5)*(r22)))+(((0.250000000000000)*(r20)*(sj6)))+(((-195.000000000000)*(r21)*(sj5)*(sj6)))+(((-500.000000000000)*(pz)))+(((195.000000000000)*(cj6)*(r20)*(sj5)))+(((0.250000000000000)*(cj6)*(r21)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-0.250000000000000)*(r10)*(sj6)))+(((-195.000000000000)*(cj6)*(r10)*(sj5)))+(((-0.250000000000000)*(cj6)*(r11)))+(((-195.000000000000)*(cj5)*(r12)))+(((500.000000000000)*(py)))+(((195.000000000000)*(r11)*(sj5)*(sj6)))), ((((195.000000000000)*(cj5)*(r22)))+(((0.250000000000000)*(r20)*(sj6)))+(((-195.000000000000)*(r21)*(sj5)*(sj6)))+(((-500.000000000000)*(pz)))+(((195.000000000000)*(cj6)*(r20)*(sj5)))+(((0.250000000000000)*(cj6)*(r21)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[2];
evalcond[0]=((((-0.00200000000000000)*(IKcos(j2))))+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.00200000000000000)*(IKsin(j2))))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst75;
IKReal x403=(cj6)*(cj6);
IKReal x404=(sj6)*(sj6);
gconst75=IKsign(((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((cj6)*(r01)*(r12)*(sj5)))+(((cj5)*(r00)*(r11)*(x404)))+(((cj5)*(r00)*(r11)*(x403)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x403)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x404)))+(((r00)*(r12)*(sj5)*(sj6)))));
IKReal x405=(cj6)*(cj6);
IKReal x406=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((cj6)*(r01)*(r12)*(sj5)))+(((cj5)*(r00)*(r11)*(x405)))+(((cj5)*(r00)*(r11)*(x406)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x405)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x406)))+(((r00)*(r12)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(IKsin(j3))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKcos(j3))))+(((cj5)*(r02))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst78;
IKReal x407=(cj6)*(cj6);
IKReal x408=(sj6)*(sj6);
gconst78=IKsign(((((-1.00000000000000)*(r10)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x408)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x407)))+(((r12)*(r20)*(sj5)*(sj6)))+(((cj5)*(r11)*(r20)*(x408)))+(((cj5)*(r11)*(r20)*(x407)))+(((cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj6)*(r11)*(r22)*(sj5)))));
IKReal x409=(cj6)*(cj6);
IKReal x410=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(r10)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x409)))+(((cj5)*(r11)*(r20)*(x410)))+(((r12)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x410)))+(((cj5)*(r11)*(r20)*(x409)))+(((cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj6)*(r11)*(r22)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst78)*(((((cj3)*(r12)*(sj5)))+(((cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst78)*(((((-1.00000000000000)*(cj3)*(cj6)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst78)*(((((cj3)*(r12)*(sj5)))+(((cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r10)))))), ((gconst78)*(((((-1.00000000000000)*(cj3)*(cj6)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x411=IKsin(j4);
IKReal x412=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(r20)*(sj6)*(x412)))+(((-1.00000000000000)*(cj6)*(r21)*(x412)))+(((cj5)*(r21)*(sj6)*(x411)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x411)))+(((r22)*(sj5)*(x411))));
evalcond[1]=((((-1.00000000000000)*(cj3)))+(((r20)*(sj6)*(x411)))+(((cj5)*(r21)*(sj6)*(x412)))+(((cj6)*(r21)*(x411)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x412)))+(((r22)*(sj5)*(x412))));
evalcond[2]=((((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x411)))+(((cj5)*(r01)*(sj6)*(x411)))+(((-1.00000000000000)*(cj6)*(r01)*(x412)))+(((r02)*(sj5)*(x411)))+(((-1.00000000000000)*(r00)*(sj6)*(x412))));
evalcond[3]=((1.00000000000000)+(((cj5)*(r11)*(sj6)*(x411)))+(((-1.00000000000000)*(cj6)*(r11)*(x412)))+(((r12)*(sj5)*(x411)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x411)))+(((-1.00000000000000)*(r10)*(sj6)*(x412))));
evalcond[4]=((((r00)*(sj6)*(x411)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x412)))+(((cj5)*(r01)*(sj6)*(x412)))+(((r02)*(sj5)*(x412)))+(((cj6)*(r01)*(x411)))+(((-1.00000000000000)*(sj3))));
evalcond[5]=((((r10)*(sj6)*(x411)))+(((cj6)*(r11)*(x411)))+(((cj5)*(r11)*(sj6)*(x412)))+(((r12)*(sj5)*(x412)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x412))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(((-1.00000000000000)*(IKsin(j3))))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKcos(j3))))+(((cj5)*(r02))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst80;
IKReal x413=(cj6)*(cj6);
IKReal x414=(sj6)*(sj6);
gconst80=IKsign(((((cj6)*(r11)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x413)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x414)))+(((-1.00000000000000)*(r12)*(r20)*(sj5)*(sj6)))+(((r10)*(r22)*(sj5)*(sj6)))+(((cj5)*(r10)*(r21)*(x413)))+(((cj5)*(r10)*(r21)*(x414)))+(((-1.00000000000000)*(cj6)*(r12)*(r21)*(sj5)))));
IKReal x415=(cj6)*(cj6);
IKReal x416=(sj6)*(sj6);
dummyeval[0]=((((cj6)*(r11)*(r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x416)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x415)))+(((-1.00000000000000)*(r12)*(r20)*(sj5)*(sj6)))+(((r10)*(r22)*(sj5)*(sj6)))+(((cj5)*(r10)*(r21)*(x416)))+(((cj5)*(r10)*(r21)*(x415)))+(((-1.00000000000000)*(cj6)*(r12)*(r21)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst80)*(((((cj3)*(r12)*(sj5)))+(((cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst80)*(((((-1.00000000000000)*(cj3)*(cj6)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst80)*(((((cj3)*(r12)*(sj5)))+(((cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r10)))))), ((gconst80)*(((((-1.00000000000000)*(cj3)*(cj6)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x417=IKsin(j4);
IKReal x418=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(r20)*(sj6)*(x418)))+(((-1.00000000000000)*(cj6)*(r21)*(x418)))+(((cj5)*(r21)*(sj6)*(x417)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x417)))+(((r22)*(sj5)*(x417))));
evalcond[1]=((cj3)+(((r20)*(sj6)*(x417)))+(((cj5)*(r21)*(sj6)*(x418)))+(((cj6)*(r21)*(x417)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x418)))+(((r22)*(sj5)*(x418))));
evalcond[2]=((((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x417)))+(((cj5)*(r01)*(sj6)*(x417)))+(((-1.00000000000000)*(cj6)*(r01)*(x418)))+(((r02)*(sj5)*(x417)))+(((-1.00000000000000)*(r00)*(sj6)*(x418))));
evalcond[3]=((-1.00000000000000)+(((cj5)*(r11)*(sj6)*(x417)))+(((-1.00000000000000)*(cj6)*(r11)*(x418)))+(((r12)*(sj5)*(x417)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x417)))+(((-1.00000000000000)*(r10)*(sj6)*(x418))));
evalcond[4]=((((r00)*(sj6)*(x417)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x418)))+(((cj5)*(r01)*(sj6)*(x418)))+(((r02)*(sj5)*(x418)))+(((cj6)*(r01)*(x417)))+(((-1.00000000000000)*(sj3))));
evalcond[5]=((((r10)*(sj6)*(x417)))+(((cj6)*(r11)*(x417)))+(((cj5)*(r11)*(sj6)*(x418)))+(((r12)*(sj5)*(x418)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x418))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKcos(j3))))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(IKsin(j3))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst82;
IKReal x419=(r20)*(r20);
IKReal x420=(cj5)*(cj5);
IKReal x421=(sj6)*(sj6);
IKReal x422=(cj6)*(cj6);
IKReal x423=(r21)*(r21);
gconst82=IKsign(((((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x420)))+(((x419)*(x421)))+(((x420)*(x421)*(x423)))+(((x422)*(x423)))+(((x419)*(x420)*(x422)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))));
IKReal x424=(r20)*(r20);
IKReal x425=(cj5)*(cj5);
IKReal x426=(sj6)*(sj6);
IKReal x427=(cj6)*(cj6);
IKReal x428=(r21)*(r21);
dummyeval[0]=((((x427)*(x428)))+(((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x424)*(x426)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x425)))+(((x425)*(x426)*(x428)))+(((x424)*(x425)*(x427)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst82)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst82)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst82)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)))))), ((gconst82)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x429=IKsin(j4);
IKReal x430=IKcos(j4);
evalcond[0]=((-1.00000000000000)+(((-1.00000000000000)*(cj6)*(r21)*(x430)))+(((cj5)*(r21)*(sj6)*(x429)))+(((-1.00000000000000)*(r20)*(sj6)*(x430)))+(((r22)*(sj5)*(x429)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x429))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x430)))+(((cj6)*(r21)*(x429)))+(((r22)*(sj5)*(x430)))+(((r20)*(sj6)*(x429)))+(((cj5)*(r21)*(sj6)*(x430))));
evalcond[2]=((((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x429)))+(((r02)*(sj5)*(x429)))+(((cj5)*(r01)*(sj6)*(x429)))+(((-1.00000000000000)*(r00)*(sj6)*(x430)))+(((-1.00000000000000)*(cj6)*(r01)*(x430))));
evalcond[3]=((((-1.00000000000000)*(r10)*(sj6)*(x430)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x429)))+(((cj5)*(r11)*(sj6)*(x429)))+(((r12)*(sj5)*(x429)))+(((-1.00000000000000)*(cj6)*(r11)*(x430))));
evalcond[4]=((((cj5)*(r01)*(sj6)*(x430)))+(((cj6)*(r01)*(x429)))+(((r02)*(sj5)*(x430)))+(((r00)*(sj6)*(x429)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x430)))+(((-1.00000000000000)*(sj3))));
evalcond[5]=((((cj6)*(r11)*(x429)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x430)))+(((cj5)*(r11)*(sj6)*(x430)))+(((r10)*(sj6)*(x429)))+(((r12)*(sj5)*(x430)))+(((-1.00000000000000)*(cj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKcos(j3))))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(IKsin(j3))))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst84;
IKReal x431=(cj6)*(cj6);
IKReal x432=(sj6)*(sj6);
gconst84=IKsign(((((-1.00000000000000)*(r10)*(r22)*(sj5)*(sj6)))+(((r12)*(r20)*(sj5)*(sj6)))+(((cj5)*(r11)*(r20)*(x431)))+(((cj5)*(r11)*(r20)*(x432)))+(((cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x432)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x431)))+(((-1.00000000000000)*(cj6)*(r11)*(r22)*(sj5)))));
IKReal x433=(cj6)*(cj6);
IKReal x434=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(r10)*(r22)*(sj5)*(sj6)))+(((r12)*(r20)*(sj5)*(sj6)))+(((cj5)*(r11)*(r20)*(x433)))+(((cj5)*(r11)*(r20)*(x434)))+(((cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x433)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x434)))+(((-1.00000000000000)*(cj6)*(r11)*(r22)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst84)*(((((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r20)))+(((cj3)*(r22)*(sj5)))+(((cj3)*(cj5)*(r21)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst84)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst84)*(((((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r20)))+(((cj3)*(r22)*(sj5)))+(((cj3)*(cj5)*(r21)*(sj6)))))), ((gconst84)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x435=IKsin(j4);
IKReal x436=IKcos(j4);
evalcond[0]=((1.00000000000000)+(((-1.00000000000000)*(cj6)*(r21)*(x436)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x435)))+(((-1.00000000000000)*(r20)*(sj6)*(x436)))+(((r22)*(sj5)*(x435)))+(((cj5)*(r21)*(sj6)*(x435))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x436)))+(((cj6)*(r21)*(x435)))+(((r22)*(sj5)*(x436)))+(((r20)*(sj6)*(x435)))+(((cj5)*(r21)*(sj6)*(x436))));
evalcond[2]=((((cj5)*(r01)*(sj6)*(x435)))+(((r02)*(sj5)*(x435)))+(((-1.00000000000000)*(r00)*(sj6)*(x436)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x435)))+(((-1.00000000000000)*(cj6)*(r01)*(x436))));
evalcond[3]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x435)))+(((-1.00000000000000)*(r10)*(sj6)*(x436)))+(((cj5)*(r11)*(sj6)*(x435)))+(((r12)*(sj5)*(x435)))+(((-1.00000000000000)*(cj6)*(r11)*(x436))));
evalcond[4]=((((cj6)*(r01)*(x435)))+(((cj5)*(r01)*(sj6)*(x436)))+(((r02)*(sj5)*(x436)))+(((r00)*(sj6)*(x435)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x436)))+(((-1.00000000000000)*(sj3))));
evalcond[5]=((((r10)*(sj6)*(x435)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x436)))+(cj3)+(((cj5)*(r11)*(sj6)*(x436)))+(((r12)*(sj5)*(x436)))+(((cj6)*(r11)*(x435))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x437=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x437)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKcos(j3))))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((cj2)*(x437)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst76;
IKReal x438=(cj6)*(cj6);
IKReal x439=(sj6)*(sj6);
gconst76=IKsign(((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x438)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x439)))+(((cj5)*(r00)*(r11)*(x439)))+(((cj5)*(r00)*(r11)*(x438)))+(((r00)*(r12)*(sj5)*(sj6)))));
IKReal x440=(cj6)*(cj6);
IKReal x441=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((cj5)*(r00)*(r11)*(x440)))+(((cj5)*(r00)*(r11)*(x441)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x441)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x440)))+(((r00)*(r12)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst76)*(((((-1.00000000000000)*(cj6)*(r01)*(sj2)))+(((-1.00000000000000)*(r00)*(sj2)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst76)*(((((-1.00000000000000)*(cj5)*(r01)*(sj2)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj2)))+(((-1.00000000000000)*(r02)*(sj2)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst76)*(((((-1.00000000000000)*(cj6)*(r01)*(sj2)))+(((-1.00000000000000)*(r00)*(sj2)*(sj6)))))), ((gconst76)*(((((-1.00000000000000)*(cj5)*(r01)*(sj2)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj2)))+(((-1.00000000000000)*(r02)*(sj2)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x442=IKsin(j4);
IKReal x443=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj6)*(r21)*(x443)))+(((cj5)*(r21)*(sj6)*(x442)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x442)))+(((-1.00000000000000)*(r20)*(sj6)*(x443)))+(((-1.00000000000000)*(cj2)))+(((r22)*(sj5)*(x442))));
evalcond[1]=((((cj5)*(r21)*(sj6)*(x443)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x443)))+(((cj6)*(r21)*(x442)))+(((r22)*(sj5)*(x443)))+(((r20)*(sj6)*(x442)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((((cj5)*(r01)*(sj6)*(x442)))+(((-1.00000000000000)*(cj6)*(r01)*(x443)))+(((r02)*(sj5)*(x442)))+(((-1.00000000000000)*(r00)*(sj6)*(x443)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x442))));
evalcond[3]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x442)))+(sj2)+(((cj5)*(r11)*(sj6)*(x442)))+(((-1.00000000000000)*(r10)*(sj6)*(x443)))+(((r12)*(sj5)*(x442)))+(((-1.00000000000000)*(cj6)*(r11)*(x443))));
evalcond[4]=((((cj5)*(r01)*(sj6)*(x443)))+(((cj6)*(r01)*(x442)))+(((r02)*(sj5)*(x443)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x443)))+(((-1.00000000000000)*(sj3)))+(((r00)*(sj6)*(x442))));
evalcond[5]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x443)))+(((r10)*(sj6)*(x442)))+(((-1.00000000000000)*(cj2)*(cj3)))+(((cj5)*(r11)*(sj6)*(x443)))+(((r12)*(sj5)*(x443)))+(((cj6)*(r11)*(x442))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x444=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x444)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKcos(j3))))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((cj2)*(x444)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst76;
IKReal x445=(cj6)*(cj6);
IKReal x446=(sj6)*(sj6);
gconst76=IKsign(((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((cj5)*(r00)*(r11)*(x446)))+(((cj5)*(r00)*(r11)*(x445)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x445)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x446)))+(((r00)*(r12)*(sj5)*(sj6)))));
IKReal x447=(cj6)*(cj6);
IKReal x448=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((cj5)*(r00)*(r11)*(x448)))+(((cj5)*(r00)*(r11)*(x447)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x447)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x448)))+(((r00)*(r12)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst76)*(((((-1.00000000000000)*(cj6)*(r01)*(sj2)))+(((-1.00000000000000)*(r00)*(sj2)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst76)*(((((-1.00000000000000)*(cj5)*(r01)*(sj2)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj2)))+(((-1.00000000000000)*(r02)*(sj2)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst76)*(((((-1.00000000000000)*(cj6)*(r01)*(sj2)))+(((-1.00000000000000)*(r00)*(sj2)*(sj6)))))), ((gconst76)*(((((-1.00000000000000)*(cj5)*(r01)*(sj2)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj2)))+(((-1.00000000000000)*(r02)*(sj2)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x449=IKsin(j4);
IKReal x450=IKcos(j4);
evalcond[0]=((((cj5)*(r21)*(sj6)*(x449)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x449)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj6)*(r21)*(x450)))+(((r22)*(sj5)*(x449)))+(((-1.00000000000000)*(r20)*(sj6)*(x450))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x450)))+(((cj5)*(r21)*(sj6)*(x450)))+(((cj6)*(r21)*(x449)))+(((r22)*(sj5)*(x450)))+(((r20)*(sj6)*(x449)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((((cj5)*(r01)*(sj6)*(x449)))+(((r02)*(sj5)*(x449)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x449)))+(((-1.00000000000000)*(cj6)*(r01)*(x450)))+(((-1.00000000000000)*(r00)*(sj6)*(x450))));
evalcond[3]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x449)))+(((-1.00000000000000)*(cj6)*(r11)*(x450)))+(sj2)+(((cj5)*(r11)*(sj6)*(x449)))+(((r12)*(sj5)*(x449)))+(((-1.00000000000000)*(r10)*(sj6)*(x450))));
evalcond[4]=((((cj6)*(r01)*(x449)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x450)))+(((-1.00000000000000)*(sj3)))+(((r02)*(sj5)*(x450)))+(((cj5)*(r01)*(sj6)*(x450)))+(((r00)*(sj6)*(x449))));
evalcond[5]=((((r12)*(sj5)*(x450)))+(((r10)*(sj6)*(x449)))+(((-1.00000000000000)*(cj2)*(cj3)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x450)))+(((cj5)*(r11)*(sj6)*(x450)))+(((cj6)*(r11)*(x449))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst75)*(((((-1.00000000000000)*(cj6)*(r01)*(sj2)))+(((-1.00000000000000)*(r00)*(sj2)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst75)*(((((-1.00000000000000)*(cj5)*(r01)*(sj2)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj2)))+(((-1.00000000000000)*(r02)*(sj2)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst75)*(((((-1.00000000000000)*(cj6)*(r01)*(sj2)))+(((-1.00000000000000)*(r00)*(sj2)*(sj6)))))), ((gconst75)*(((((-1.00000000000000)*(cj5)*(r01)*(sj2)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj2)))+(((-1.00000000000000)*(r02)*(sj2)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[3];
IKReal x451=IKsin(j4);
IKReal x452=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x451)))+(((cj5)*(r21)*(sj6)*(x451)))+(((r22)*(sj5)*(x451)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj6)*(r21)*(x452)))+(((-1.00000000000000)*(r20)*(sj6)*(x452))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x451)))+(((-1.00000000000000)*(cj6)*(r01)*(x452)))+(((r02)*(sj5)*(x451)))+(((cj5)*(r01)*(sj6)*(x451)))+(((-1.00000000000000)*(r00)*(sj6)*(x452))));
evalcond[2]=((((-1.00000000000000)*(cj6)*(r11)*(x452)))+(sj2)+(((r12)*(sj5)*(x451)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x451)))+(((-1.00000000000000)*(r10)*(sj6)*(x452)))+(((cj5)*(r11)*(sj6)*(x451))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x453=IKsin(j3);
IKReal x454=IKcos(j3);
evalcond[0]=((((sj2)*(x453)))+(((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(x454)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((cj2)*(x453)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((-1.00000000000000)*(sj2)*(x454)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(x453)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((-1.00000000000000)*(cj2)*(x454)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((-195.000000000000)*(r11)*(sj5)*(sj6)))+(((195.000000000000)*(cj6)*(r10)*(sj5)))+(((200.000000000000)*(cj1)))+(((195.000000000000)*(cj5)*(r12)))+(((-500.000000000000)*(py)))+(((0.250000000000000)*(cj6)*(r11)))+(((0.250000000000000)*(r10)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((195.000000000000)*(cj5)*(r22)))+(((0.250000000000000)*(r20)*(sj6)))+(((-195.000000000000)*(r21)*(sj5)*(sj6)))+(((-500.000000000000)*(pz)))+(((195.000000000000)*(cj6)*(r20)*(sj5)))+(((0.250000000000000)*(cj6)*(r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((-195.000000000000)*(r11)*(sj5)*(sj6)))+(((195.000000000000)*(cj6)*(r10)*(sj5)))+(((200.000000000000)*(cj1)))+(((195.000000000000)*(cj5)*(r12)))+(((-500.000000000000)*(py)))+(((0.250000000000000)*(cj6)*(r11)))+(((0.250000000000000)*(r10)*(sj6)))))))+IKsqr(((((195.000000000000)*(cj5)*(r22)))+(((0.250000000000000)*(r20)*(sj6)))+(((-195.000000000000)*(r21)*(sj5)*(sj6)))+(((-500.000000000000)*(pz)))+(((195.000000000000)*(cj6)*(r20)*(sj5)))+(((0.250000000000000)*(cj6)*(r21)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((-195.000000000000)*(r11)*(sj5)*(sj6)))+(((195.000000000000)*(cj6)*(r10)*(sj5)))+(((200.000000000000)*(cj1)))+(((195.000000000000)*(cj5)*(r12)))+(((-500.000000000000)*(py)))+(((0.250000000000000)*(cj6)*(r11)))+(((0.250000000000000)*(r10)*(sj6)))))), ((((195.000000000000)*(cj5)*(r22)))+(((0.250000000000000)*(r20)*(sj6)))+(((-195.000000000000)*(r21)*(sj5)*(sj6)))+(((-500.000000000000)*(pz)))+(((195.000000000000)*(cj6)*(r20)*(sj5)))+(((0.250000000000000)*(cj6)*(r21)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[3];
IKReal x455=IKsin(j2);
evalcond[0]=((((-0.00200000000000000)*(IKcos(j2))))+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.400000000000000)*(sj1)))+(((-0.00200000000000000)*(cj1)*(x455)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((0.400000000000000)*(cj1)))+(((-0.00200000000000000)*(sj1)*(x455)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst0;
IKReal x456=(cj6)*(cj6);
IKReal x457=(sj6)*(sj6);
gconst0=IKsign(((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj5)*(r01)*(r20)*(x456)))+(((cj5)*(r01)*(r20)*(x457)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x457)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x456)))));
IKReal x458=(cj6)*(cj6);
IKReal x459=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj5)*(r01)*(r20)*(x458)))+(((cj5)*(r01)*(r20)*(x459)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x459)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x458))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[2];
IKReal x460=(sj1)*(sj1);
IKReal x461=(cj1)*(cj1);
dummyeval[0]=((((cj2)*(x460)))+(((cj2)*(x461))));
dummyeval[1]=((x461)+(x460));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=sj2;
dummyeval[1]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.400000000000000)*(sj1)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((0.400000000000000)*(cj1)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign((((sj1)*(sj1))+((cj1)*(cj1))));
dummyeval[0]=(((sj1)*(sj1))+((cj1)*(cj1)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst6;
IKReal x462=(r20)*(r20);
IKReal x463=(cj5)*(cj5);
IKReal x464=(sj6)*(sj6);
IKReal x465=(cj6)*(cj6);
IKReal x466=(r21)*(r21);
gconst6=IKsign(((((x462)*(x463)*(x465)))+(((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x463)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x465)*(x466)))+(((x463)*(x464)*(x466)))+(((x462)*(x464)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))));
IKReal x467=(r20)*(r20);
IKReal x468=(cj5)*(cj5);
IKReal x469=(sj6)*(sj6);
IKReal x470=(cj6)*(cj6);
IKReal x471=(r21)*(r21);
dummyeval[0]=((((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x468)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x470)*(x471)))+(((x468)*(x469)*(x471)))+(((x467)*(x469)))+(((x467)*(x468)*(x470)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst6)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst6)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)))))), ((gconst6)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x472=IKsin(j4);
IKReal x473=IKcos(j4);
evalcond[0]=((-1.00000000000000)+(((cj5)*(r21)*(sj6)*(x472)))+(((r22)*(sj5)*(x472)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x472)))+(((-1.00000000000000)*(r20)*(sj6)*(x473)))+(((-1.00000000000000)*(cj6)*(r21)*(x473))));
evalcond[1]=((((cj6)*(r21)*(x472)))+(((r20)*(sj6)*(x472)))+(((cj5)*(r21)*(sj6)*(x473)))+(((r22)*(sj5)*(x473)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x473))));
evalcond[2]=((((r02)*(sj5)*(x472)))+(((-1.00000000000000)*(r00)*(sj6)*(x473)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x472)))+(((-1.00000000000000)*(cj6)*(r01)*(x473)))+(((cj5)*(r01)*(sj6)*(x472))));
evalcond[3]=((((r12)*(sj5)*(x472)))+(((-1.00000000000000)*(cj6)*(r11)*(x473)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x472)))+(((cj5)*(r11)*(sj6)*(x472)))+(((-1.00000000000000)*(r10)*(sj6)*(x473))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst7;
gconst7=IKsign((((sj1)*(sj1))+((cj1)*(cj1))));
dummyeval[0]=(((sj1)*(sj1))+((cj1)*(cj1)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst7)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst7)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))), ((gconst7)*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x474=IKcos(j3);
IKReal x475=IKsin(j3);
IKReal x476=((cj1)*(x474));
IKReal x477=((sj1)*(x475));
IKReal x478=((sj1)*(x474));
IKReal x479=((cj1)*(x475));
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(x479)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(x478)+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(x477)))+(((-1.00000000000000)*(x476)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(x476)+(x477)+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))));
evalcond[3]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(x479)))+(x478)+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst5)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst5)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))), ((gconst5)*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
IKReal x480=IKcos(j3);
IKReal x481=IKsin(j3);
evalcond[0]=((((-1.00000000000000)*(cj1)*(x481)))+(((cj6)*(r00)*(sj5)))+(((sj1)*(x480)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((-1.00000000000000)*(cj1)*(x480)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(sj1)*(x481)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst8;
IKReal x482=(r20)*(r20);
IKReal x483=(cj5)*(cj5);
IKReal x484=(sj6)*(sj6);
IKReal x485=(cj6)*(cj6);
IKReal x486=(r21)*(r21);
gconst8=IKsign(((((x485)*(x486)))+(((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x482)*(x483)*(x485)))+(((x483)*(x484)*(x486)))+(((x482)*(x484)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x483)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))));
IKReal x487=(r20)*(r20);
IKReal x488=(cj5)*(cj5);
IKReal x489=(sj6)*(sj6);
IKReal x490=(cj6)*(cj6);
IKReal x491=(r21)*(r21);
dummyeval[0]=((((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x490)*(x491)))+(((x488)*(x489)*(x491)))+(((x487)*(x488)*(x490)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x488)))+(((x487)*(x489)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst8)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst8)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)))))), ((gconst8)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x492=IKsin(j4);
IKReal x493=IKcos(j4);
evalcond[0]=((-1.00000000000000)+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x492)))+(((cj5)*(r21)*(sj6)*(x492)))+(((r22)*(sj5)*(x492)))+(((-1.00000000000000)*(cj6)*(r21)*(x493)))+(((-1.00000000000000)*(r20)*(sj6)*(x493))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x493)))+(((cj6)*(r21)*(x492)))+(((cj5)*(r21)*(sj6)*(x493)))+(((r22)*(sj5)*(x493)))+(((r20)*(sj6)*(x492))));
evalcond[2]=((((-1.00000000000000)*(r00)*(sj6)*(x493)))+(((r02)*(sj5)*(x492)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x492)))+(((cj5)*(r01)*(sj6)*(x492)))+(((-1.00000000000000)*(cj6)*(r01)*(x493))));
evalcond[3]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x492)))+(((r12)*(sj5)*(x492)))+(((-1.00000000000000)*(r10)*(sj6)*(x493)))+(((cj5)*(r11)*(sj6)*(x492)))+(((-1.00000000000000)*(cj6)*(r11)*(x493))));
evalcond[4]=((((r02)*(sj5)*(x493)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x493)))+(((cj5)*(r01)*(sj6)*(x493)))+(((sj1)*(sj3)))+(((r00)*(sj6)*(x492)))+(((cj1)*(cj3)))+(((cj6)*(r01)*(x492))));
evalcond[5]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x493)))+(((r12)*(sj5)*(x493)))+(((-1.00000000000000)*(cj1)*(sj3)))+(((r10)*(sj6)*(x492)))+(((cj5)*(r11)*(sj6)*(x493)))+(((cj6)*(r11)*(x492)))+(((cj3)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.400000000000000)*(sj1)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((0.400000000000000)*(cj1)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst9;
gconst9=IKsign(((((-1.00000000000000)*((sj1)*(sj1))))+(((-1.00000000000000)*((cj1)*(cj1))))));
dummyeval[0]=((((-1.00000000000000)*((sj1)*(sj1))))+(((-1.00000000000000)*((cj1)*(cj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst10;
IKReal x494=(cj5)*(cj5);
IKReal x495=(r20)*(r20);
IKReal x496=(sj6)*(sj6);
IKReal x497=(cj6)*(cj6);
IKReal x498=(r21)*(r21);
gconst10=IKsign(((((-1.00000000000000)*(x495)*(x496)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((-1.00000000000000)*(x497)*(x498)))+(((-1.00000000000000)*(x494)*(x496)*(x498)))+(((-2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x494)))+(((-1.00000000000000)*(x494)*(x495)*(x497)))));
IKReal x499=(cj5)*(cj5);
IKReal x500=(r20)*(r20);
IKReal x501=(sj6)*(sj6);
IKReal x502=(cj6)*(cj6);
IKReal x503=(r21)*(r21);
dummyeval[0]=((((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((-1.00000000000000)*(x502)*(x503)))+(((-2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((-1.00000000000000)*(x499)*(x501)*(x503)))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x499)))+(((-1.00000000000000)*(x500)*(x501)))+(((-1.00000000000000)*(x499)*(x500)*(x502))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst10)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst10)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)))))), ((gconst10)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x504=IKsin(j4);
IKReal x505=IKcos(j4);
evalcond[0]=((1.00000000000000)+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x504)))+(((-1.00000000000000)*(r20)*(sj6)*(x505)))+(((-1.00000000000000)*(cj6)*(r21)*(x505)))+(((cj5)*(r21)*(sj6)*(x504)))+(((r22)*(sj5)*(x504))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x505)))+(((cj6)*(r21)*(x504)))+(((cj5)*(r21)*(sj6)*(x505)))+(((r20)*(sj6)*(x504)))+(((r22)*(sj5)*(x505))));
evalcond[2]=((((cj5)*(r01)*(sj6)*(x504)))+(((-1.00000000000000)*(cj6)*(r01)*(x505)))+(((-1.00000000000000)*(r00)*(sj6)*(x505)))+(((r02)*(sj5)*(x504)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x504))));
evalcond[3]=((((-1.00000000000000)*(r10)*(sj6)*(x505)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x504)))+(((-1.00000000000000)*(cj6)*(r11)*(x505)))+(((cj5)*(r11)*(sj6)*(x504)))+(((r12)*(sj5)*(x504))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst11;
gconst11=IKsign(((((-1.00000000000000)*((sj1)*(sj1))))+(((-1.00000000000000)*((cj1)*(cj1))))));
dummyeval[0]=((((-1.00000000000000)*((sj1)*(sj1))))+(((-1.00000000000000)*((cj1)*(cj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst11)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((-1.00000000000000)*(r01)*(sj1)*(sj5)*(sj6)))+(((cj5)*(r02)*(sj1)))+(((cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(cj5)*(r12)))+(((cj1)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r10)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst11)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))), ((gconst11)*(((((-1.00000000000000)*(r01)*(sj1)*(sj5)*(sj6)))+(((cj5)*(r02)*(sj1)))+(((cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(cj5)*(r12)))+(((cj1)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r10)*(sj5)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x506=IKsin(j3);
IKReal x507=IKcos(j3);
IKReal x508=((sj1)*(x506));
IKReal x509=((cj1)*(x507));
IKReal x510=((sj1)*(x507));
IKReal x511=((cj1)*(x506));
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(x511)+(x510)+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(x509)))+(x508)+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(x509)))+(x508)+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))));
evalcond[3]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((-1.00000000000000)*(x510)))+(((-1.00000000000000)*(x511)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst9)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((-1.00000000000000)*(r01)*(sj1)*(sj5)*(sj6)))+(((cj5)*(r02)*(sj1)))+(((cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(cj5)*(r12)))+(((cj1)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r10)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst9)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))), ((gconst9)*(((((-1.00000000000000)*(r01)*(sj1)*(sj5)*(sj6)))+(((cj5)*(r02)*(sj1)))+(((cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(cj5)*(r12)))+(((cj1)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r10)*(sj5)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
IKReal x512=IKsin(j3);
IKReal x513=IKcos(j3);
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj1)*(x512)))+(((sj1)*(x513)))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x513)))+(((sj1)*(x512)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst12;
IKReal x514=(cj5)*(cj5);
IKReal x515=(r20)*(r20);
IKReal x516=(sj6)*(sj6);
IKReal x517=(cj6)*(cj6);
IKReal x518=(r21)*(r21);
gconst12=IKsign(((((-1.00000000000000)*(x514)*(x515)*(x517)))+(((-1.00000000000000)*(x514)*(x516)*(x518)))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x514)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((-2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((-1.00000000000000)*(x517)*(x518)))+(((-1.00000000000000)*(x515)*(x516)))));
IKReal x519=(cj5)*(cj5);
IKReal x520=(r20)*(r20);
IKReal x521=(sj6)*(sj6);
IKReal x522=(cj6)*(cj6);
IKReal x523=(r21)*(r21);
dummyeval[0]=((((-1.00000000000000)*(x520)*(x521)))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x519)))+(((-1.00000000000000)*(x519)*(x521)*(x523)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((-1.00000000000000)*(x519)*(x520)*(x522)))+(((-2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((-1.00000000000000)*(x522)*(x523))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst12)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst12)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)))))), ((gconst12)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x524=IKsin(j4);
IKReal x525=IKcos(j4);
evalcond[0]=((1.00000000000000)+(((cj5)*(r21)*(sj6)*(x524)))+(((-1.00000000000000)*(cj6)*(r21)*(x525)))+(((r22)*(sj5)*(x524)))+(((-1.00000000000000)*(r20)*(sj6)*(x525)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x524))));
evalcond[1]=((((cj5)*(r21)*(sj6)*(x525)))+(((r20)*(sj6)*(x524)))+(((r22)*(sj5)*(x525)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x525)))+(((cj6)*(r21)*(x524))));
evalcond[2]=((((-1.00000000000000)*(cj6)*(r01)*(x525)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x524)))+(((r02)*(sj5)*(x524)))+(((-1.00000000000000)*(r00)*(sj6)*(x525)))+(((cj5)*(r01)*(sj6)*(x524))));
evalcond[3]=((((cj5)*(r11)*(sj6)*(x524)))+(((-1.00000000000000)*(r10)*(sj6)*(x525)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x524)))+(((r12)*(sj5)*(x524)))+(((-1.00000000000000)*(cj6)*(r11)*(x525))));
evalcond[4]=((((-1.00000000000000)*(cj1)*(cj3)))+(((r00)*(sj6)*(x524)))+(((cj6)*(r01)*(x524)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x525)))+(((sj1)*(sj3)))+(((r02)*(sj5)*(x525)))+(((cj5)*(r01)*(sj6)*(x525))));
evalcond[5]=((((cj5)*(r11)*(sj6)*(x525)))+(((cj6)*(r11)*(x524)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x525)))+(((-1.00000000000000)*(cj1)*(sj3)))+(((r12)*(sj5)*(x525)))+(((r10)*(sj6)*(x524)))+(((-1.00000000000000)*(cj3)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j1)), 6.28318530717959)));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((-0.00200000000000000)*(cj2)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[3]=((((-0.00200000000000000)*(sj2)))+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst13;
IKReal x526=(cj6)*(cj6);
IKReal x527=(sj6)*(sj6);
gconst13=IKsign(((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((cj5)*(r01)*(r20)*(x526)))+(((cj5)*(r01)*(r20)*(x527)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x527)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x526)))));
IKReal x528=(cj6)*(cj6);
IKReal x529=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((cj5)*(r01)*(r20)*(x528)))+(((cj5)*(r01)*(r20)*(x529)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x529)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x528))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(IKcos(j3))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(IKsin(j3))))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst16;
IKReal x530=(cj6)*(cj6);
IKReal x531=(sj6)*(sj6);
gconst16=IKsign(((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((cj5)*(r01)*(r20)*(x530)))+(((cj5)*(r01)*(r20)*(x531)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x530)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x531)))));
IKReal x532=(cj6)*(cj6);
IKReal x533=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((cj5)*(r01)*(r20)*(x533)))+(((cj5)*(r01)*(r20)*(x532)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x532)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x533))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst16)*(((((cj5)*(r21)*(sj3)*(sj6)))+(((r22)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((-1.00000000000000)*(r20)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst16)*(((((cj5)*(r21)*(sj3)*(sj6)))+(((r22)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj3)))))), ((gconst16)*(((((-1.00000000000000)*(r20)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj3)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x534=IKsin(j4);
IKReal x535=IKcos(j4);
evalcond[0]=((-1.00000000000000)+(((r22)*(sj5)*(x534)))+(((-1.00000000000000)*(cj6)*(r21)*(x535)))+(((-1.00000000000000)*(r20)*(sj6)*(x535)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x534)))+(((cj5)*(r21)*(sj6)*(x534))));
evalcond[1]=((((r20)*(sj6)*(x534)))+(((r22)*(sj5)*(x535)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x535)))+(((cj5)*(r21)*(sj6)*(x535)))+(((cj6)*(r21)*(x534))));
evalcond[2]=((((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x534)))+(((-1.00000000000000)*(r00)*(sj6)*(x535)))+(((r02)*(sj5)*(x534)))+(((cj5)*(r01)*(sj6)*(x534)))+(((-1.00000000000000)*(cj6)*(r01)*(x535))));
evalcond[3]=((((-1.00000000000000)*(r10)*(sj6)*(x535)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x534)))+(((r12)*(sj5)*(x534)))+(((-1.00000000000000)*(cj6)*(r11)*(x535)))+(((cj5)*(r11)*(sj6)*(x534))));
evalcond[4]=((((r00)*(sj6)*(x534)))+(sj3)+(((cj6)*(r01)*(x534)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x535)))+(((r02)*(sj5)*(x535)))+(((cj5)*(r01)*(sj6)*(x535))));
evalcond[5]=((((cj6)*(r11)*(x534)))+(cj3)+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x535)))+(((r10)*(sj6)*(x534)))+(((r12)*(sj5)*(x535)))+(((cj5)*(r11)*(sj6)*(x535))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(IKcos(j3))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(IKsin(j3))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst18;
IKReal x536=(cj6)*(cj6);
IKReal x537=(sj6)*(sj6);
gconst18=IKsign(((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((cj5)*(r01)*(r20)*(x537)))+(((cj5)*(r01)*(r20)*(x536)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x536)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x537)))));
IKReal x538=(cj6)*(cj6);
IKReal x539=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((cj5)*(r01)*(r20)*(x539)))+(((cj5)*(r01)*(r20)*(x538)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x538)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x539))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst18)*(((((cj5)*(r21)*(sj3)*(sj6)))+(((r22)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((-1.00000000000000)*(r20)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst18)*(((((cj5)*(r21)*(sj3)*(sj6)))+(((r22)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj3)))))), ((gconst18)*(((((-1.00000000000000)*(r20)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj3)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x540=IKsin(j4);
IKReal x541=IKcos(j4);
evalcond[0]=((1.00000000000000)+(((r22)*(sj5)*(x540)))+(((-1.00000000000000)*(cj6)*(r21)*(x541)))+(((-1.00000000000000)*(r20)*(sj6)*(x541)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x540)))+(((cj5)*(r21)*(sj6)*(x540))));
evalcond[1]=((((r20)*(sj6)*(x540)))+(((r22)*(sj5)*(x541)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x541)))+(((cj5)*(r21)*(sj6)*(x541)))+(((cj6)*(r21)*(x540))));
evalcond[2]=((((cj5)*(r01)*(sj6)*(x540)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x540)))+(((-1.00000000000000)*(r00)*(sj6)*(x541)))+(((r02)*(sj5)*(x540)))+(((-1.00000000000000)*(cj6)*(r01)*(x541))));
evalcond[3]=((((-1.00000000000000)*(r10)*(sj6)*(x541)))+(((r12)*(sj5)*(x540)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x540)))+(((cj5)*(r11)*(sj6)*(x540)))+(((-1.00000000000000)*(cj6)*(r11)*(x541))));
evalcond[4]=((((cj5)*(r01)*(sj6)*(x541)))+(((r00)*(sj6)*(x540)))+(((cj6)*(r01)*(x540)))+(sj3)+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x541)))+(((r02)*(sj5)*(x541))));
evalcond[5]=((((r10)*(sj6)*(x540)))+(((r12)*(sj5)*(x541)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x541)))+(((-1.00000000000000)*(cj3)))+(((cj5)*(r11)*(sj6)*(x541)))+(((cj6)*(r11)*(x540))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(IKsin(j3))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(IKcos(j3))+(((cj5)*(r02))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst20;
IKReal x542=(sj6)*(sj6);
IKReal x543=(cj6)*(cj6);
gconst20=IKsign(((((-1.00000000000000)*(r00)*(r12)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r11)*(x542)))+(((-1.00000000000000)*(cj5)*(r00)*(r11)*(x543)))+(((cj6)*(r02)*(r11)*(sj5)))+(((-1.00000000000000)*(cj6)*(r01)*(r12)*(sj5)))+(((r02)*(r10)*(sj5)*(sj6)))+(((cj5)*(r01)*(r10)*(x543)))+(((cj5)*(r01)*(r10)*(x542)))));
IKReal x544=(sj6)*(sj6);
IKReal x545=(cj6)*(cj6);
dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r11)*(x544)))+(((-1.00000000000000)*(cj5)*(r00)*(r11)*(x545)))+(((cj6)*(r02)*(r11)*(sj5)))+(((-1.00000000000000)*(cj6)*(r01)*(r12)*(sj5)))+(((r02)*(r10)*(sj5)*(sj6)))+(((cj5)*(r01)*(r10)*(x545)))+(((cj5)*(r01)*(r10)*(x544))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst20)*(((((r12)*(sj3)*(sj5)))+(((cj5)*(r11)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((-1.00000000000000)*(cj6)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst20)*(((((r12)*(sj3)*(sj5)))+(((cj5)*(r11)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(sj3)))))), ((gconst20)*(((((-1.00000000000000)*(cj6)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x546=IKsin(j4);
IKReal x547=IKcos(j4);
evalcond[0]=((((r22)*(sj5)*(x546)))+(((-1.00000000000000)*(cj6)*(r21)*(x547)))+(((-1.00000000000000)*(r20)*(sj6)*(x547)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x546)))+(((cj5)*(r21)*(sj6)*(x546))));
evalcond[1]=((((r20)*(sj6)*(x546)))+(((r22)*(sj5)*(x547)))+(((-1.00000000000000)*(cj3)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x547)))+(((cj5)*(r21)*(sj6)*(x547)))+(((cj6)*(r21)*(x546))));
evalcond[2]=((((cj5)*(r01)*(sj6)*(x546)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x546)))+(((-1.00000000000000)*(r00)*(sj6)*(x547)))+(((r02)*(sj5)*(x546)))+(((-1.00000000000000)*(cj6)*(r01)*(x547))));
evalcond[3]=((-1.00000000000000)+(((-1.00000000000000)*(r10)*(sj6)*(x547)))+(((r12)*(sj5)*(x546)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x546)))+(((cj5)*(r11)*(sj6)*(x546)))+(((-1.00000000000000)*(cj6)*(r11)*(x547))));
evalcond[4]=((((cj5)*(r01)*(sj6)*(x547)))+(((r00)*(sj6)*(x546)))+(((cj6)*(r01)*(x546)))+(sj3)+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x547)))+(((r02)*(sj5)*(x547))));
evalcond[5]=((((r10)*(sj6)*(x546)))+(((r12)*(sj5)*(x547)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x547)))+(((cj5)*(r11)*(sj6)*(x547)))+(((cj6)*(r11)*(x546))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(((-1.00000000000000)*(IKsin(j3))))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(IKcos(j3))+(((cj5)*(r02))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst22;
IKReal x548=(cj6)*(cj6);
IKReal x549=(sj6)*(sj6);
gconst22=IKsign(((((cj6)*(r11)*(r22)*(sj5)))+(((-1.00000000000000)*(r12)*(r20)*(sj5)*(sj6)))+(((r10)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x548)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x549)))+(((-1.00000000000000)*(cj6)*(r12)*(r21)*(sj5)))+(((cj5)*(r10)*(r21)*(x548)))+(((cj5)*(r10)*(r21)*(x549)))));
IKReal x550=(cj6)*(cj6);
IKReal x551=(sj6)*(sj6);
dummyeval[0]=((((cj6)*(r11)*(r22)*(sj5)))+(((cj5)*(r10)*(r21)*(x551)))+(((cj5)*(r10)*(r21)*(x550)))+(((-1.00000000000000)*(r12)*(r20)*(sj5)*(sj6)))+(((r10)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x551)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x550)))+(((-1.00000000000000)*(cj6)*(r12)*(r21)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst22)*(((((cj3)*(r12)*(sj5)))+(((cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((-1.00000000000000)*(cj3)*(cj6)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst22)*(((((cj3)*(r12)*(sj5)))+(((cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r10)))))), ((gconst22)*(((((-1.00000000000000)*(cj3)*(cj6)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x552=IKsin(j4);
IKReal x553=IKcos(j4);
evalcond[0]=((((cj5)*(r21)*(sj6)*(x552)))+(((-1.00000000000000)*(cj6)*(r21)*(x553)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x552)))+(((r22)*(sj5)*(x552)))+(((-1.00000000000000)*(r20)*(sj6)*(x553))));
evalcond[1]=((((cj5)*(r21)*(sj6)*(x553)))+(((cj6)*(r21)*(x552)))+(cj3)+(((r20)*(sj6)*(x552)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x553)))+(((r22)*(sj5)*(x553))));
evalcond[2]=((((cj5)*(r01)*(sj6)*(x552)))+(((-1.00000000000000)*(cj6)*(r01)*(x553)))+(((-1.00000000000000)*(r00)*(sj6)*(x553)))+(((r02)*(sj5)*(x552)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x552))));
evalcond[3]=((1.00000000000000)+(((cj5)*(r11)*(sj6)*(x552)))+(((-1.00000000000000)*(r10)*(sj6)*(x553)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x552)))+(((r12)*(sj5)*(x552)))+(((-1.00000000000000)*(cj6)*(r11)*(x553))));
evalcond[4]=((((cj5)*(r01)*(sj6)*(x553)))+(sj3)+(((cj6)*(r01)*(x552)))+(((r02)*(sj5)*(x553)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x553)))+(((r00)*(sj6)*(x552))));
evalcond[5]=((((cj5)*(r11)*(sj6)*(x553)))+(((cj6)*(r11)*(x552)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x553)))+(((r10)*(sj6)*(x552)))+(((r12)*(sj5)*(x553))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x554=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x554)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(IKcos(j3))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj2)*(x554)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst14;
IKReal x555=(cj6)*(cj6);
IKReal x556=(cj5)*(cj5);
IKReal x557=(r01)*(r01);
IKReal x558=(r00)*(r00);
IKReal x559=(sj6)*(sj6);
gconst14=IKsign(((((-2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)*(x556)))+((((r02)*(r02))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(r01)*(r02)*(sj5)*(sj6)))+(((x555)*(x556)*(x558)))+(((x555)*(x557)))+(((x558)*(x559)))+(((2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)))+(((x556)*(x557)*(x559)))+(((-2.00000000000000)*(cj5)*(cj6)*(r00)*(r02)*(sj5)))));
IKReal x560=(cj6)*(cj6);
IKReal x561=(cj5)*(cj5);
IKReal x562=(r01)*(r01);
IKReal x563=(r00)*(r00);
IKReal x564=(sj6)*(sj6);
dummyeval[0]=((((x561)*(x562)*(x564)))+((((r02)*(r02))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(r01)*(r02)*(sj5)*(sj6)))+(((-2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)*(x561)))+(((x563)*(x564)))+(((x560)*(x562)))+(((x560)*(x561)*(x563)))+(((2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)))+(((-2.00000000000000)*(cj5)*(cj6)*(r00)*(r02)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst14)*(((((-1.00000000000000)*(cj6)*(r01)*(sj3)))+(((-1.00000000000000)*(r00)*(sj3)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((-1.00000000000000)*(cj5)*(r01)*(sj3)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj3)))+(((-1.00000000000000)*(r02)*(sj3)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst14)*(((((-1.00000000000000)*(cj6)*(r01)*(sj3)))+(((-1.00000000000000)*(r00)*(sj3)*(sj6)))))), ((gconst14)*(((((-1.00000000000000)*(cj5)*(r01)*(sj3)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj3)))+(((-1.00000000000000)*(r02)*(sj3)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x565=IKsin(j4);
IKReal x566=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x565)))+(((r22)*(sj5)*(x565)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(r20)*(sj6)*(x566)))+(((-1.00000000000000)*(cj6)*(r21)*(x566)))+(((cj5)*(r21)*(sj6)*(x565))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x566)))+(((r22)*(sj5)*(x566)))+(((cj6)*(r21)*(x565)))+(((cj5)*(r21)*(sj6)*(x566)))+(((r20)*(sj6)*(x565)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((((-1.00000000000000)*(cj6)*(r01)*(x566)))+(((-1.00000000000000)*(r00)*(sj6)*(x566)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x565)))+(((cj5)*(r01)*(sj6)*(x565)))+(((r02)*(sj5)*(x565))));
evalcond[3]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x565)))+(((r12)*(sj5)*(x565)))+(((-1.00000000000000)*(cj6)*(r11)*(x566)))+(((cj5)*(r11)*(sj6)*(x565)))+(((-1.00000000000000)*(sj2)))+(((-1.00000000000000)*(r10)*(sj6)*(x566))));
evalcond[4]=((sj3)+(((r00)*(sj6)*(x565)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x566)))+(((cj5)*(r01)*(sj6)*(x566)))+(((r02)*(sj5)*(x566)))+(((cj6)*(r01)*(x565))));
evalcond[5]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x566)))+(((r12)*(sj5)*(x566)))+(((cj2)*(cj3)))+(((cj5)*(r11)*(sj6)*(x566)))+(((cj6)*(r11)*(x565)))+(((r10)*(sj6)*(x565))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x567=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))+(((sj2)*(x567))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(IKcos(j3))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj2)*(x567)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst14;
IKReal x568=(cj6)*(cj6);
IKReal x569=(cj5)*(cj5);
IKReal x570=(r01)*(r01);
IKReal x571=(r00)*(r00);
IKReal x572=(sj6)*(sj6);
gconst14=IKsign(((((x571)*(x572)))+((((r02)*(r02))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(r01)*(r02)*(sj5)*(sj6)))+(((-2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)*(x569)))+(((x568)*(x569)*(x571)))+(((x568)*(x570)))+(((x569)*(x570)*(x572)))+(((2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)))+(((-2.00000000000000)*(cj5)*(cj6)*(r00)*(r02)*(sj5)))));
IKReal x573=(cj6)*(cj6);
IKReal x574=(cj5)*(cj5);
IKReal x575=(r01)*(r01);
IKReal x576=(r00)*(r00);
IKReal x577=(sj6)*(sj6);
dummyeval[0]=((((x576)*(x577)))+(((x573)*(x574)*(x576)))+((((r02)*(r02))*((sj5)*(sj5))))+(((x574)*(x575)*(x577)))+(((2.00000000000000)*(cj5)*(r01)*(r02)*(sj5)*(sj6)))+(((x573)*(x575)))+(((-2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)*(x574)))+(((2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)))+(((-2.00000000000000)*(cj5)*(cj6)*(r00)*(r02)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst14)*(((((-1.00000000000000)*(cj6)*(r01)*(sj3)))+(((-1.00000000000000)*(r00)*(sj3)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((-1.00000000000000)*(cj5)*(r01)*(sj3)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj3)))+(((-1.00000000000000)*(r02)*(sj3)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst14)*(((((-1.00000000000000)*(cj6)*(r01)*(sj3)))+(((-1.00000000000000)*(r00)*(sj3)*(sj6)))))), ((gconst14)*(((((-1.00000000000000)*(cj5)*(r01)*(sj3)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj3)))+(((-1.00000000000000)*(r02)*(sj3)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x578=IKsin(j4);
IKReal x579=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(r20)*(sj6)*(x579)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x578)))+(((-1.00000000000000)*(cj6)*(r21)*(x579)))+(((cj5)*(r21)*(sj6)*(x578)))+(((r22)*(sj5)*(x578)))+(((-1.00000000000000)*(cj2))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x579)))+(((cj5)*(r21)*(sj6)*(x579)))+(((r22)*(sj5)*(x579)))+(((cj6)*(r21)*(x578)))+(((r20)*(sj6)*(x578)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((((-1.00000000000000)*(r00)*(sj6)*(x579)))+(((r02)*(sj5)*(x578)))+(((-1.00000000000000)*(cj6)*(r01)*(x579)))+(((cj5)*(r01)*(sj6)*(x578)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x578))));
evalcond[3]=((((-1.00000000000000)*(cj6)*(r11)*(x579)))+(((cj5)*(r11)*(sj6)*(x578)))+(((r12)*(sj5)*(x578)))+(((-1.00000000000000)*(r10)*(sj6)*(x579)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x578)))+(((-1.00000000000000)*(sj2))));
evalcond[4]=((((r00)*(sj6)*(x578)))+(sj3)+(((r02)*(sj5)*(x579)))+(((cj6)*(r01)*(x578)))+(((cj5)*(r01)*(sj6)*(x579)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x579))));
evalcond[5]=((((cj5)*(r11)*(sj6)*(x579)))+(((r12)*(sj5)*(x579)))+(((cj2)*(cj3)))+(((r10)*(sj6)*(x578)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x579)))+(((cj6)*(r11)*(x578))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst13)*(((((-1.00000000000000)*(cj2)*(cj6)*(r01)))+(((-1.00000000000000)*(cj2)*(r00)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((-1.00000000000000)*(cj2)*(r02)*(sj5)))+(((cj2)*(cj5)*(cj6)*(r00)))+(((-1.00000000000000)*(cj2)*(cj5)*(r01)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst13)*(((((-1.00000000000000)*(cj2)*(cj6)*(r01)))+(((-1.00000000000000)*(cj2)*(r00)*(sj6)))))), ((gconst13)*(((((-1.00000000000000)*(cj2)*(r02)*(sj5)))+(((cj2)*(cj5)*(cj6)*(r00)))+(((-1.00000000000000)*(cj2)*(cj5)*(r01)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[3];
IKReal x580=IKsin(j4);
IKReal x581=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(r20)*(sj6)*(x581)))+(((r22)*(sj5)*(x580)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x580)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj6)*(r21)*(x581)))+(((cj5)*(r21)*(sj6)*(x580))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x580)))+(((-1.00000000000000)*(cj6)*(r01)*(x581)))+(((r02)*(sj5)*(x580)))+(((cj5)*(r01)*(sj6)*(x580)))+(((-1.00000000000000)*(r00)*(sj6)*(x581))));
evalcond[2]=((((-1.00000000000000)*(cj6)*(r11)*(x581)))+(((r12)*(sj5)*(x580)))+(((cj5)*(r11)*(sj6)*(x580)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x580)))+(((-1.00000000000000)*(sj2)))+(((-1.00000000000000)*(r10)*(sj6)*(x581))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-1.00000000000000)*(cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(sj6)))+(((-1.00000000000000)*(cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(cj6)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(sj6)))+(((-1.00000000000000)*(cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(cj6)*(r00)))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.00000000000000)*(cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(sj6)))+(((-1.00000000000000)*(cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(cj6)*(r00)))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x582=IKsin(j3);
IKReal x583=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x582)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(x583)+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj2)*(x582)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(sj2)*(x583)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(x582)+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj2)*(x583)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j1)), 6.28318530717959)));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((-0.00200000000000000)*(cj2)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((0.00200000000000000)*(sj2)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst23;
IKReal x584=(cj6)*(cj6);
IKReal x585=(sj6)*(sj6);
gconst23=IKsign(((((cj5)*(r00)*(r11)*(x585)))+(((cj5)*(r00)*(r11)*(x584)))+(((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x584)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x585)))+(((r00)*(r12)*(sj5)*(sj6)))));
IKReal x586=(cj6)*(cj6);
IKReal x587=(sj6)*(sj6);
dummyeval[0]=((((cj5)*(r00)*(r11)*(x586)))+(((cj5)*(r00)*(r11)*(x587)))+(((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x586)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x587)))+(((r00)*(r12)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(IKsin(j3))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKcos(j3))))+(((cj5)*(r02))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst26;
IKReal x588=(cj6)*(cj6);
IKReal x589=(sj6)*(sj6);
gconst26=IKsign(((((-1.00000000000000)*(r10)*(r22)*(sj5)*(sj6)))+(((cj5)*(r11)*(r20)*(x588)))+(((cj5)*(r11)*(r20)*(x589)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x588)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x589)))+(((r12)*(r20)*(sj5)*(sj6)))+(((cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj6)*(r11)*(r22)*(sj5)))));
IKReal x590=(cj6)*(cj6);
IKReal x591=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj5)*(r10)*(r21)*(x590)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x591)))+(((cj5)*(r11)*(r20)*(x591)))+(((cj5)*(r11)*(r20)*(x590)))+(((-1.00000000000000)*(r10)*(r22)*(sj5)*(sj6)))+(((r12)*(r20)*(sj5)*(sj6)))+(((cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj6)*(r11)*(r22)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst26)*(((((cj3)*(r12)*(sj5)))+(((cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((-1.00000000000000)*(cj3)*(cj6)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst26)*(((((cj3)*(r12)*(sj5)))+(((cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r10)))))), ((gconst26)*(((((-1.00000000000000)*(cj3)*(cj6)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x592=IKsin(j4);
IKReal x593=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj6)*(r21)*(x593)))+(((-1.00000000000000)*(r20)*(sj6)*(x593)))+(((r22)*(sj5)*(x592)))+(((cj5)*(r21)*(sj6)*(x592)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x592))));
evalcond[1]=((((cj6)*(r21)*(x592)))+(((r22)*(sj5)*(x593)))+(((cj5)*(r21)*(sj6)*(x593)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x593)))+(((-1.00000000000000)*(cj3)))+(((r20)*(sj6)*(x592))));
evalcond[2]=((((-1.00000000000000)*(r00)*(sj6)*(x593)))+(((cj5)*(r01)*(sj6)*(x592)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x592)))+(((-1.00000000000000)*(cj6)*(r01)*(x593)))+(((r02)*(sj5)*(x592))));
evalcond[3]=((1.00000000000000)+(((-1.00000000000000)*(cj6)*(r11)*(x593)))+(((cj5)*(r11)*(sj6)*(x592)))+(((r12)*(sj5)*(x592)))+(((-1.00000000000000)*(r10)*(sj6)*(x593)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x592))));
evalcond[4]=((((cj5)*(r01)*(sj6)*(x593)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x593)))+(((cj6)*(r01)*(x592)))+(((r00)*(sj6)*(x592)))+(((r02)*(sj5)*(x593)))+(((-1.00000000000000)*(sj3))));
evalcond[5]=((((cj5)*(r11)*(sj6)*(x593)))+(((r12)*(sj5)*(x593)))+(((cj6)*(r11)*(x592)))+(((r10)*(sj6)*(x592)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x593))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(((-1.00000000000000)*(IKsin(j3))))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKcos(j3))))+(((cj5)*(r02))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst28;
IKReal x594=(cj6)*(cj6);
IKReal x595=(sj6)*(sj6);
gconst28=IKsign(((((cj6)*(r11)*(r22)*(sj5)))+(((-1.00000000000000)*(r12)*(r20)*(sj5)*(sj6)))+(((r10)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x595)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x594)))+(((cj5)*(r10)*(r21)*(x595)))+(((cj5)*(r10)*(r21)*(x594)))));
IKReal x596=(cj6)*(cj6);
IKReal x597=(sj6)*(sj6);
dummyeval[0]=((((cj6)*(r11)*(r22)*(sj5)))+(((-1.00000000000000)*(r12)*(r20)*(sj5)*(sj6)))+(((r10)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x597)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x596)))+(((cj5)*(r10)*(r21)*(x597)))+(((cj5)*(r10)*(r21)*(x596))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst28)*(((((cj3)*(r12)*(sj5)))+(((cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((-1.00000000000000)*(cj3)*(cj6)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst28)*(((((cj3)*(r12)*(sj5)))+(((cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r10)))))), ((gconst28)*(((((-1.00000000000000)*(cj3)*(cj6)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x598=IKsin(j4);
IKReal x599=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj6)*(r21)*(x599)))+(((-1.00000000000000)*(r20)*(sj6)*(x599)))+(((r22)*(sj5)*(x598)))+(((cj5)*(r21)*(sj6)*(x598)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x598))));
evalcond[1]=((cj3)+(((cj6)*(r21)*(x598)))+(((r22)*(sj5)*(x599)))+(((cj5)*(r21)*(sj6)*(x599)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x599)))+(((r20)*(sj6)*(x598))));
evalcond[2]=((((-1.00000000000000)*(r00)*(sj6)*(x599)))+(((cj5)*(r01)*(sj6)*(x598)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x598)))+(((-1.00000000000000)*(cj6)*(r01)*(x599)))+(((r02)*(sj5)*(x598))));
evalcond[3]=((-1.00000000000000)+(((-1.00000000000000)*(cj6)*(r11)*(x599)))+(((cj5)*(r11)*(sj6)*(x598)))+(((r12)*(sj5)*(x598)))+(((-1.00000000000000)*(r10)*(sj6)*(x599)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x598))));
evalcond[4]=((((cj5)*(r01)*(sj6)*(x599)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x599)))+(((cj6)*(r01)*(x598)))+(((r00)*(sj6)*(x598)))+(((r02)*(sj5)*(x599)))+(((-1.00000000000000)*(sj3))));
evalcond[5]=((((cj5)*(r11)*(sj6)*(x599)))+(((r12)*(sj5)*(x599)))+(((cj6)*(r11)*(x598)))+(((r10)*(sj6)*(x598)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x599))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKcos(j3))))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(IKsin(j3))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst30;
IKReal x600=(r20)*(r20);
IKReal x601=(cj5)*(cj5);
IKReal x602=(sj6)*(sj6);
IKReal x603=(cj6)*(cj6);
IKReal x604=(r21)*(r21);
gconst30=IKsign(((((x600)*(x601)*(x603)))+(((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x600)*(x602)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x601)))+(((x603)*(x604)))+(((x601)*(x602)*(x604)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))));
IKReal x605=(r20)*(r20);
IKReal x606=(cj5)*(cj5);
IKReal x607=(sj6)*(sj6);
IKReal x608=(cj6)*(cj6);
IKReal x609=(r21)*(r21);
dummyeval[0]=((((x605)*(x607)))+(((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((x608)*(x609)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x605)*(x606)*(x608)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x606)))+(((x606)*(x607)*(x609)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst30)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst30)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)))))), ((gconst30)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x610=IKsin(j4);
IKReal x611=IKcos(j4);
evalcond[0]=((-1.00000000000000)+(((-1.00000000000000)*(r20)*(sj6)*(x611)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x610)))+(((-1.00000000000000)*(cj6)*(r21)*(x611)))+(((cj5)*(r21)*(sj6)*(x610)))+(((r22)*(sj5)*(x610))));
evalcond[1]=((((r20)*(sj6)*(x610)))+(((cj6)*(r21)*(x610)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x611)))+(((cj5)*(r21)*(sj6)*(x611)))+(((r22)*(sj5)*(x611))));
evalcond[2]=((((-1.00000000000000)*(cj6)*(r01)*(x611)))+(((-1.00000000000000)*(r00)*(sj6)*(x611)))+(((cj5)*(r01)*(sj6)*(x610)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x610)))+(((r02)*(sj5)*(x610))));
evalcond[3]=((((-1.00000000000000)*(r10)*(sj6)*(x611)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x610)))+(((r12)*(sj5)*(x610)))+(((cj5)*(r11)*(sj6)*(x610)))+(((-1.00000000000000)*(cj6)*(r11)*(x611))));
evalcond[4]=((((cj6)*(r01)*(x610)))+(((r00)*(sj6)*(x610)))+(((cj5)*(r01)*(sj6)*(x611)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x611)))+(((-1.00000000000000)*(sj3)))+(((r02)*(sj5)*(x611))));
evalcond[5]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x611)))+(((r12)*(sj5)*(x611)))+(((-1.00000000000000)*(cj3)))+(((cj6)*(r11)*(x610)))+(((cj5)*(r11)*(sj6)*(x611)))+(((r10)*(sj6)*(x610))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKcos(j3))))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(IKsin(j3))))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst32;
IKReal x612=(cj6)*(cj6);
IKReal x613=(sj6)*(sj6);
gconst32=IKsign(((((cj5)*(r11)*(r20)*(x613)))+(((cj5)*(r11)*(r20)*(x612)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x613)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x612)))+(((-1.00000000000000)*(r10)*(r22)*(sj5)*(sj6)))+(((r12)*(r20)*(sj5)*(sj6)))+(((cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj6)*(r11)*(r22)*(sj5)))));
IKReal x614=(cj6)*(cj6);
IKReal x615=(sj6)*(sj6);
dummyeval[0]=((((cj5)*(r11)*(r20)*(x615)))+(((cj5)*(r11)*(r20)*(x614)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x614)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x615)))+(((-1.00000000000000)*(r10)*(r22)*(sj5)*(sj6)))+(((r12)*(r20)*(sj5)*(sj6)))+(((cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj6)*(r11)*(r22)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst32)*(((((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r20)))+(((cj3)*(r22)*(sj5)))+(((cj3)*(cj5)*(r21)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst32)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst32)*(((((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r20)))+(((cj3)*(r22)*(sj5)))+(((cj3)*(cj5)*(r21)*(sj6)))))), ((gconst32)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x616=IKsin(j4);
IKReal x617=IKcos(j4);
evalcond[0]=((1.00000000000000)+(((-1.00000000000000)*(r20)*(sj6)*(x617)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x616)))+(((-1.00000000000000)*(cj6)*(r21)*(x617)))+(((cj5)*(r21)*(sj6)*(x616)))+(((r22)*(sj5)*(x616))));
evalcond[1]=((((r20)*(sj6)*(x616)))+(((cj6)*(r21)*(x616)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x617)))+(((cj5)*(r21)*(sj6)*(x617)))+(((r22)*(sj5)*(x617))));
evalcond[2]=((((-1.00000000000000)*(cj6)*(r01)*(x617)))+(((-1.00000000000000)*(r00)*(sj6)*(x617)))+(((cj5)*(r01)*(sj6)*(x616)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x616)))+(((r02)*(sj5)*(x616))));
evalcond[3]=((((-1.00000000000000)*(r10)*(sj6)*(x617)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x616)))+(((r12)*(sj5)*(x616)))+(((cj5)*(r11)*(sj6)*(x616)))+(((-1.00000000000000)*(cj6)*(r11)*(x617))));
evalcond[4]=((((cj6)*(r01)*(x616)))+(((r00)*(sj6)*(x616)))+(((cj5)*(r01)*(sj6)*(x617)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x617)))+(((-1.00000000000000)*(sj3)))+(((r02)*(sj5)*(x617))));
evalcond[5]=((cj3)+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x617)))+(((r12)*(sj5)*(x617)))+(((cj6)*(r11)*(x616)))+(((cj5)*(r11)*(sj6)*(x617)))+(((r10)*(sj6)*(x616))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x618=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((sj2)*(x618)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKcos(j3))))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((cj2)*(x618)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst24;
IKReal x619=(cj6)*(cj6);
IKReal x620=(sj6)*(sj6);
gconst24=IKsign(((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x620)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x619)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((cj5)*(r00)*(r11)*(x620)))+(((r00)*(r12)*(sj5)*(sj6)))+(((cj5)*(r00)*(r11)*(x619)))));
IKReal x621=(cj6)*(cj6);
IKReal x622=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x621)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x622)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((cj5)*(r00)*(r11)*(x621)))+(((cj5)*(r00)*(r11)*(x622)))+(((r00)*(r12)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst24)*(((((-1.00000000000000)*(cj6)*(r01)*(sj2)))+(((-1.00000000000000)*(r00)*(sj2)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((-1.00000000000000)*(cj5)*(r01)*(sj2)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj2)))+(((-1.00000000000000)*(r02)*(sj2)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst24)*(((((-1.00000000000000)*(cj6)*(r01)*(sj2)))+(((-1.00000000000000)*(r00)*(sj2)*(sj6)))))), ((gconst24)*(((((-1.00000000000000)*(cj5)*(r01)*(sj2)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj2)))+(((-1.00000000000000)*(r02)*(sj2)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x623=IKsin(j4);
IKReal x624=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj6)*(r21)*(x624)))+(((r22)*(sj5)*(x623)))+(((-1.00000000000000)*(r20)*(sj6)*(x624)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x623)))+(((cj5)*(r21)*(sj6)*(x623))));
evalcond[1]=((((cj6)*(r21)*(x623)))+(((r22)*(sj5)*(x624)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x624)))+(((cj5)*(r21)*(sj6)*(x624)))+(((r20)*(sj6)*(x623)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((((r02)*(sj5)*(x623)))+(((cj5)*(r01)*(sj6)*(x623)))+(((-1.00000000000000)*(cj6)*(r01)*(x624)))+(((-1.00000000000000)*(r00)*(sj6)*(x624)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x623))));
evalcond[3]=((sj2)+(((cj5)*(r11)*(sj6)*(x623)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x623)))+(((-1.00000000000000)*(r10)*(sj6)*(x624)))+(((-1.00000000000000)*(cj6)*(r11)*(x624)))+(((r12)*(sj5)*(x623))));
evalcond[4]=((((r02)*(sj5)*(x624)))+(((cj5)*(r01)*(sj6)*(x624)))+(((-1.00000000000000)*(sj3)))+(((r00)*(sj6)*(x623)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x624)))+(((cj6)*(r01)*(x623))));
evalcond[5]=((((cj6)*(r11)*(x623)))+(((cj5)*(r11)*(sj6)*(x624)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x624)))+(((-1.00000000000000)*(cj2)*(cj3)))+(((r12)*(sj5)*(x624)))+(((r10)*(sj6)*(x623))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x625=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x625)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKcos(j3))))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))+(((cj2)*(x625))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst24;
IKReal x626=(cj6)*(cj6);
IKReal x627=(sj6)*(sj6);
gconst24=IKsign(((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x627)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x626)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((cj5)*(r00)*(r11)*(x626)))+(((cj5)*(r00)*(r11)*(x627)))+(((r00)*(r12)*(sj5)*(sj6)))));
IKReal x628=(cj6)*(cj6);
IKReal x629=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x629)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x628)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((cj5)*(r00)*(r11)*(x629)))+(((cj5)*(r00)*(r11)*(x628)))+(((r00)*(r12)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst24)*(((((-1.00000000000000)*(cj6)*(r01)*(sj2)))+(((-1.00000000000000)*(r00)*(sj2)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((-1.00000000000000)*(cj5)*(r01)*(sj2)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj2)))+(((-1.00000000000000)*(r02)*(sj2)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst24)*(((((-1.00000000000000)*(cj6)*(r01)*(sj2)))+(((-1.00000000000000)*(r00)*(sj2)*(sj6)))))), ((gconst24)*(((((-1.00000000000000)*(cj5)*(r01)*(sj2)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj2)))+(((-1.00000000000000)*(r02)*(sj2)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x630=IKsin(j4);
IKReal x631=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj6)*(r21)*(x631)))+(((-1.00000000000000)*(r20)*(sj6)*(x631)))+(((r22)*(sj5)*(x630)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x630)))+(((cj5)*(r21)*(sj6)*(x630))));
evalcond[1]=((((cj6)*(r21)*(x630)))+(((r22)*(sj5)*(x631)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x631)))+(((cj5)*(r21)*(sj6)*(x631)))+(((r20)*(sj6)*(x630)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((((r02)*(sj5)*(x630)))+(((cj5)*(r01)*(sj6)*(x630)))+(((-1.00000000000000)*(cj6)*(r01)*(x631)))+(((-1.00000000000000)*(r00)*(sj6)*(x631)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x630))));
evalcond[3]=((sj2)+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x630)))+(((cj5)*(r11)*(sj6)*(x630)))+(((-1.00000000000000)*(r10)*(sj6)*(x631)))+(((-1.00000000000000)*(cj6)*(r11)*(x631)))+(((r12)*(sj5)*(x630))));
evalcond[4]=((((cj6)*(r01)*(x630)))+(((r02)*(sj5)*(x631)))+(((cj5)*(r01)*(sj6)*(x631)))+(((-1.00000000000000)*(sj3)))+(((r00)*(sj6)*(x630)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x631))));
evalcond[5]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x631)))+(((cj6)*(r11)*(x630)))+(((cj5)*(r11)*(sj6)*(x631)))+(((-1.00000000000000)*(cj2)*(cj3)))+(((r12)*(sj5)*(x631)))+(((r10)*(sj6)*(x630))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst23)*(((((-1.00000000000000)*(cj6)*(r01)*(sj2)))+(((-1.00000000000000)*(r00)*(sj2)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((-1.00000000000000)*(cj5)*(r01)*(sj2)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj2)))+(((-1.00000000000000)*(r02)*(sj2)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst23)*(((((-1.00000000000000)*(cj6)*(r01)*(sj2)))+(((-1.00000000000000)*(r00)*(sj2)*(sj6)))))), ((gconst23)*(((((-1.00000000000000)*(cj5)*(r01)*(sj2)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj2)))+(((-1.00000000000000)*(r02)*(sj2)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[3];
IKReal x632=IKsin(j4);
IKReal x633=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj6)*(r21)*(x633)))+(((-1.00000000000000)*(r20)*(sj6)*(x633)))+(((r22)*(sj5)*(x632)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x632)))+(((cj5)*(r21)*(sj6)*(x632))));
evalcond[1]=((((r02)*(sj5)*(x632)))+(((cj5)*(r01)*(sj6)*(x632)))+(((-1.00000000000000)*(cj6)*(r01)*(x633)))+(((-1.00000000000000)*(r00)*(sj6)*(x633)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x632))));
evalcond[2]=((sj2)+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x632)))+(((cj5)*(r11)*(sj6)*(x632)))+(((-1.00000000000000)*(r10)*(sj6)*(x633)))+(((-1.00000000000000)*(cj6)*(r11)*(x633)))+(((r12)*(sj5)*(x632))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x634=IKsin(j3);
IKReal x635=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x634)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(x635)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((cj2)*(x634)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((-1.00000000000000)*(sj2)*(x635)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(x634)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((-1.00000000000000)*(cj2)*(x635)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j2)), 6.28318530717959)));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.400000000000000)*(sj1)))+(((-0.00200000000000000)*(cj1)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[3]=((((-0.00200000000000000)*(sj1)))+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((0.400000000000000)*(cj1)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst33;
IKReal x636=(cj6)*(cj6);
IKReal x637=(sj6)*(sj6);
gconst33=IKsign(((((cj6)*(r01)*(r22)*(sj5)))+(((-1.00000000000000)*(cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(r02)*(r20)*(sj5)*(sj6)))+(((cj5)*(r00)*(r21)*(x636)))+(((cj5)*(r00)*(r21)*(x637)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x636)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x637)))+(((r00)*(r22)*(sj5)*(sj6)))));
IKReal x638=(cj6)*(cj6);
IKReal x639=(sj6)*(sj6);
dummyeval[0]=((((cj6)*(r01)*(r22)*(sj5)))+(((-1.00000000000000)*(cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(r02)*(r20)*(sj5)*(sj6)))+(((cj5)*(r00)*(r21)*(x638)))+(((cj5)*(r00)*(r21)*(x639)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x638)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x639)))+(((r00)*(r22)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j1)), 6.28318530717959)));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(IKsin(j3))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(IKcos(j3))))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst36;
IKReal x640=(cj6)*(cj6);
IKReal x641=(sj6)*(sj6);
gconst36=IKsign(((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x641)))+(((cj5)*(r01)*(r20)*(x640)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x640)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x641)))));
IKReal x642=(cj6)*(cj6);
IKReal x643=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x643)))+(((cj5)*(r01)*(r20)*(x642)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x642)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x643))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst36)*(((((cj3)*(cj5)*(r01)*(sj6)))+(((cj3)*(r02)*(sj5)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((((-1.00000000000000)*(cj3)*(r00)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj6)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst36)*(((((cj3)*(cj5)*(r01)*(sj6)))+(((cj3)*(r02)*(sj5)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r00)))))), ((gconst36)*(((((-1.00000000000000)*(cj3)*(r00)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj6)*(r01)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x644=IKsin(j4);
IKReal x645=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(r20)*(sj6)*(x645)))+(((-1.00000000000000)*(cj6)*(r21)*(x645)))+(((r22)*(sj5)*(x644)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x644)))+(((cj5)*(r21)*(sj6)*(x644))));
evalcond[1]=((((cj6)*(r21)*(x644)))+(((r22)*(sj5)*(x645)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x645)))+(((-1.00000000000000)*(cj3)))+(((cj5)*(r21)*(sj6)*(x645)))+(((r20)*(sj6)*(x644))));
evalcond[2]=((-1.00000000000000)+(((r02)*(sj5)*(x644)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x644)))+(((-1.00000000000000)*(cj6)*(r01)*(x645)))+(((-1.00000000000000)*(r00)*(sj6)*(x645)))+(((cj5)*(r01)*(sj6)*(x644))));
evalcond[3]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x644)))+(((-1.00000000000000)*(r10)*(sj6)*(x645)))+(((-1.00000000000000)*(cj6)*(r11)*(x645)))+(((cj5)*(r11)*(sj6)*(x644)))+(((r12)*(sj5)*(x644))));
evalcond[4]=((((r02)*(sj5)*(x645)))+(((cj6)*(r01)*(x644)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x645)))+(((r00)*(sj6)*(x644)))+(((cj5)*(r01)*(sj6)*(x645))));
evalcond[5]=((((r10)*(sj6)*(x644)))+(((cj6)*(r11)*(x644)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x645)))+(((cj5)*(r11)*(sj6)*(x645)))+(((r12)*(sj5)*(x645)))+(((-1.00000000000000)*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j1)), 6.28318530717959)));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(IKsin(j3))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(IKcos(j3))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst38;
IKReal x646=(cj6)*(cj6);
IKReal x647=(sj6)*(sj6);
gconst38=IKsign(((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x647)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x646)))+(((cj5)*(r00)*(r11)*(x646)))+(((cj5)*(r00)*(r11)*(x647)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((r00)*(r12)*(sj5)*(sj6)))));
IKReal x648=(cj6)*(cj6);
IKReal x649=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x649)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x648)))+(((cj5)*(r00)*(r11)*(x648)))+(((cj5)*(r00)*(r11)*(x649)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((r00)*(r12)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst38)*(((((r02)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(sj3)))+(((cj5)*(r01)*(sj3)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((((-1.00000000000000)*(cj6)*(r01)*(sj3)))+(((-1.00000000000000)*(r00)*(sj3)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst38)*(((((r02)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(sj3)))+(((cj5)*(r01)*(sj3)*(sj6)))))), ((gconst38)*(((((-1.00000000000000)*(cj6)*(r01)*(sj3)))+(((-1.00000000000000)*(r00)*(sj3)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x650=IKsin(j4);
IKReal x651=IKcos(j4);
evalcond[0]=((((r22)*(sj5)*(x650)))+(((-1.00000000000000)*(cj6)*(r21)*(x651)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x650)))+(((cj5)*(r21)*(sj6)*(x650)))+(((-1.00000000000000)*(r20)*(sj6)*(x651))));
evalcond[1]=((((r22)*(sj5)*(x651)))+(((r20)*(sj6)*(x650)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x651)))+(((-1.00000000000000)*(cj3)))+(((cj5)*(r21)*(sj6)*(x651)))+(((cj6)*(r21)*(x650))));
evalcond[2]=((1.00000000000000)+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x650)))+(((r02)*(sj5)*(x650)))+(((-1.00000000000000)*(cj6)*(r01)*(x651)))+(((cj5)*(r01)*(sj6)*(x650)))+(((-1.00000000000000)*(r00)*(sj6)*(x651))));
evalcond[3]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x650)))+(((-1.00000000000000)*(r10)*(sj6)*(x651)))+(((-1.00000000000000)*(cj6)*(r11)*(x651)))+(((cj5)*(r11)*(sj6)*(x650)))+(((r12)*(sj5)*(x650))));
evalcond[4]=((((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x651)))+(((r02)*(sj5)*(x651)))+(((r00)*(sj6)*(x650)))+(((cj6)*(r01)*(x650)))+(((cj5)*(r01)*(sj6)*(x651))));
evalcond[5]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x651)))+(sj3)+(((cj5)*(r11)*(sj6)*(x651)))+(((r12)*(sj5)*(x651)))+(((r10)*(sj6)*(x650)))+(((cj6)*(r11)*(x650))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x652=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(IKsin(j3))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((sj1)*(x652)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x652)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst34;
IKReal x653=(cj5)*(cj5);
IKReal x654=(r20)*(r20);
IKReal x655=(sj6)*(sj6);
IKReal x656=(cj6)*(cj6);
IKReal x657=(r21)*(r21);
gconst34=IKsign(((((-1.00000000000000)*(x653)*(x655)*(x657)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((-1.00000000000000)*(x656)*(x657)))+(((-1.00000000000000)*(x653)*(x654)*(x656)))+(((-2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x653)))+(((-1.00000000000000)*(x654)*(x655)))));
IKReal x658=(cj5)*(cj5);
IKReal x659=(r20)*(r20);
IKReal x660=(sj6)*(sj6);
IKReal x661=(cj6)*(cj6);
IKReal x662=(r21)*(r21);
dummyeval[0]=((((-1.00000000000000)*(x658)*(x659)*(x661)))+(((-1.00000000000000)*(x659)*(x660)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((-1.00000000000000)*(x661)*(x662)))+(((-2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((-1.00000000000000)*(x658)*(x660)*(x662)))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x658))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst34)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((-1.00000000000000)*(cj3)*(cj5)*(r21)*(sj6)))+(((cj3)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj3)*(r22)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst34)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6)))))), ((gconst34)*(((((-1.00000000000000)*(cj3)*(cj5)*(r21)*(sj6)))+(((cj3)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj3)*(r22)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x663=IKsin(j4);
IKReal x664=IKcos(j4);
evalcond[0]=((((cj5)*(r21)*(sj6)*(x663)))+(((r22)*(sj5)*(x663)))+(((-1.00000000000000)*(r20)*(sj6)*(x664)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x663)))+(((-1.00000000000000)*(cj6)*(r21)*(x664))));
evalcond[1]=((((cj5)*(r21)*(sj6)*(x664)))+(((r22)*(sj5)*(x664)))+(((r20)*(sj6)*(x663)))+(((-1.00000000000000)*(cj3)))+(((cj6)*(r21)*(x663)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x664))));
evalcond[2]=((((-1.00000000000000)*(cj6)*(r01)*(x664)))+(((-1.00000000000000)*(cj1)))+(((-1.00000000000000)*(r00)*(sj6)*(x664)))+(((cj5)*(r01)*(sj6)*(x663)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x663)))+(((r02)*(sj5)*(x663))));
evalcond[3]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x663)))+(((-1.00000000000000)*(r10)*(sj6)*(x664)))+(((r12)*(sj5)*(x663)))+(((cj5)*(r11)*(sj6)*(x663)))+(((-1.00000000000000)*(cj6)*(r11)*(x664)))+(((-1.00000000000000)*(sj1))));
evalcond[4]=((((cj6)*(r01)*(x663)))+(((sj1)*(sj3)))+(((r00)*(sj6)*(x663)))+(((cj5)*(r01)*(sj6)*(x664)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x664)))+(((r02)*(sj5)*(x664))));
evalcond[5]=((((r10)*(sj6)*(x663)))+(((-1.00000000000000)*(cj1)*(sj3)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x664)))+(((r12)*(sj5)*(x664)))+(((cj6)*(r11)*(x663)))+(((cj5)*(r11)*(sj6)*(x664))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x665=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(IKsin(j3))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((sj1)*(x665)))+(((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x665)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst34;
IKReal x666=(cj5)*(cj5);
IKReal x667=(r20)*(r20);
IKReal x668=(sj6)*(sj6);
IKReal x669=(cj6)*(cj6);
IKReal x670=(r21)*(r21);
gconst34=IKsign(((((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((-1.00000000000000)*(x666)*(x668)*(x670)))+(((-2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((-1.00000000000000)*(x669)*(x670)))+(((-1.00000000000000)*(x666)*(x667)*(x669)))+(((-1.00000000000000)*(x667)*(x668)))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x666)))));
IKReal x671=(cj5)*(cj5);
IKReal x672=(r20)*(r20);
IKReal x673=(sj6)*(sj6);
IKReal x674=(cj6)*(cj6);
IKReal x675=(r21)*(r21);
dummyeval[0]=((((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x671)))+(((-1.00000000000000)*(x671)*(x672)*(x674)))+(((-2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((-1.00000000000000)*(x671)*(x673)*(x675)))+(((-1.00000000000000)*(x672)*(x673)))+(((-1.00000000000000)*(x674)*(x675))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst34)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((-1.00000000000000)*(cj3)*(cj5)*(r21)*(sj6)))+(((cj3)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj3)*(r22)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst34)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6)))))), ((gconst34)*(((((-1.00000000000000)*(cj3)*(cj5)*(r21)*(sj6)))+(((cj3)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj3)*(r22)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x676=IKsin(j4);
IKReal x677=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x676)))+(((-1.00000000000000)*(cj6)*(r21)*(x677)))+(((cj5)*(r21)*(sj6)*(x676)))+(((-1.00000000000000)*(r20)*(sj6)*(x677)))+(((r22)*(sj5)*(x676))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x677)))+(((cj5)*(r21)*(sj6)*(x677)))+(((r20)*(sj6)*(x676)))+(((-1.00000000000000)*(cj3)))+(((cj6)*(r21)*(x676)))+(((r22)*(sj5)*(x677))));
evalcond[2]=((((-1.00000000000000)*(cj6)*(r01)*(x677)))+(((-1.00000000000000)*(r00)*(sj6)*(x677)))+(((-1.00000000000000)*(cj1)))+(((r02)*(sj5)*(x676)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x676)))+(((cj5)*(r01)*(sj6)*(x676))));
evalcond[3]=((((-1.00000000000000)*(cj6)*(r11)*(x677)))+(((cj5)*(r11)*(sj6)*(x676)))+(((r12)*(sj5)*(x676)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x676)))+(((-1.00000000000000)*(r10)*(sj6)*(x677)))+(((-1.00000000000000)*(sj1))));
evalcond[4]=((((r00)*(sj6)*(x676)))+(((sj1)*(sj3)))+(((r02)*(sj5)*(x677)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x677)))+(((cj5)*(r01)*(sj6)*(x677)))+(((cj6)*(r01)*(x676))));
evalcond[5]=((((cj5)*(r11)*(sj6)*(x677)))+(((-1.00000000000000)*(cj1)*(sj3)))+(((r10)*(sj6)*(x676)))+(((cj6)*(r11)*(x676)))+(((r12)*(sj5)*(x677)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x677))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst33)*(((((-1.00000000000000)*(cj1)*(r20)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r21))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((-1.00000000000000)*(cj1)*(cj5)*(r21)*(sj6)))+(((cj1)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj1)*(r22)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst33)*(((((-1.00000000000000)*(cj1)*(r20)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r21)))))), ((gconst33)*(((((-1.00000000000000)*(cj1)*(cj5)*(r21)*(sj6)))+(((cj1)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj1)*(r22)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[3];
IKReal x678=IKsin(j4);
IKReal x679=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x678)))+(((-1.00000000000000)*(cj6)*(r21)*(x679)))+(((cj5)*(r21)*(sj6)*(x678)))+(((-1.00000000000000)*(r20)*(sj6)*(x679)))+(((r22)*(sj5)*(x678))));
evalcond[1]=((((-1.00000000000000)*(cj6)*(r01)*(x679)))+(((-1.00000000000000)*(r00)*(sj6)*(x679)))+(((-1.00000000000000)*(cj1)))+(((r02)*(sj5)*(x678)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x678)))+(((cj5)*(r01)*(sj6)*(x678))));
evalcond[2]=((((-1.00000000000000)*(cj6)*(r11)*(x679)))+(((cj5)*(r11)*(sj6)*(x678)))+(((r12)*(sj5)*(x678)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x678)))+(((-1.00000000000000)*(r10)*(sj6)*(x679)))+(((-1.00000000000000)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x680=IKcos(j3);
IKReal x681=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(x681)+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((sj1)*(x680)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x680)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(x680)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))+(((sj1)*(x681))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj1)*(x681)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j2)), 6.28318530717959)));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((((0.00200000000000000)*(cj1)))+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.400000000000000)*(sj1)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((0.400000000000000)*(cj1)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((0.00200000000000000)*(sj1)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst39;
IKReal x682=(cj6)*(cj6);
IKReal x683=(sj6)*(sj6);
gconst39=IKsign(((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x682)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x683)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x683)))+(((cj5)*(r01)*(r20)*(x682)))));
IKReal x684=(cj6)*(cj6);
IKReal x685=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x684)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x685)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x685)))+(((cj5)*(r01)*(r20)*(x684))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j1)), 6.28318530717959)));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(((-1.00000000000000)*(IKsin(j3))))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(IKcos(j3))))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst42;
IKReal x686=(cj6)*(cj6);
IKReal x687=(sj6)*(sj6);
gconst42=IKsign(((((-1.00000000000000)*(cj5)*(r01)*(r20)*(x687)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x686)))+(((cj6)*(r01)*(r22)*(sj5)))+(((-1.00000000000000)*(cj6)*(r02)*(r21)*(sj5)))+(((cj5)*(r00)*(r21)*(x687)))+(((cj5)*(r00)*(r21)*(x686)))+(((-1.00000000000000)*(r02)*(r20)*(sj5)*(sj6)))+(((r00)*(r22)*(sj5)*(sj6)))));
IKReal x688=(cj6)*(cj6);
IKReal x689=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj5)*(r01)*(r20)*(x689)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x688)))+(((cj6)*(r01)*(r22)*(sj5)))+(((-1.00000000000000)*(cj6)*(r02)*(r21)*(sj5)))+(((cj5)*(r00)*(r21)*(x689)))+(((cj5)*(r00)*(r21)*(x688)))+(((-1.00000000000000)*(r02)*(r20)*(sj5)*(sj6)))+(((r00)*(r22)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst42)*(((((cj3)*(cj5)*(r01)*(sj6)))+(((cj3)*(r02)*(sj5)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst42)*(((((-1.00000000000000)*(cj3)*(r00)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj6)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst42)*(((((cj3)*(cj5)*(r01)*(sj6)))+(((cj3)*(r02)*(sj5)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r00)))))), ((gconst42)*(((((-1.00000000000000)*(cj3)*(r00)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj6)*(r01)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x690=IKsin(j4);
IKReal x691=IKcos(j4);
evalcond[0]=((((cj5)*(r21)*(sj6)*(x690)))+(((-1.00000000000000)*(r20)*(sj6)*(x691)))+(((-1.00000000000000)*(cj6)*(r21)*(x691)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x690)))+(((r22)*(sj5)*(x690))));
evalcond[1]=((((cj5)*(r21)*(sj6)*(x691)))+(((r20)*(sj6)*(x690)))+(cj3)+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x691)))+(((cj6)*(r21)*(x690)))+(((r22)*(sj5)*(x691))));
evalcond[2]=((1.00000000000000)+(((cj5)*(r01)*(sj6)*(x690)))+(((-1.00000000000000)*(cj6)*(r01)*(x691)))+(((-1.00000000000000)*(r00)*(sj6)*(x691)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x690)))+(((r02)*(sj5)*(x690))));
evalcond[3]=((((-1.00000000000000)*(r10)*(sj6)*(x691)))+(((cj5)*(r11)*(sj6)*(x690)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x690)))+(((-1.00000000000000)*(cj6)*(r11)*(x691)))+(((r12)*(sj5)*(x690))));
evalcond[4]=((((cj6)*(r01)*(x690)))+(((cj5)*(r01)*(sj6)*(x691)))+(((r00)*(sj6)*(x690)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x691)))+(((r02)*(sj5)*(x691))));
evalcond[5]=((((cj5)*(r11)*(sj6)*(x691)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x691)))+(((r10)*(sj6)*(x690)))+(((cj6)*(r11)*(x690)))+(((-1.00000000000000)*(sj3)))+(((r12)*(sj5)*(x691))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j1)), 6.28318530717959)));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(((-1.00000000000000)*(IKsin(j3))))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(IKcos(j3))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst44;
IKReal x692=(cj6)*(cj6);
IKReal x693=(sj6)*(sj6);
gconst44=IKsign(((((cj6)*(r01)*(r22)*(sj5)))+(((-1.00000000000000)*(cj6)*(r02)*(r21)*(sj5)))+(((cj5)*(r00)*(r21)*(x693)))+(((cj5)*(r00)*(r21)*(x692)))+(((-1.00000000000000)*(r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x693)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x692)))+(((r00)*(r22)*(sj5)*(sj6)))));
IKReal x694=(cj6)*(cj6);
IKReal x695=(sj6)*(sj6);
dummyeval[0]=((((cj6)*(r01)*(r22)*(sj5)))+(((-1.00000000000000)*(cj6)*(r02)*(r21)*(sj5)))+(((cj5)*(r00)*(r21)*(x694)))+(((cj5)*(r00)*(r21)*(x695)))+(((-1.00000000000000)*(r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x694)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x695)))+(((r00)*(r22)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst44)*(((((cj3)*(cj5)*(r01)*(sj6)))+(((cj3)*(r02)*(sj5)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst44)*(((((-1.00000000000000)*(cj3)*(r00)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj6)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst44)*(((((cj3)*(cj5)*(r01)*(sj6)))+(((cj3)*(r02)*(sj5)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r00)))))), ((gconst44)*(((((-1.00000000000000)*(cj3)*(r00)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj6)*(r01)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x696=IKsin(j4);
IKReal x697=IKcos(j4);
evalcond[0]=((((cj5)*(r21)*(sj6)*(x696)))+(((-1.00000000000000)*(r20)*(sj6)*(x697)))+(((-1.00000000000000)*(cj6)*(r21)*(x697)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x696)))+(((r22)*(sj5)*(x696))));
evalcond[1]=((((cj5)*(r21)*(sj6)*(x697)))+(((r20)*(sj6)*(x696)))+(cj3)+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x697)))+(((cj6)*(r21)*(x696)))+(((r22)*(sj5)*(x697))));
evalcond[2]=((-1.00000000000000)+(((cj5)*(r01)*(sj6)*(x696)))+(((-1.00000000000000)*(cj6)*(r01)*(x697)))+(((-1.00000000000000)*(r00)*(sj6)*(x697)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x696)))+(((r02)*(sj5)*(x696))));
evalcond[3]=((((-1.00000000000000)*(r10)*(sj6)*(x697)))+(((cj5)*(r11)*(sj6)*(x696)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x696)))+(((-1.00000000000000)*(cj6)*(r11)*(x697)))+(((r12)*(sj5)*(x696))));
evalcond[4]=((((cj6)*(r01)*(x696)))+(((cj5)*(r01)*(sj6)*(x697)))+(((r00)*(sj6)*(x696)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x697)))+(((r02)*(sj5)*(x697))));
evalcond[5]=((sj3)+(((cj5)*(r11)*(sj6)*(x697)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x697)))+(((r10)*(sj6)*(x696)))+(((cj6)*(r11)*(x696)))+(((r12)*(sj5)*(x697))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x698=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((-1.00000000000000)*(IKsin(j3))))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((sj1)*(x698)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x698)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst40;
IKReal x699=(r20)*(r20);
IKReal x700=(cj5)*(cj5);
IKReal x701=(sj6)*(sj6);
IKReal x702=(cj6)*(cj6);
IKReal x703=(r21)*(r21);
gconst40=IKsign(((((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x699)*(x700)*(x702)))+(((x702)*(x703)))+(((x700)*(x701)*(x703)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((x699)*(x701)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x700)))));
IKReal x704=(r20)*(r20);
IKReal x705=(cj5)*(cj5);
IKReal x706=(sj6)*(sj6);
IKReal x707=(cj6)*(cj6);
IKReal x708=(r21)*(r21);
dummyeval[0]=((((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x707)*(x708)))+(((x704)*(x706)))+(((x704)*(x705)*(x707)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((x705)*(x706)*(x708)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x705))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst40)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((-1.00000000000000)*(cj3)*(cj5)*(r21)*(sj6)))+(((cj3)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj3)*(r22)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst40)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6)))))), ((gconst40)*(((((-1.00000000000000)*(cj3)*(cj5)*(r21)*(sj6)))+(((cj3)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj3)*(r22)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x709=IKsin(j4);
IKReal x710=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x709)))+(((r22)*(sj5)*(x709)))+(((-1.00000000000000)*(cj6)*(r21)*(x710)))+(((cj5)*(r21)*(sj6)*(x709)))+(((-1.00000000000000)*(r20)*(sj6)*(x710))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x710)))+(cj3)+(((r22)*(sj5)*(x710)))+(((cj5)*(r21)*(sj6)*(x710)))+(((r20)*(sj6)*(x709)))+(((cj6)*(r21)*(x709))));
evalcond[2]=((cj1)+(((cj5)*(r01)*(sj6)*(x709)))+(((-1.00000000000000)*(r00)*(sj6)*(x710)))+(((r02)*(sj5)*(x709)))+(((-1.00000000000000)*(cj6)*(r01)*(x710)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x709))));
evalcond[3]=((sj1)+(((-1.00000000000000)*(cj6)*(r11)*(x710)))+(((cj5)*(r11)*(sj6)*(x709)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x709)))+(((-1.00000000000000)*(r10)*(sj6)*(x710)))+(((r12)*(sj5)*(x709))));
evalcond[4]=((((cj5)*(r01)*(sj6)*(x710)))+(((cj6)*(r01)*(x709)))+(((sj1)*(sj3)))+(((r02)*(sj5)*(x710)))+(((r00)*(sj6)*(x709)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x710))));
evalcond[5]=((((-1.00000000000000)*(cj1)*(sj3)))+(((r10)*(sj6)*(x709)))+(((cj6)*(r11)*(x709)))+(((cj5)*(r11)*(sj6)*(x710)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x710)))+(((r12)*(sj5)*(x710))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x711=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((-1.00000000000000)*(IKsin(j3))))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((sj1)*(x711)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x711)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst40;
IKReal x712=(r20)*(r20);
IKReal x713=(cj5)*(cj5);
IKReal x714=(sj6)*(sj6);
IKReal x715=(cj6)*(cj6);
IKReal x716=(r21)*(r21);
gconst40=IKsign(((((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x713)))+(((x715)*(x716)))+(((x712)*(x713)*(x715)))+(((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x713)*(x714)*(x716)))+(((x712)*(x714)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))));
IKReal x717=(r20)*(r20);
IKReal x718=(cj5)*(cj5);
IKReal x719=(sj6)*(sj6);
IKReal x720=(cj6)*(cj6);
IKReal x721=(r21)*(r21);
dummyeval[0]=((((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x718)))+(((x720)*(x721)))+(((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x718)*(x719)*(x721)))+(((x717)*(x719)))+(((x717)*(x718)*(x720)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst40)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((-1.00000000000000)*(cj3)*(cj5)*(r21)*(sj6)))+(((cj3)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj3)*(r22)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst40)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6)))))), ((gconst40)*(((((-1.00000000000000)*(cj3)*(cj5)*(r21)*(sj6)))+(((cj3)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj3)*(r22)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x722=IKsin(j4);
IKReal x723=IKcos(j4);
evalcond[0]=((((r22)*(sj5)*(x722)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x722)))+(((-1.00000000000000)*(cj6)*(r21)*(x723)))+(((cj5)*(r21)*(sj6)*(x722)))+(((-1.00000000000000)*(r20)*(sj6)*(x723))));
evalcond[1]=((((r22)*(sj5)*(x723)))+(cj3)+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x723)))+(((cj5)*(r21)*(sj6)*(x723)))+(((cj6)*(r21)*(x722)))+(((r20)*(sj6)*(x722))));
evalcond[2]=((cj1)+(((-1.00000000000000)*(r00)*(sj6)*(x723)))+(((r02)*(sj5)*(x722)))+(((-1.00000000000000)*(cj6)*(r01)*(x723)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x722)))+(((cj5)*(r01)*(sj6)*(x722))));
evalcond[3]=((sj1)+(((-1.00000000000000)*(cj6)*(r11)*(x723)))+(((cj5)*(r11)*(sj6)*(x722)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x722)))+(((r12)*(sj5)*(x722)))+(((-1.00000000000000)*(r10)*(sj6)*(x723))));
evalcond[4]=((((cj6)*(r01)*(x722)))+(((sj1)*(sj3)))+(((r02)*(sj5)*(x723)))+(((r00)*(sj6)*(x722)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x723)))+(((cj5)*(r01)*(sj6)*(x723))));
evalcond[5]=((((-1.00000000000000)*(cj1)*(sj3)))+(((r10)*(sj6)*(x722)))+(((cj6)*(r11)*(x722)))+(((cj5)*(r11)*(sj6)*(x723)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x723)))+(((r12)*(sj5)*(x723))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst39)*(((((-1.00000000000000)*(cj1)*(r20)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r21))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((-1.00000000000000)*(cj1)*(cj5)*(r21)*(sj6)))+(((cj1)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj1)*(r22)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst39)*(((((-1.00000000000000)*(cj1)*(r20)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r21)))))), ((gconst39)*(((((-1.00000000000000)*(cj1)*(cj5)*(r21)*(sj6)))+(((cj1)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj1)*(r22)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[3];
IKReal x724=IKsin(j4);
IKReal x725=IKcos(j4);
evalcond[0]=((((r22)*(sj5)*(x724)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x724)))+(((-1.00000000000000)*(cj6)*(r21)*(x725)))+(((cj5)*(r21)*(sj6)*(x724)))+(((-1.00000000000000)*(r20)*(sj6)*(x725))));
evalcond[1]=((cj1)+(((-1.00000000000000)*(r00)*(sj6)*(x725)))+(((r02)*(sj5)*(x724)))+(((-1.00000000000000)*(cj6)*(r01)*(x725)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x724)))+(((cj5)*(r01)*(sj6)*(x724))));
evalcond[2]=((sj1)+(((-1.00000000000000)*(cj6)*(r11)*(x725)))+(((cj5)*(r11)*(sj6)*(x724)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x724)))+(((r12)*(sj5)*(x724)))+(((-1.00000000000000)*(r10)*(sj6)*(x725))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj4)*(r22)*(sj5)))+(((cj4)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(r20)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(r21)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((-1.00000000000000)*(cj4)*(r22)*(sj5)))+(((cj4)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(r20)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(r21)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((-1.00000000000000)*(cj4)*(r22)*(sj5)))+(((cj4)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(r20)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(r21)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj4)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x726=IKcos(j3);
IKReal x727=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((-1.00000000000000)*(x727)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((sj1)*(x726)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x726)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(x726)+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))+(((sj1)*(x727))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj1)*(x727)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IKReal x728=((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30);
if( IKabs(((x728)*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x728)*(((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj2)))+(((cj2)*(cj6)*(r20)*(sj1)*(sj5)))+(((cj2)*(cj5)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r21)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(r11)*(sj2)*(sj5)*(sj6)))+(((cj6)*(r10)*(sj2)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x728)*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))))+IKsqr(((x728)*(((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj2)))+(((cj2)*(cj6)*(r20)*(sj1)*(sj5)))+(((cj2)*(cj5)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r21)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(r11)*(sj2)*(sj5)*(sj6)))+(((cj6)*(r10)*(sj2)*(sj5)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x728)*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))), ((x728)*(((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj2)))+(((cj2)*(cj6)*(r20)*(sj1)*(sj5)))+(((cj2)*(cj5)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r21)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(r11)*(sj2)*(sj5)*(sj6)))+(((cj6)*(r10)*(sj2)*(sj5)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x729=IKsin(j3);
IKReal x730=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x729)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj1)*(cj2)*(x729)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((sj1)*(x730)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x730)))+(((-1.00000000000000)*(cj2)*(sj1)*(x729)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst1;
IKReal x731=(r20)*(r20);
IKReal x732=(cj5)*(cj5);
IKReal x733=(sj6)*(sj6);
IKReal x734=(cj6)*(cj6);
IKReal x735=(r21)*(r21);
gconst1=IKsign(((((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((x731)*(x733)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x734)*(x735)))+(((x732)*(x733)*(x735)))+(((x731)*(x732)*(x734)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x732)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))));
IKReal x736=(r20)*(r20);
IKReal x737=(cj5)*(cj5);
IKReal x738=(sj6)*(sj6);
IKReal x739=(cj6)*(cj6);
IKReal x740=(r21)*(r21);
dummyeval[0]=((((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x736)*(x738)))+(((x736)*(x737)*(x739)))+(((x739)*(x740)))+(((x737)*(x738)*(x740)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x737)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst1)*(((((cj3)*(cj6)*(r21)*(sj2)))+(((cj2)*(r22)*(sj5)))+(((cj3)*(r20)*(sj2)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj5)*(cj6)*(r20)))+(((cj2)*(cj5)*(r21)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((-1.00000000000000)*(cj2)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r20)*(sj2)))+(((cj3)*(r22)*(sj2)*(sj5)))+(((-1.00000000000000)*(cj2)*(r20)*(sj6)))+(((cj3)*(cj5)*(r21)*(sj2)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst1)*(((((cj3)*(cj6)*(r21)*(sj2)))+(((cj2)*(r22)*(sj5)))+(((cj3)*(r20)*(sj2)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj5)*(cj6)*(r20)))+(((cj2)*(cj5)*(r21)*(sj6)))))), ((gconst1)*(((((-1.00000000000000)*(cj2)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r20)*(sj2)))+(((cj3)*(r22)*(sj2)*(sj5)))+(((-1.00000000000000)*(cj2)*(r20)*(sj6)))+(((cj3)*(cj5)*(r21)*(sj2)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x741=IKsin(j4);
IKReal x742=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x741)))+(((-1.00000000000000)*(cj2)))+(((r22)*(sj5)*(x741)))+(((cj5)*(r21)*(sj6)*(x741)))+(((-1.00000000000000)*(r20)*(sj6)*(x742)))+(((-1.00000000000000)*(cj6)*(r21)*(x742))));
evalcond[1]=((((r20)*(sj6)*(x741)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x742)))+(((cj6)*(r21)*(x741)))+(((r22)*(sj5)*(x742)))+(((cj5)*(r21)*(sj6)*(x742)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((((-1.00000000000000)*(r00)*(sj6)*(x742)))+(((-1.00000000000000)*(cj1)*(sj2)))+(((r02)*(sj5)*(x741)))+(((-1.00000000000000)*(cj6)*(r01)*(x742)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x741)))+(((cj5)*(r01)*(sj6)*(x741))));
evalcond[3]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x741)))+(((r12)*(sj5)*(x741)))+(((-1.00000000000000)*(sj1)*(sj2)))+(((cj5)*(r11)*(sj6)*(x741)))+(((-1.00000000000000)*(cj6)*(r11)*(x742)))+(((-1.00000000000000)*(r10)*(sj6)*(x742))));
evalcond[4]=((((r00)*(sj6)*(x741)))+(((r02)*(sj5)*(x742)))+(((sj1)*(sj3)))+(((cj6)*(r01)*(x741)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x742)))+(((cj1)*(cj2)*(cj3)))+(((cj5)*(r01)*(sj6)*(x742))));
evalcond[5]=((((cj6)*(r11)*(x741)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x742)))+(((-1.00000000000000)*(cj1)*(sj3)))+(((r12)*(sj5)*(x742)))+(((r10)*(sj6)*(x741)))+(((cj2)*(cj3)*(sj1)))+(((cj5)*(r11)*(sj6)*(x742))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IKReal x743=(sj1)*(sj1);
IKReal x744=(cj1)*(cj1);
if( IKabs(((((IKabs(((((cj2)*(x743)))+(((cj2)*(x744))))) != 0)?((IKReal)1/(((((cj2)*(x743)))+(((cj2)*(x744)))))):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((x744)+(x743))) != 0)?((IKReal)1/(((x744)+(x743)))):(IKReal)1.0e30))*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((cj2)*(x743)))+(((cj2)*(x744))))) != 0)?((IKReal)1/(((((cj2)*(x743)))+(((cj2)*(x744)))))):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))))+IKsqr(((((IKabs(((x744)+(x743))) != 0)?((IKReal)1/(((x744)+(x743)))):(IKReal)1.0e30))*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(((((cj2)*(x743)))+(((cj2)*(x744))))) != 0)?((IKReal)1/(((((cj2)*(x743)))+(((cj2)*(x744)))))):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))), ((((IKabs(((x744)+(x743))) != 0)?((IKReal)1/(((x744)+(x743)))):(IKReal)1.0e30))*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x745=IKsin(j3);
IKReal x746=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x745)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((sj1)*(x746)))+(((-1.00000000000000)*(cj1)*(cj2)*(x745)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj2)*(sj1)*(x745)))+(((-1.00000000000000)*(cj1)*(x746)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst1;
IKReal x747=(r20)*(r20);
IKReal x748=(cj5)*(cj5);
IKReal x749=(sj6)*(sj6);
IKReal x750=(cj6)*(cj6);
IKReal x751=(r21)*(r21);
gconst1=IKsign(((((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x748)))+(((x747)*(x749)))+(((x747)*(x748)*(x750)))+(((x748)*(x749)*(x751)))+(((x750)*(x751)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))));
IKReal x752=(r20)*(r20);
IKReal x753=(cj5)*(cj5);
IKReal x754=(sj6)*(sj6);
IKReal x755=(cj6)*(cj6);
IKReal x756=(r21)*(r21);
dummyeval[0]=((((x753)*(x754)*(x756)))+(((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x752)*(x754)))+(((x752)*(x753)*(x755)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x753)))+(((x755)*(x756)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst1)*(((((cj3)*(cj6)*(r21)*(sj2)))+(((cj2)*(r22)*(sj5)))+(((cj3)*(r20)*(sj2)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj5)*(cj6)*(r20)))+(((cj2)*(cj5)*(r21)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((-1.00000000000000)*(cj2)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r20)*(sj2)))+(((cj3)*(r22)*(sj2)*(sj5)))+(((-1.00000000000000)*(cj2)*(r20)*(sj6)))+(((cj3)*(cj5)*(r21)*(sj2)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst1)*(((((cj3)*(cj6)*(r21)*(sj2)))+(((cj2)*(r22)*(sj5)))+(((cj3)*(r20)*(sj2)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj5)*(cj6)*(r20)))+(((cj2)*(cj5)*(r21)*(sj6)))))), ((gconst1)*(((((-1.00000000000000)*(cj2)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r20)*(sj2)))+(((cj3)*(r22)*(sj2)*(sj5)))+(((-1.00000000000000)*(cj2)*(r20)*(sj6)))+(((cj3)*(cj5)*(r21)*(sj2)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x757=IKsin(j4);
IKReal x758=IKcos(j4);
evalcond[0]=((((cj5)*(r21)*(sj6)*(x757)))+(((-1.00000000000000)*(r20)*(sj6)*(x758)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x757)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj6)*(r21)*(x758)))+(((r22)*(sj5)*(x757))));
evalcond[1]=((((r20)*(sj6)*(x757)))+(((cj5)*(r21)*(sj6)*(x758)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x758)))+(((cj6)*(r21)*(x757)))+(((r22)*(sj5)*(x758)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((((-1.00000000000000)*(r00)*(sj6)*(x758)))+(((r02)*(sj5)*(x757)))+(((-1.00000000000000)*(cj1)*(sj2)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x757)))+(((-1.00000000000000)*(cj6)*(r01)*(x758)))+(((cj5)*(r01)*(sj6)*(x757))));
evalcond[3]=((((cj5)*(r11)*(sj6)*(x757)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x757)))+(((-1.00000000000000)*(r10)*(sj6)*(x758)))+(((r12)*(sj5)*(x757)))+(((-1.00000000000000)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj6)*(r11)*(x758))));
evalcond[4]=((((r02)*(sj5)*(x758)))+(((r00)*(sj6)*(x757)))+(((sj1)*(sj3)))+(((cj1)*(cj2)*(cj3)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x758)))+(((cj6)*(r01)*(x757)))+(((cj5)*(r01)*(sj6)*(x758))));
evalcond[5]=((((cj5)*(r11)*(sj6)*(x758)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x758)))+(((cj6)*(r11)*(x757)))+(((-1.00000000000000)*(cj1)*(sj3)))+(((r12)*(sj5)*(x758)))+(((cj2)*(cj3)*(sj1)))+(((r10)*(sj6)*(x757))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst0)*(((((-1.00000000000000)*(cj2)*(cj6)*(r01)))+(((cj1)*(r20)*(sj2)*(sj6)))+(((-1.00000000000000)*(cj2)*(r00)*(sj6)))+(((cj1)*(cj6)*(r21)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((-1.00000000000000)*(cj2)*(r02)*(sj5)))+(((cj2)*(cj5)*(cj6)*(r00)))+(((-1.00000000000000)*(cj1)*(cj5)*(cj6)*(r20)*(sj2)))+(((cj1)*(r22)*(sj2)*(sj5)))+(((cj1)*(cj5)*(r21)*(sj2)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj5)*(r01)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst0)*(((((-1.00000000000000)*(cj2)*(cj6)*(r01)))+(((cj1)*(r20)*(sj2)*(sj6)))+(((-1.00000000000000)*(cj2)*(r00)*(sj6)))+(((cj1)*(cj6)*(r21)*(sj2)))))), ((gconst0)*(((((-1.00000000000000)*(cj2)*(r02)*(sj5)))+(((cj2)*(cj5)*(cj6)*(r00)))+(((-1.00000000000000)*(cj1)*(cj5)*(cj6)*(r20)*(sj2)))+(((cj1)*(r22)*(sj2)*(sj5)))+(((cj1)*(cj5)*(r21)*(sj2)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj5)*(r01)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[3];
IKReal x759=IKsin(j4);
IKReal x760=IKcos(j4);
evalcond[0]=((((cj5)*(r21)*(sj6)*(x759)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x759)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj6)*(r21)*(x760)))+(((r22)*(sj5)*(x759)))+(((-1.00000000000000)*(r20)*(sj6)*(x760))));
evalcond[1]=((((r02)*(sj5)*(x759)))+(((-1.00000000000000)*(cj6)*(r01)*(x760)))+(((-1.00000000000000)*(cj1)*(sj2)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x759)))+(((-1.00000000000000)*(r00)*(sj6)*(x760)))+(((cj5)*(r01)*(sj6)*(x759))));
evalcond[2]=((((cj5)*(r11)*(sj6)*(x759)))+(((-1.00000000000000)*(cj6)*(r11)*(x760)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x759)))+(((-1.00000000000000)*(r10)*(sj6)*(x760)))+(((r12)*(sj5)*(x759)))+(((-1.00000000000000)*(sj1)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(sj2);
dummyeval[0]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[2];
IKReal x761=(sj1)*(sj1);
IKReal x762=(cj1)*(cj1);
dummyeval[0]=((((cj2)*(x761)))+(((cj2)*(x762))));
dummyeval[1]=((x761)+(x762));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=sj2;
dummyeval[1]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.400000000000000)*(sj1)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((0.400000000000000)*(cj1)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
evalcond[5]=((-1.00000000000000)+(((cj5)*(r21)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj4)))+(((-1.00000000000000)*(cj4)*(r20)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r21)))+(((r22)*(sj4)*(sj5))));
evalcond[6]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[7]=((((cj5)*(r01)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r01)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(sj4)))+(((r02)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(r00)*(sj6))));
evalcond[8]=((((-1.00000000000000)*(cj4)*(r10)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r11)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(sj4)))+(((cj5)*(r11)*(sj4)*(sj6)))+(((r12)*(sj4)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign((((sj1)*(sj1))+((cj1)*(cj1))));
dummyeval[0]=(((sj1)*(sj1))+((cj1)*(cj1)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst3)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst3)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))), ((gconst3)*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x763=IKcos(j3);
IKReal x764=IKsin(j3);
IKReal x765=((cj1)*(x763));
IKReal x766=((sj1)*(x764));
IKReal x767=((sj1)*(x763));
IKReal x768=((cj1)*(x764));
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(x768)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(x767)+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(x766)))+(((-1.00000000000000)*(x765)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))+(x765)+(x766));
evalcond[3]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(x768)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(x767)+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.400000000000000)*(sj1)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((0.400000000000000)*(cj1)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
evalcond[5]=((1.00000000000000)+(((cj5)*(r21)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj4)))+(((-1.00000000000000)*(cj4)*(r20)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r21)))+(((r22)*(sj4)*(sj5))));
evalcond[6]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[7]=((((cj5)*(r01)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r01)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(sj4)))+(((r02)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(r00)*(sj6))));
evalcond[8]=((((-1.00000000000000)*(cj4)*(r10)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r11)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(sj4)))+(((cj5)*(r11)*(sj4)*(sj6)))+(((r12)*(sj4)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((((-1.00000000000000)*((sj1)*(sj1))))+(((-1.00000000000000)*((cj1)*(cj1))))));
dummyeval[0]=((((-1.00000000000000)*((sj1)*(sj1))))+(((-1.00000000000000)*((cj1)*(cj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst4)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((-1.00000000000000)*(r01)*(sj1)*(sj5)*(sj6)))+(((cj5)*(r02)*(sj1)))+(((cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(cj5)*(r12)))+(((cj1)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r10)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst4)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))), ((gconst4)*(((((-1.00000000000000)*(r01)*(sj1)*(sj5)*(sj6)))+(((cj5)*(r02)*(sj1)))+(((cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(cj5)*(r12)))+(((cj1)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r10)*(sj5)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x769=IKsin(j3);
IKReal x770=IKcos(j3);
IKReal x771=((sj1)*(x769));
IKReal x772=((cj1)*(x770));
IKReal x773=((sj1)*(x770));
IKReal x774=((cj1)*(x769));
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(x773)+(x774)+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(x771)+(((-1.00000000000000)*(x772)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))+(x771)+(((-1.00000000000000)*(x772))));
evalcond[3]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((-1.00000000000000)*(x774)))+(((-1.00000000000000)*(x773)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j1)), 6.28318530717959)));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((-0.00200000000000000)*(cj2)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[3]=((((-0.00200000000000000)*(sj2)))+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
evalcond[4]=((((cj5)*(r21)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj4)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj4)*(r20)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r21)))+(((r22)*(sj4)*(sj5))));
evalcond[5]=((((cj5)*(r01)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r01)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(sj4)))+(((r02)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(r00)*(sj6))));
evalcond[6]=((((-1.00000000000000)*(cj4)*(r10)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r11)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(sj4)))+(((cj5)*(r11)*(sj4)*(sj6)))+(((r12)*(sj4)*(sj5)))+(((-1.00000000000000)*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-1.00000000000000)*(cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(sj6)))+(((-1.00000000000000)*(cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(cj6)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(sj6)))+(((-1.00000000000000)*(cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(cj6)*(r00)))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.00000000000000)*(cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(sj6)))+(((-1.00000000000000)*(cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(cj6)*(r00)))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x775=IKsin(j3);
IKReal x776=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x775)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(x776)+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj2)*(x775))));
evalcond[3]=((((-1.00000000000000)*(sj2)*(x776)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))+(x775));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((cj2)*(x776)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j1)), 6.28318530717959)));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((-0.00200000000000000)*(cj2)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((0.00200000000000000)*(sj2)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
evalcond[4]=((((cj5)*(r21)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj4)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj4)*(r20)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r21)))+(((r22)*(sj4)*(sj5))));
evalcond[5]=((((cj5)*(r01)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r01)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(sj4)))+(((r02)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(r00)*(sj6))));
evalcond[6]=((sj2)+(((-1.00000000000000)*(cj4)*(r10)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r11)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(sj4)))+(((cj5)*(r11)*(sj4)*(sj6)))+(((r12)*(sj4)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x777=IKsin(j3);
IKReal x778=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x777)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(x778)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((cj2)*(x777)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(sj2)*(x778)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))+(((-1.00000000000000)*(x777))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5)))+(((-1.00000000000000)*(cj2)*(x778))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j2)), 6.28318530717959)));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.400000000000000)*(sj1)))+(((-0.00200000000000000)*(cj1)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[3]=((((-0.00200000000000000)*(sj1)))+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((0.400000000000000)*(cj1)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
evalcond[4]=((((cj5)*(r21)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj4)))+(((-1.00000000000000)*(cj4)*(r20)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r21)))+(((r22)*(sj4)*(sj5))));
evalcond[5]=((((cj5)*(r01)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj1)))+(((-1.00000000000000)*(cj4)*(cj6)*(r01)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(sj4)))+(((r02)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(r00)*(sj6))));
evalcond[6]=((((-1.00000000000000)*(cj4)*(r10)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r11)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(sj4)))+(((cj5)*(r11)*(sj4)*(sj6)))+(((r12)*(sj4)*(sj5)))+(((-1.00000000000000)*(sj1))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x779=IKcos(j3);
IKReal x780=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(x780)+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((sj1)*(x779)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x779)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((-1.00000000000000)*(x779)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((sj1)*(x780)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj1)*(x780)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j2)), 6.28318530717959)));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((((0.00200000000000000)*(cj1)))+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.400000000000000)*(sj1)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((0.400000000000000)*(cj1)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((0.00200000000000000)*(sj1)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
evalcond[4]=((((cj5)*(r21)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj4)))+(((-1.00000000000000)*(cj4)*(r20)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r21)))+(((r22)*(sj4)*(sj5))));
evalcond[5]=((((cj5)*(r01)*(sj4)*(sj6)))+(cj1)+(((-1.00000000000000)*(cj4)*(cj6)*(r01)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(sj4)))+(((r02)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(r00)*(sj6))));
evalcond[6]=((sj1)+(((-1.00000000000000)*(cj4)*(r10)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r11)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(sj4)))+(((cj5)*(r11)*(sj4)*(sj6)))+(((r12)*(sj4)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj4)*(r22)*(sj5)))+(((cj4)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(r20)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(r21)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((-1.00000000000000)*(cj4)*(r22)*(sj5)))+(((cj4)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(r20)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(r21)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((-1.00000000000000)*(cj4)*(r22)*(sj5)))+(((cj4)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(r20)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(r21)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj4)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x781=IKcos(j3);
IKReal x782=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((-1.00000000000000)*(x782)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((sj1)*(x781)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x781)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(x781)+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((sj1)*(x782)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj1)*(x782)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IKReal x783=((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30);
if( IKabs(((x783)*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x783)*(((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj2)))+(((cj2)*(cj6)*(r20)*(sj1)*(sj5)))+(((cj2)*(cj5)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r21)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(r11)*(sj2)*(sj5)*(sj6)))+(((cj6)*(r10)*(sj2)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x783)*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))))+IKsqr(((x783)*(((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj2)))+(((cj2)*(cj6)*(r20)*(sj1)*(sj5)))+(((cj2)*(cj5)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r21)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(r11)*(sj2)*(sj5)*(sj6)))+(((cj6)*(r10)*(sj2)*(sj5)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x783)*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))), ((x783)*(((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj2)))+(((cj2)*(cj6)*(r20)*(sj1)*(sj5)))+(((cj2)*(cj5)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r21)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(r11)*(sj2)*(sj5)*(sj6)))+(((cj6)*(r10)*(sj2)*(sj5)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x784=IKsin(j3);
IKReal x785=IKcos(j3);
evalcond[0]=((((sj2)*(x784)))+(((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((sj1)*(x785)))+(((-1.00000000000000)*(cj1)*(cj2)*(x784)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x785)))+(((-1.00000000000000)*(cj2)*(sj1)*(x784)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((-1.00000000000000)*(sj2)*(x785)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((sj1)*(x784)))+(((cj4)*(r02)*(sj5)))+(((cj1)*(cj2)*(x785)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))));
evalcond[5]=((((cj2)*(sj1)*(x785)))+(((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj1)*(x784)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IKReal x786=(sj1)*(sj1);
IKReal x787=(cj1)*(cj1);
if( IKabs(((((IKabs(((((cj2)*(x786)))+(((cj2)*(x787))))) != 0)?((IKReal)1/(((((cj2)*(x786)))+(((cj2)*(x787)))))):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((x786)+(x787))) != 0)?((IKReal)1/(((x786)+(x787)))):(IKReal)1.0e30))*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((cj2)*(x786)))+(((cj2)*(x787))))) != 0)?((IKReal)1/(((((cj2)*(x786)))+(((cj2)*(x787)))))):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))))+IKsqr(((((IKabs(((x786)+(x787))) != 0)?((IKReal)1/(((x786)+(x787)))):(IKReal)1.0e30))*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(((((cj2)*(x786)))+(((cj2)*(x787))))) != 0)?((IKReal)1/(((((cj2)*(x786)))+(((cj2)*(x787)))))):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))), ((((IKabs(((x786)+(x787))) != 0)?((IKReal)1/(((x786)+(x787)))):(IKReal)1.0e30))*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x788=IKsin(j3);
IKReal x789=IKcos(j3);
evalcond[0]=((((sj2)*(x788)))+(((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((sj1)*(x789)))+(((-1.00000000000000)*(cj1)*(cj2)*(x788)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x789)))+(((-1.00000000000000)*(cj2)*(sj1)*(x788)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((-1.00000000000000)*(sj2)*(x789)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((sj1)*(x788)))+(((cj4)*(r02)*(sj5)))+(((cj1)*(cj2)*(x789)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))));
evalcond[5]=((((cj2)*(sj1)*(x789)))+(((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj1)*(x788)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst2)*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst2)*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))), ((gconst2)*(((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x790=IKsin(j3);
IKReal x791=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))+(((sj2)*(x790))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((sj1)*(x791)))+(((-1.00000000000000)*(cj1)*(cj2)*(x790)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x791)))+(((-1.00000000000000)*(cj2)*(sj1)*(x790)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6)))+(((-1.00000000000000)*(sj2)*(x791))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((sj1)*(x790)))+(((cj4)*(r02)*(sj5)))+(((cj1)*(cj2)*(x791)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))));
evalcond[5]=((((cj2)*(sj1)*(x791)))+(((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj1)*(x790)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((-200.000000000000)*(sj1)))+(((195.000000000000)*(cj6)*(r00)*(sj5)))+(((195.000000000000)*(cj5)*(r02)))+(((-500.000000000000)*(px)))+(((0.250000000000000)*(cj6)*(r01)))+(((0.250000000000000)*(r00)*(sj6)))+(((-195.000000000000)*(r01)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((195.000000000000)*(cj5)*(r22)))+(((0.250000000000000)*(r20)*(sj6)))+(((-195.000000000000)*(r21)*(sj5)*(sj6)))+(((-500.000000000000)*(pz)))+(((195.000000000000)*(cj6)*(r20)*(sj5)))+(((0.250000000000000)*(cj6)*(r21))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((-200.000000000000)*(sj1)))+(((195.000000000000)*(cj6)*(r00)*(sj5)))+(((195.000000000000)*(cj5)*(r02)))+(((-500.000000000000)*(px)))+(((0.250000000000000)*(cj6)*(r01)))+(((0.250000000000000)*(r00)*(sj6)))+(((-195.000000000000)*(r01)*(sj5)*(sj6)))))))+IKsqr(((((195.000000000000)*(cj5)*(r22)))+(((0.250000000000000)*(r20)*(sj6)))+(((-195.000000000000)*(r21)*(sj5)*(sj6)))+(((-500.000000000000)*(pz)))+(((195.000000000000)*(cj6)*(r20)*(sj5)))+(((0.250000000000000)*(cj6)*(r21)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((-200.000000000000)*(sj1)))+(((195.000000000000)*(cj6)*(r00)*(sj5)))+(((195.000000000000)*(cj5)*(r02)))+(((-500.000000000000)*(px)))+(((0.250000000000000)*(cj6)*(r01)))+(((0.250000000000000)*(r00)*(sj6)))+(((-195.000000000000)*(r01)*(sj5)*(sj6)))))), ((((195.000000000000)*(cj5)*(r22)))+(((0.250000000000000)*(r20)*(sj6)))+(((-195.000000000000)*(r21)*(sj5)*(sj6)))+(((-500.000000000000)*(pz)))+(((195.000000000000)*(cj6)*(r20)*(sj5)))+(((0.250000000000000)*(cj6)*(r21)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IKReal evalcond[3];
IKReal x792=IKsin(j2);
evalcond[0]=((((-0.00200000000000000)*(IKcos(j2))))+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r01)))+(((-0.00200000000000000)*(cj1)*(x792)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.400000000000000)*(sj1)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[2]=((((-0.00200000000000000)*(sj1)*(x792)))+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((0.400000000000000)*(cj1)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst0;
IKReal x793=(cj6)*(cj6);
IKReal x794=(sj6)*(sj6);
gconst0=IKsign(((((cj5)*(r01)*(r20)*(x794)))+(((cj5)*(r01)*(r20)*(x793)))+(((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x794)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x793)))));
IKReal x795=(cj6)*(cj6);
IKReal x796=(sj6)*(sj6);
dummyeval[0]=((((cj5)*(r01)*(r20)*(x795)))+(((cj5)*(r01)*(r20)*(x796)))+(((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x796)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x795))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[2];
IKReal x797=(sj1)*(sj1);
IKReal x798=(cj1)*(cj1);
dummyeval[0]=((((cj2)*(x798)))+(((cj2)*(x797))));
dummyeval[1]=((x797)+(x798));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=sj2;
dummyeval[1]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.400000000000000)*(sj1)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((0.400000000000000)*(cj1)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst5;
gconst5=IKsign((((sj1)*(sj1))+((cj1)*(cj1))));
dummyeval[0]=(((sj1)*(sj1))+((cj1)*(cj1)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst6;
IKReal x799=(r20)*(r20);
IKReal x800=(cj5)*(cj5);
IKReal x801=(sj6)*(sj6);
IKReal x802=(cj6)*(cj6);
IKReal x803=(r21)*(r21);
gconst6=IKsign(((((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x800)*(x801)*(x803)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x800)))+(((x799)*(x800)*(x802)))+(((x799)*(x801)))+(((x802)*(x803)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))));
IKReal x804=(r20)*(r20);
IKReal x805=(cj5)*(cj5);
IKReal x806=(sj6)*(sj6);
IKReal x807=(cj6)*(cj6);
IKReal x808=(r21)*(r21);
dummyeval[0]=((((x804)*(x806)))+(((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x805)*(x806)*(x808)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x805)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((x804)*(x805)*(x807)))+(((x807)*(x808))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst6)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst6)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)))))), ((gconst6)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x809=IKsin(j4);
IKReal x810=IKcos(j4);
evalcond[0]=((-1.00000000000000)+(((-1.00000000000000)*(r20)*(sj6)*(x810)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x809)))+(((r22)*(sj5)*(x809)))+(((-1.00000000000000)*(cj6)*(r21)*(x810)))+(((cj5)*(r21)*(sj6)*(x809))));
evalcond[1]=((((r22)*(sj5)*(x810)))+(((cj6)*(r21)*(x809)))+(((cj5)*(r21)*(sj6)*(x810)))+(((r20)*(sj6)*(x809)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x810))));
evalcond[2]=((((-1.00000000000000)*(r00)*(sj6)*(x810)))+(((cj5)*(r01)*(sj6)*(x809)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x809)))+(((r02)*(sj5)*(x809)))+(((-1.00000000000000)*(cj6)*(r01)*(x810))));
evalcond[3]=((((cj5)*(r11)*(sj6)*(x809)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x809)))+(((-1.00000000000000)*(cj6)*(r11)*(x810)))+(((-1.00000000000000)*(r10)*(sj6)*(x810)))+(((r12)*(sj5)*(x809))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst7;
gconst7=IKsign((((sj1)*(sj1))+((cj1)*(cj1))));
dummyeval[0]=(((sj1)*(sj1))+((cj1)*(cj1)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst7)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst7)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))), ((gconst7)*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x811=IKcos(j3);
IKReal x812=IKsin(j3);
IKReal x813=((cj1)*(x811));
IKReal x814=((sj1)*(x812));
IKReal x815=((sj1)*(x811));
IKReal x816=((cj1)*(x812));
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(x816)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(x815)+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(x813)))+(((-1.00000000000000)*(x814)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))+(x814)+(x813));
evalcond[3]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(x816)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(x815)+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst5)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst5)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))), ((gconst5)*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
IKReal x817=IKcos(j3);
IKReal x818=IKsin(j3);
evalcond[0]=((((sj1)*(x817)))+(((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(x818)))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x817)))+(((-1.00000000000000)*(sj1)*(x818)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst8;
IKReal x819=(r20)*(r20);
IKReal x820=(cj5)*(cj5);
IKReal x821=(sj6)*(sj6);
IKReal x822=(cj6)*(cj6);
IKReal x823=(r21)*(r21);
gconst8=IKsign(((((x820)*(x821)*(x823)))+(((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x819)*(x821)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x820)))+(((x819)*(x820)*(x822)))+(((x822)*(x823)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))));
IKReal x824=(r20)*(r20);
IKReal x825=(cj5)*(cj5);
IKReal x826=(sj6)*(sj6);
IKReal x827=(cj6)*(cj6);
IKReal x828=(r21)*(r21);
dummyeval[0]=((((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x825)*(x826)*(x828)))+(((x824)*(x826)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x825)))+(((x824)*(x825)*(x827)))+(((x827)*(x828)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst8)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst8)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)))))), ((gconst8)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x829=IKsin(j4);
IKReal x830=IKcos(j4);
evalcond[0]=((-1.00000000000000)+(((cj5)*(r21)*(sj6)*(x829)))+(((-1.00000000000000)*(cj6)*(r21)*(x830)))+(((-1.00000000000000)*(r20)*(sj6)*(x830)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x829)))+(((r22)*(sj5)*(x829))));
evalcond[1]=((((r20)*(sj6)*(x829)))+(((cj5)*(r21)*(sj6)*(x830)))+(((cj6)*(r21)*(x829)))+(((r22)*(sj5)*(x830)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x830))));
evalcond[2]=((((-1.00000000000000)*(r00)*(sj6)*(x830)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x829)))+(((-1.00000000000000)*(cj6)*(r01)*(x830)))+(((r02)*(sj5)*(x829)))+(((cj5)*(r01)*(sj6)*(x829))));
evalcond[3]=((((r12)*(sj5)*(x829)))+(((-1.00000000000000)*(r10)*(sj6)*(x830)))+(((-1.00000000000000)*(cj6)*(r11)*(x830)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x829)))+(((cj5)*(r11)*(sj6)*(x829))));
evalcond[4]=((((cj6)*(r01)*(x829)))+(((r02)*(sj5)*(x830)))+(((sj1)*(sj3)))+(((cj1)*(cj3)))+(((r00)*(sj6)*(x829)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x830)))+(((cj5)*(r01)*(sj6)*(x830))));
evalcond[5]=((((r12)*(sj5)*(x830)))+(((-1.00000000000000)*(cj1)*(sj3)))+(((cj5)*(r11)*(sj6)*(x830)))+(((cj6)*(r11)*(x829)))+(((r10)*(sj6)*(x829)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x830)))+(((cj3)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.400000000000000)*(sj1)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((0.400000000000000)*(cj1)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst9;
gconst9=IKsign(((((-1.00000000000000)*((sj1)*(sj1))))+(((-1.00000000000000)*((cj1)*(cj1))))));
dummyeval[0]=((((-1.00000000000000)*((sj1)*(sj1))))+(((-1.00000000000000)*((cj1)*(cj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst10;
IKReal x831=(cj5)*(cj5);
IKReal x832=(r20)*(r20);
IKReal x833=(sj6)*(sj6);
IKReal x834=(cj6)*(cj6);
IKReal x835=(r21)*(r21);
gconst10=IKsign(((((-1.00000000000000)*(x832)*(x833)))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x831)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((-2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(x831)*(x833)*(x835)))+(((-1.00000000000000)*((r22)*(r22))*((sj5)*(sj5))))+(((-1.00000000000000)*(x831)*(x832)*(x834)))+(((-1.00000000000000)*(x834)*(x835)))+(((2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))));
IKReal x836=(cj5)*(cj5);
IKReal x837=(r20)*(r20);
IKReal x838=(sj6)*(sj6);
IKReal x839=(cj6)*(cj6);
IKReal x840=(r21)*(r21);
dummyeval[0]=((((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x836)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((-1.00000000000000)*(x837)*(x838)))+(((-2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((-1.00000000000000)*(x839)*(x840)))+(((-1.00000000000000)*(x836)*(x838)*(x840)))+(((-1.00000000000000)*(x836)*(x837)*(x839))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst10)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst10)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)))))), ((gconst10)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[4];
IKReal x841=IKsin(j4);
IKReal x842=IKcos(j4);
evalcond[0]=((1.00000000000000)+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x841)))+(((-1.00000000000000)*(cj6)*(r21)*(x842)))+(((-1.00000000000000)*(r20)*(sj6)*(x842)))+(((cj5)*(r21)*(sj6)*(x841)))+(((r22)*(sj5)*(x841))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x842)))+(((r20)*(sj6)*(x841)))+(((cj6)*(r21)*(x841)))+(((cj5)*(r21)*(sj6)*(x842)))+(((r22)*(sj5)*(x842))));
evalcond[2]=((((-1.00000000000000)*(r00)*(sj6)*(x842)))+(((r02)*(sj5)*(x841)))+(((-1.00000000000000)*(cj6)*(r01)*(x842)))+(((cj5)*(r01)*(sj6)*(x841)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x841))));
evalcond[3]=((((-1.00000000000000)*(cj6)*(r11)*(x842)))+(((-1.00000000000000)*(r10)*(sj6)*(x842)))+(((r12)*(sj5)*(x841)))+(((cj5)*(r11)*(sj6)*(x841)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x841))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst11;
gconst11=IKsign(((((-1.00000000000000)*((sj1)*(sj1))))+(((-1.00000000000000)*((cj1)*(cj1))))));
dummyeval[0]=((((-1.00000000000000)*((sj1)*(sj1))))+(((-1.00000000000000)*((cj1)*(cj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst11)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((-1.00000000000000)*(r01)*(sj1)*(sj5)*(sj6)))+(((cj5)*(r02)*(sj1)))+(((cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(cj5)*(r12)))+(((cj1)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r10)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst11)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))), ((gconst11)*(((((-1.00000000000000)*(r01)*(sj1)*(sj5)*(sj6)))+(((cj5)*(r02)*(sj1)))+(((cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(cj5)*(r12)))+(((cj1)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r10)*(sj5)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x843=IKsin(j3);
IKReal x844=IKcos(j3);
IKReal x845=((sj1)*(x843));
IKReal x846=((cj1)*(x844));
IKReal x847=((sj1)*(x844));
IKReal x848=((cj1)*(x843));
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(x847)+(x848)+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(x846)))+(x845)+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(x846)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))+(x845));
evalcond[3]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(x847)))+(((-1.00000000000000)*(x848)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst9)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((-1.00000000000000)*(r01)*(sj1)*(sj5)*(sj6)))+(((cj5)*(r02)*(sj1)))+(((cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(cj5)*(r12)))+(((cj1)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r10)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst9)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))), ((gconst9)*(((((-1.00000000000000)*(r01)*(sj1)*(sj5)*(sj6)))+(((cj5)*(r02)*(sj1)))+(((cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(cj5)*(r12)))+(((cj1)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r10)*(sj5)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
IKReal x849=IKsin(j3);
IKReal x850=IKcos(j3);
evalcond[0]=((((cj1)*(x849)))+(((cj6)*(r00)*(sj5)))+(((sj1)*(x850)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x850)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))+(((sj1)*(x849))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst12;
IKReal x851=(cj5)*(cj5);
IKReal x852=(r20)*(r20);
IKReal x853=(sj6)*(sj6);
IKReal x854=(cj6)*(cj6);
IKReal x855=(r21)*(r21);
gconst12=IKsign(((((-1.00000000000000)*(x851)*(x853)*(x855)))+(((-1.00000000000000)*(x852)*(x853)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((-2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((-1.00000000000000)*(x854)*(x855)))+(((-1.00000000000000)*(x851)*(x852)*(x854)))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x851)))));
IKReal x856=(cj5)*(cj5);
IKReal x857=(r20)*(r20);
IKReal x858=(sj6)*(sj6);
IKReal x859=(cj6)*(cj6);
IKReal x860=(r21)*(r21);
dummyeval[0]=((((-1.00000000000000)*(x856)*(x858)*(x860)))+(((-1.00000000000000)*(x856)*(x857)*(x859)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((-2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((-1.00000000000000)*(x859)*(x860)))+(((-1.00000000000000)*(x857)*(x858)))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x856))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst12)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst12)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)))))), ((gconst12)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x861=IKsin(j4);
IKReal x862=IKcos(j4);
evalcond[0]=((1.00000000000000)+(((-1.00000000000000)*(cj6)*(r21)*(x862)))+(((r22)*(sj5)*(x861)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x861)))+(((-1.00000000000000)*(r20)*(sj6)*(x862)))+(((cj5)*(r21)*(sj6)*(x861))));
evalcond[1]=((((r22)*(sj5)*(x862)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x862)))+(((r20)*(sj6)*(x861)))+(((cj5)*(r21)*(sj6)*(x862)))+(((cj6)*(r21)*(x861))));
evalcond[2]=((((r02)*(sj5)*(x861)))+(((-1.00000000000000)*(cj6)*(r01)*(x862)))+(((cj5)*(r01)*(sj6)*(x861)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x861)))+(((-1.00000000000000)*(r00)*(sj6)*(x862))));
evalcond[3]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x861)))+(((-1.00000000000000)*(r10)*(sj6)*(x862)))+(((cj5)*(r11)*(sj6)*(x861)))+(((r12)*(sj5)*(x861)))+(((-1.00000000000000)*(cj6)*(r11)*(x862))));
evalcond[4]=((((r02)*(sj5)*(x862)))+(((-1.00000000000000)*(cj1)*(cj3)))+(((r00)*(sj6)*(x861)))+(((cj5)*(r01)*(sj6)*(x862)))+(((sj1)*(sj3)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x862)))+(((cj6)*(r01)*(x861))));
evalcond[5]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x862)))+(((cj6)*(r11)*(x861)))+(((-1.00000000000000)*(cj1)*(sj3)))+(((cj5)*(r11)*(sj6)*(x862)))+(((r12)*(sj5)*(x862)))+(((r10)*(sj6)*(x861)))+(((-1.00000000000000)*(cj3)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j1)), 6.28318530717959)));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((-0.00200000000000000)*(cj2)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[3]=((((-0.00200000000000000)*(sj2)))+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst13;
IKReal x863=(cj6)*(cj6);
IKReal x864=(sj6)*(sj6);
gconst13=IKsign(((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x863)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x864)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x864)))+(((cj5)*(r01)*(r20)*(x863)))));
IKReal x865=(cj6)*(cj6);
IKReal x866=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x865)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x866)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x866)))+(((cj5)*(r01)*(r20)*(x865))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(IKcos(j3))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(IKsin(j3))))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst16;
IKReal x867=(cj6)*(cj6);
IKReal x868=(sj6)*(sj6);
gconst16=IKsign(((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x867)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x868)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x868)))+(((cj5)*(r01)*(r20)*(x867)))));
IKReal x869=(cj6)*(cj6);
IKReal x870=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x870)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x869)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x870)))+(((cj5)*(r01)*(r20)*(x869))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst16)*(((((cj5)*(r21)*(sj3)*(sj6)))+(((r22)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((-1.00000000000000)*(r20)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst16)*(((((cj5)*(r21)*(sj3)*(sj6)))+(((r22)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj3)))))), ((gconst16)*(((((-1.00000000000000)*(r20)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj3)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x871=IKsin(j4);
IKReal x872=IKcos(j4);
evalcond[0]=((-1.00000000000000)+(((r22)*(sj5)*(x871)))+(((-1.00000000000000)*(cj6)*(r21)*(x872)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x871)))+(((-1.00000000000000)*(r20)*(sj6)*(x872)))+(((cj5)*(r21)*(sj6)*(x871))));
evalcond[1]=((((r22)*(sj5)*(x872)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x872)))+(((r20)*(sj6)*(x871)))+(((cj5)*(r21)*(sj6)*(x872)))+(((cj6)*(r21)*(x871))));
evalcond[2]=((((-1.00000000000000)*(cj6)*(r01)*(x872)))+(((cj5)*(r01)*(sj6)*(x871)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x871)))+(((-1.00000000000000)*(r00)*(sj6)*(x872)))+(((r02)*(sj5)*(x871))));
evalcond[3]=((((cj5)*(r11)*(sj6)*(x871)))+(((-1.00000000000000)*(r10)*(sj6)*(x872)))+(((r12)*(sj5)*(x871)))+(((-1.00000000000000)*(cj6)*(r11)*(x872)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x871))));
evalcond[4]=((sj3)+(((cj5)*(r01)*(sj6)*(x872)))+(((r00)*(sj6)*(x871)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x872)))+(((cj6)*(r01)*(x871)))+(((r02)*(sj5)*(x872))));
evalcond[5]=((cj3)+(((cj6)*(r11)*(x871)))+(((cj5)*(r11)*(sj6)*(x872)))+(((r12)*(sj5)*(x872)))+(((r10)*(sj6)*(x871)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x872))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(IKcos(j3))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(IKsin(j3))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst18;
IKReal x873=(cj6)*(cj6);
IKReal x874=(sj6)*(sj6);
gconst18=IKsign(((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x874)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x873)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x873)))+(((cj5)*(r01)*(r20)*(x874)))));
IKReal x875=(cj6)*(cj6);
IKReal x876=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x876)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x875)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x876)))+(((cj5)*(r01)*(r20)*(x875))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst18)*(((((cj5)*(r21)*(sj3)*(sj6)))+(((r22)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((-1.00000000000000)*(r20)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst18)*(((((cj5)*(r21)*(sj3)*(sj6)))+(((r22)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj3)))))), ((gconst18)*(((((-1.00000000000000)*(r20)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj3)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x877=IKsin(j4);
IKReal x878=IKcos(j4);
evalcond[0]=((1.00000000000000)+(((r22)*(sj5)*(x877)))+(((-1.00000000000000)*(cj6)*(r21)*(x878)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x877)))+(((-1.00000000000000)*(r20)*(sj6)*(x878)))+(((cj5)*(r21)*(sj6)*(x877))));
evalcond[1]=((((r22)*(sj5)*(x878)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x878)))+(((r20)*(sj6)*(x877)))+(((cj5)*(r21)*(sj6)*(x878)))+(((cj6)*(r21)*(x877))));
evalcond[2]=((((-1.00000000000000)*(cj6)*(r01)*(x878)))+(((cj5)*(r01)*(sj6)*(x877)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x877)))+(((-1.00000000000000)*(r00)*(sj6)*(x878)))+(((r02)*(sj5)*(x877))));
evalcond[3]=((((cj5)*(r11)*(sj6)*(x877)))+(((-1.00000000000000)*(r10)*(sj6)*(x878)))+(((r12)*(sj5)*(x877)))+(((-1.00000000000000)*(cj6)*(r11)*(x878)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x877))));
evalcond[4]=((sj3)+(((cj5)*(r01)*(sj6)*(x878)))+(((r00)*(sj6)*(x877)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x878)))+(((cj6)*(r01)*(x877)))+(((r02)*(sj5)*(x878))));
evalcond[5]=((((cj6)*(r11)*(x877)))+(((cj5)*(r11)*(sj6)*(x878)))+(((r12)*(sj5)*(x878)))+(((-1.00000000000000)*(cj3)))+(((r10)*(sj6)*(x877)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x878))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(IKsin(j3))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(IKcos(j3))+(((cj5)*(r02))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst20;
IKReal x879=(sj6)*(sj6);
IKReal x880=(cj6)*(cj6);
gconst20=IKsign(((((-1.00000000000000)*(r00)*(r12)*(sj5)*(sj6)))+(((cj6)*(r02)*(r11)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(r11)*(x880)))+(((cj5)*(r01)*(r10)*(x879)))+(((-1.00000000000000)*(cj5)*(r00)*(r11)*(x879)))+(((-1.00000000000000)*(cj6)*(r01)*(r12)*(sj5)))+(((r02)*(r10)*(sj5)*(sj6)))+(((cj5)*(r01)*(r10)*(x880)))));
IKReal x881=(sj6)*(sj6);
IKReal x882=(cj6)*(cj6);
dummyeval[0]=((((-1.00000000000000)*(r00)*(r12)*(sj5)*(sj6)))+(((cj6)*(r02)*(r11)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(r11)*(x881)))+(((-1.00000000000000)*(cj5)*(r00)*(r11)*(x882)))+(((-1.00000000000000)*(cj6)*(r01)*(r12)*(sj5)))+(((r02)*(r10)*(sj5)*(sj6)))+(((cj5)*(r01)*(r10)*(x882)))+(((cj5)*(r01)*(r10)*(x881))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst20)*(((((r12)*(sj3)*(sj5)))+(((cj5)*(r11)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((-1.00000000000000)*(cj6)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst20)*(((((r12)*(sj3)*(sj5)))+(((cj5)*(r11)*(sj3)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(sj3)))))), ((gconst20)*(((((-1.00000000000000)*(cj6)*(r11)*(sj3)))+(((-1.00000000000000)*(r10)*(sj3)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x883=IKsin(j4);
IKReal x884=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(r20)*(sj6)*(x884)))+(((cj5)*(r21)*(sj6)*(x883)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x883)))+(((-1.00000000000000)*(cj6)*(r21)*(x884)))+(((r22)*(sj5)*(x883))));
evalcond[1]=((((cj5)*(r21)*(sj6)*(x884)))+(((-1.00000000000000)*(cj3)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x884)))+(((cj6)*(r21)*(x883)))+(((r20)*(sj6)*(x883)))+(((r22)*(sj5)*(x884))));
evalcond[2]=((((cj5)*(r01)*(sj6)*(x883)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x883)))+(((-1.00000000000000)*(r00)*(sj6)*(x884)))+(((r02)*(sj5)*(x883)))+(((-1.00000000000000)*(cj6)*(r01)*(x884))));
evalcond[3]=((-1.00000000000000)+(((r12)*(sj5)*(x883)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x883)))+(((-1.00000000000000)*(r10)*(sj6)*(x884)))+(((cj5)*(r11)*(sj6)*(x883)))+(((-1.00000000000000)*(cj6)*(r11)*(x884))));
evalcond[4]=((((cj5)*(r01)*(sj6)*(x884)))+(sj3)+(((cj6)*(r01)*(x883)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x884)))+(((r02)*(sj5)*(x884)))+(((r00)*(sj6)*(x883))));
evalcond[5]=((((r12)*(sj5)*(x884)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x884)))+(((cj5)*(r11)*(sj6)*(x884)))+(((cj6)*(r11)*(x883)))+(((r10)*(sj6)*(x883))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(((-1.00000000000000)*(IKsin(j3))))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(IKcos(j3))+(((cj5)*(r02))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst22;
IKReal x885=(cj6)*(cj6);
IKReal x886=(sj6)*(sj6);
gconst22=IKsign(((((cj6)*(r11)*(r22)*(sj5)))+(((-1.00000000000000)*(r12)*(r20)*(sj5)*(sj6)))+(((r10)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x885)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x886)))+(((cj5)*(r10)*(r21)*(x886)))+(((cj5)*(r10)*(r21)*(x885)))));
IKReal x887=(cj6)*(cj6);
IKReal x888=(sj6)*(sj6);
dummyeval[0]=((((cj6)*(r11)*(r22)*(sj5)))+(((-1.00000000000000)*(r12)*(r20)*(sj5)*(sj6)))+(((r10)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x888)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x887)))+(((cj5)*(r10)*(r21)*(x888)))+(((cj5)*(r10)*(r21)*(x887))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst22)*(((((cj3)*(r12)*(sj5)))+(((cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst22)*(((((-1.00000000000000)*(cj3)*(cj6)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst22)*(((((cj3)*(r12)*(sj5)))+(((cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r10)))))), ((gconst22)*(((((-1.00000000000000)*(cj3)*(cj6)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x889=IKsin(j4);
IKReal x890=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(r20)*(sj6)*(x890)))+(((cj5)*(r21)*(sj6)*(x889)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x889)))+(((-1.00000000000000)*(cj6)*(r21)*(x890)))+(((r22)*(sj5)*(x889))));
evalcond[1]=((((r22)*(sj5)*(x890)))+(cj3)+(((cj5)*(r21)*(sj6)*(x890)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x890)))+(((cj6)*(r21)*(x889)))+(((r20)*(sj6)*(x889))));
evalcond[2]=((((cj5)*(r01)*(sj6)*(x889)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x889)))+(((-1.00000000000000)*(r00)*(sj6)*(x890)))+(((r02)*(sj5)*(x889)))+(((-1.00000000000000)*(cj6)*(r01)*(x890))));
evalcond[3]=((1.00000000000000)+(((r12)*(sj5)*(x889)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x889)))+(((cj5)*(r11)*(sj6)*(x889)))+(((-1.00000000000000)*(cj6)*(r11)*(x890)))+(((-1.00000000000000)*(r10)*(sj6)*(x890))));
evalcond[4]=((sj3)+(((cj6)*(r01)*(x889)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x890)))+(((r02)*(sj5)*(x890)))+(((r00)*(sj6)*(x889)))+(((cj5)*(r01)*(sj6)*(x890))));
evalcond[5]=((((r12)*(sj5)*(x890)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x890)))+(((cj5)*(r11)*(sj6)*(x890)))+(((cj6)*(r11)*(x889)))+(((r10)*(sj6)*(x889))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x891=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x891)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(IKcos(j3))+(((cj5)*(r02))));
evalcond[2]=((((-1.00000000000000)*(cj2)*(x891)))+(((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst14;
IKReal x892=(cj6)*(cj6);
IKReal x893=(cj5)*(cj5);
IKReal x894=(r01)*(r01);
IKReal x895=(r00)*(r00);
IKReal x896=(sj6)*(sj6);
gconst14=IKsign(((((x892)*(x893)*(x895)))+(((x893)*(x894)*(x896)))+((((r02)*(r02))*((sj5)*(sj5))))+(((x895)*(x896)))+(((2.00000000000000)*(cj5)*(r01)*(r02)*(sj5)*(sj6)))+(((-2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)*(x893)))+(((x892)*(x894)))+(((2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)))+(((-2.00000000000000)*(cj5)*(cj6)*(r00)*(r02)*(sj5)))));
IKReal x897=(cj6)*(cj6);
IKReal x898=(cj5)*(cj5);
IKReal x899=(r01)*(r01);
IKReal x900=(r00)*(r00);
IKReal x901=(sj6)*(sj6);
dummyeval[0]=(((((r02)*(r02))*((sj5)*(sj5))))+(((x897)*(x898)*(x900)))+(((2.00000000000000)*(cj5)*(r01)*(r02)*(sj5)*(sj6)))+(((-2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)*(x898)))+(((x900)*(x901)))+(((x897)*(x899)))+(((x898)*(x899)*(x901)))+(((2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)))+(((-2.00000000000000)*(cj5)*(cj6)*(r00)*(r02)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst14)*(((((-1.00000000000000)*(cj6)*(r01)*(sj3)))+(((-1.00000000000000)*(r00)*(sj3)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((-1.00000000000000)*(cj5)*(r01)*(sj3)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj3)))+(((-1.00000000000000)*(r02)*(sj3)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst14)*(((((-1.00000000000000)*(cj6)*(r01)*(sj3)))+(((-1.00000000000000)*(r00)*(sj3)*(sj6)))))), ((gconst14)*(((((-1.00000000000000)*(cj5)*(r01)*(sj3)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj3)))+(((-1.00000000000000)*(r02)*(sj3)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x902=IKsin(j4);
IKReal x903=IKcos(j4);
evalcond[0]=((((r22)*(sj5)*(x902)))+(((-1.00000000000000)*(r20)*(sj6)*(x903)))+(((-1.00000000000000)*(cj2)))+(((cj5)*(r21)*(sj6)*(x902)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x902)))+(((-1.00000000000000)*(cj6)*(r21)*(x903))));
evalcond[1]=((((cj6)*(r21)*(x902)))+(((r22)*(sj5)*(x903)))+(((cj5)*(r21)*(sj6)*(x903)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x903)))+(((r20)*(sj6)*(x902)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((((-1.00000000000000)*(cj6)*(r01)*(x903)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x902)))+(((r02)*(sj5)*(x902)))+(((-1.00000000000000)*(r00)*(sj6)*(x903)))+(((cj5)*(r01)*(sj6)*(x902))));
evalcond[3]=((((-1.00000000000000)*(r10)*(sj6)*(x903)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x902)))+(((-1.00000000000000)*(cj6)*(r11)*(x903)))+(((r12)*(sj5)*(x902)))+(((-1.00000000000000)*(sj2)))+(((cj5)*(r11)*(sj6)*(x902))));
evalcond[4]=((sj3)+(((cj6)*(r01)*(x902)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x903)))+(((r02)*(sj5)*(x903)))+(((r00)*(sj6)*(x902)))+(((cj5)*(r01)*(sj6)*(x903))));
evalcond[5]=((((cj2)*(cj3)))+(((cj6)*(r11)*(x902)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x903)))+(((r12)*(sj5)*(x903)))+(((r10)*(sj6)*(x902)))+(((cj5)*(r11)*(sj6)*(x903))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x904=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x904)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(IKcos(j3))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj2)*(x904)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst14;
IKReal x905=(cj6)*(cj6);
IKReal x906=(cj5)*(cj5);
IKReal x907=(r01)*(r01);
IKReal x908=(r00)*(r00);
IKReal x909=(sj6)*(sj6);
gconst14=IKsign(((((x905)*(x907)))+((((r02)*(r02))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(r01)*(r02)*(sj5)*(sj6)))+(((x906)*(x907)*(x909)))+(((x905)*(x906)*(x908)))+(((x908)*(x909)))+(((2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)))+(((-2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)*(x906)))+(((-2.00000000000000)*(cj5)*(cj6)*(r00)*(r02)*(sj5)))));
IKReal x910=(cj6)*(cj6);
IKReal x911=(cj5)*(cj5);
IKReal x912=(r01)*(r01);
IKReal x913=(r00)*(r00);
IKReal x914=(sj6)*(sj6);
dummyeval[0]=((((x910)*(x912)))+(((-2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)*(x911)))+((((r02)*(r02))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(r01)*(r02)*(sj5)*(sj6)))+(((x910)*(x911)*(x913)))+(((x913)*(x914)))+(((2.00000000000000)*(cj6)*(r00)*(r01)*(sj6)))+(((x911)*(x912)*(x914)))+(((-2.00000000000000)*(cj5)*(cj6)*(r00)*(r02)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst14)*(((((-1.00000000000000)*(cj6)*(r01)*(sj3)))+(((-1.00000000000000)*(r00)*(sj3)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((-1.00000000000000)*(cj5)*(r01)*(sj3)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj3)))+(((-1.00000000000000)*(r02)*(sj3)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst14)*(((((-1.00000000000000)*(cj6)*(r01)*(sj3)))+(((-1.00000000000000)*(r00)*(sj3)*(sj6)))))), ((gconst14)*(((((-1.00000000000000)*(cj5)*(r01)*(sj3)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj3)))+(((-1.00000000000000)*(r02)*(sj3)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x915=IKsin(j4);
IKReal x916=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj2)))+(((r22)*(sj5)*(x915)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x915)))+(((-1.00000000000000)*(cj6)*(r21)*(x916)))+(((-1.00000000000000)*(r20)*(sj6)*(x916)))+(((cj5)*(r21)*(sj6)*(x915))));
evalcond[1]=((((cj6)*(r21)*(x915)))+(((r22)*(sj5)*(x916)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x916)))+(((r20)*(sj6)*(x915)))+(((cj5)*(r21)*(sj6)*(x916)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((((-1.00000000000000)*(cj6)*(r01)*(x916)))+(((r02)*(sj5)*(x915)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x915)))+(((-1.00000000000000)*(r00)*(sj6)*(x916)))+(((cj5)*(r01)*(sj6)*(x915))));
evalcond[3]=((((r12)*(sj5)*(x915)))+(((cj5)*(r11)*(sj6)*(x915)))+(((-1.00000000000000)*(r10)*(sj6)*(x916)))+(((-1.00000000000000)*(cj6)*(r11)*(x916)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x915)))+(((-1.00000000000000)*(sj2))));
evalcond[4]=((sj3)+(((r02)*(sj5)*(x916)))+(((cj6)*(r01)*(x915)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x916)))+(((r00)*(sj6)*(x915)))+(((cj5)*(r01)*(sj6)*(x916))));
evalcond[5]=((((r12)*(sj5)*(x916)))+(((r10)*(sj6)*(x915)))+(((cj5)*(r11)*(sj6)*(x916)))+(((cj2)*(cj3)))+(((cj6)*(r11)*(x915)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x916))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst13)*(((((-1.00000000000000)*(cj2)*(cj6)*(r01)))+(((-1.00000000000000)*(cj2)*(r00)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((-1.00000000000000)*(cj2)*(r02)*(sj5)))+(((cj2)*(cj5)*(cj6)*(r00)))+(((-1.00000000000000)*(cj2)*(cj5)*(r01)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst13)*(((((-1.00000000000000)*(cj2)*(cj6)*(r01)))+(((-1.00000000000000)*(cj2)*(r00)*(sj6)))))), ((gconst13)*(((((-1.00000000000000)*(cj2)*(r02)*(sj5)))+(((cj2)*(cj5)*(cj6)*(r00)))+(((-1.00000000000000)*(cj2)*(cj5)*(r01)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[3];
IKReal x917=IKsin(j4);
IKReal x918=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj2)))+(((r22)*(sj5)*(x917)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x917)))+(((-1.00000000000000)*(cj6)*(r21)*(x918)))+(((-1.00000000000000)*(r20)*(sj6)*(x918)))+(((cj5)*(r21)*(sj6)*(x917))));
evalcond[1]=((((-1.00000000000000)*(cj6)*(r01)*(x918)))+(((r02)*(sj5)*(x917)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x917)))+(((-1.00000000000000)*(r00)*(sj6)*(x918)))+(((cj5)*(r01)*(sj6)*(x917))));
evalcond[2]=((((r12)*(sj5)*(x917)))+(((cj5)*(r11)*(sj6)*(x917)))+(((-1.00000000000000)*(r10)*(sj6)*(x918)))+(((-1.00000000000000)*(cj6)*(r11)*(x918)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x917)))+(((-1.00000000000000)*(sj2))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-1.00000000000000)*(cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(sj6)))+(((-1.00000000000000)*(cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(cj6)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(sj6)))+(((-1.00000000000000)*(cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(cj6)*(r00)))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.00000000000000)*(cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(sj6)))+(((-1.00000000000000)*(cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(cj6)*(r00)))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x919=IKsin(j3);
IKReal x920=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x919)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(x920)+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj2)*(x919))));
evalcond[3]=((((-1.00000000000000)*(sj2)*(x920)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))+(x919));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((cj2)*(x920)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j1)), 6.28318530717959)));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((-0.00200000000000000)*(cj2)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((0.00200000000000000)*(sj2)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst23;
IKReal x921=(cj6)*(cj6);
IKReal x922=(sj6)*(sj6);
gconst23=IKsign(((((cj5)*(r00)*(r11)*(x921)))+(((cj5)*(r00)*(r11)*(x922)))+(((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x922)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x921)))+(((r00)*(r12)*(sj5)*(sj6)))));
IKReal x923=(cj6)*(cj6);
IKReal x924=(sj6)*(sj6);
dummyeval[0]=((((cj5)*(r00)*(r11)*(x923)))+(((cj5)*(r00)*(r11)*(x924)))+(((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x923)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x924)))+(((r00)*(r12)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(IKsin(j3))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKcos(j3))))+(((cj5)*(r02))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst26;
IKReal x925=(cj6)*(cj6);
IKReal x926=(sj6)*(sj6);
gconst26=IKsign(((((cj5)*(r11)*(r20)*(x926)))+(((cj5)*(r11)*(r20)*(x925)))+(((-1.00000000000000)*(r10)*(r22)*(sj5)*(sj6)))+(((r12)*(r20)*(sj5)*(sj6)))+(((cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x925)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x926)))+(((-1.00000000000000)*(cj6)*(r11)*(r22)*(sj5)))));
IKReal x927=(cj6)*(cj6);
IKReal x928=(sj6)*(sj6);
dummyeval[0]=((((cj5)*(r11)*(r20)*(x927)))+(((cj5)*(r11)*(r20)*(x928)))+(((-1.00000000000000)*(r10)*(r22)*(sj5)*(sj6)))+(((r12)*(r20)*(sj5)*(sj6)))+(((cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x927)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x928)))+(((-1.00000000000000)*(cj6)*(r11)*(r22)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst26)*(((((cj3)*(r12)*(sj5)))+(((cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((-1.00000000000000)*(cj3)*(cj6)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst26)*(((((cj3)*(r12)*(sj5)))+(((cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r10)))))), ((gconst26)*(((((-1.00000000000000)*(cj3)*(cj6)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x929=IKsin(j4);
IKReal x930=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj6)*(r21)*(x930)))+(((-1.00000000000000)*(r20)*(sj6)*(x930)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x929)))+(((cj5)*(r21)*(sj6)*(x929)))+(((r22)*(sj5)*(x929))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x930)))+(((cj5)*(r21)*(sj6)*(x930)))+(((-1.00000000000000)*(cj3)))+(((r20)*(sj6)*(x929)))+(((cj6)*(r21)*(x929)))+(((r22)*(sj5)*(x930))));
evalcond[2]=((((cj5)*(r01)*(sj6)*(x929)))+(((-1.00000000000000)*(r00)*(sj6)*(x930)))+(((-1.00000000000000)*(cj6)*(r01)*(x930)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x929)))+(((r02)*(sj5)*(x929))));
evalcond[3]=((1.00000000000000)+(((r12)*(sj5)*(x929)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x929)))+(((-1.00000000000000)*(cj6)*(r11)*(x930)))+(((cj5)*(r11)*(sj6)*(x929)))+(((-1.00000000000000)*(r10)*(sj6)*(x930))));
evalcond[4]=((((cj6)*(r01)*(x929)))+(((cj5)*(r01)*(sj6)*(x930)))+(((r00)*(sj6)*(x929)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x930)))+(((r02)*(sj5)*(x930)))+(((-1.00000000000000)*(sj3))));
evalcond[5]=((((r12)*(sj5)*(x930)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x930)))+(((r10)*(sj6)*(x929)))+(((cj5)*(r11)*(sj6)*(x930)))+(((cj6)*(r11)*(x929))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(((-1.00000000000000)*(IKsin(j3))))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKcos(j3))))+(((cj5)*(r02))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst28;
IKReal x931=(cj6)*(cj6);
IKReal x932=(sj6)*(sj6);
gconst28=IKsign(((((cj6)*(r11)*(r22)*(sj5)))+(((cj5)*(r10)*(r21)*(x932)))+(((cj5)*(r10)*(r21)*(x931)))+(((-1.00000000000000)*(r12)*(r20)*(sj5)*(sj6)))+(((r10)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x932)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x931)))+(((-1.00000000000000)*(cj6)*(r12)*(r21)*(sj5)))));
IKReal x933=(cj6)*(cj6);
IKReal x934=(sj6)*(sj6);
dummyeval[0]=((((cj6)*(r11)*(r22)*(sj5)))+(((cj5)*(r10)*(r21)*(x933)))+(((cj5)*(r10)*(r21)*(x934)))+(((-1.00000000000000)*(r12)*(r20)*(sj5)*(sj6)))+(((r10)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x933)))+(((-1.00000000000000)*(cj5)*(r11)*(r20)*(x934)))+(((-1.00000000000000)*(cj6)*(r12)*(r21)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst28)*(((((cj3)*(r12)*(sj5)))+(((cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r10))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((-1.00000000000000)*(cj3)*(cj6)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst28)*(((((cj3)*(r12)*(sj5)))+(((cj3)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r10)))))), ((gconst28)*(((((-1.00000000000000)*(cj3)*(cj6)*(r11)))+(((-1.00000000000000)*(cj3)*(r10)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x935=IKsin(j4);
IKReal x936=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj6)*(r21)*(x936)))+(((-1.00000000000000)*(r20)*(sj6)*(x936)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x935)))+(((cj5)*(r21)*(sj6)*(x935)))+(((r22)*(sj5)*(x935))));
evalcond[1]=((cj3)+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x936)))+(((cj5)*(r21)*(sj6)*(x936)))+(((r20)*(sj6)*(x935)))+(((cj6)*(r21)*(x935)))+(((r22)*(sj5)*(x936))));
evalcond[2]=((((-1.00000000000000)*(r00)*(sj6)*(x936)))+(((cj5)*(r01)*(sj6)*(x935)))+(((-1.00000000000000)*(cj6)*(r01)*(x936)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x935)))+(((r02)*(sj5)*(x935))));
evalcond[3]=((-1.00000000000000)+(((r12)*(sj5)*(x935)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x935)))+(((-1.00000000000000)*(cj6)*(r11)*(x936)))+(((cj5)*(r11)*(sj6)*(x935)))+(((-1.00000000000000)*(r10)*(sj6)*(x936))));
evalcond[4]=((((cj6)*(r01)*(x935)))+(((cj5)*(r01)*(sj6)*(x936)))+(((r00)*(sj6)*(x935)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x936)))+(((r02)*(sj5)*(x936)))+(((-1.00000000000000)*(sj3))));
evalcond[5]=((((r12)*(sj5)*(x936)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x936)))+(((r10)*(sj6)*(x935)))+(((cj5)*(r11)*(sj6)*(x936)))+(((cj6)*(r11)*(x935))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKcos(j3))))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(IKsin(j3))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst30;
IKReal x937=(r20)*(r20);
IKReal x938=(cj5)*(cj5);
IKReal x939=(sj6)*(sj6);
IKReal x940=(cj6)*(cj6);
IKReal x941=(r21)*(r21);
gconst30=IKsign(((((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x937)*(x939)))+(((x937)*(x938)*(x940)))+(((x938)*(x939)*(x941)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x938)))+(((x940)*(x941)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))));
IKReal x942=(r20)*(r20);
IKReal x943=(cj5)*(cj5);
IKReal x944=(sj6)*(sj6);
IKReal x945=(cj6)*(cj6);
IKReal x946=(r21)*(r21);
dummyeval[0]=((((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x945)*(x946)))+(((x943)*(x944)*(x946)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x943)))+(((x942)*(x944)))+(((x942)*(x943)*(x945)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst30)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst30)*(((((cj5)*(r21)*(sj6)))+(((r22)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)))))), ((gconst30)*(((((-1.00000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x947=IKsin(j4);
IKReal x948=IKcos(j4);
evalcond[0]=((-1.00000000000000)+(((r22)*(sj5)*(x947)))+(((-1.00000000000000)*(cj6)*(r21)*(x948)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x947)))+(((-1.00000000000000)*(r20)*(sj6)*(x948)))+(((cj5)*(r21)*(sj6)*(x947))));
evalcond[1]=((((r22)*(sj5)*(x948)))+(((r20)*(sj6)*(x947)))+(((cj6)*(r21)*(x947)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x948)))+(((cj5)*(r21)*(sj6)*(x948))));
evalcond[2]=((((cj5)*(r01)*(sj6)*(x947)))+(((-1.00000000000000)*(cj6)*(r01)*(x948)))+(((r02)*(sj5)*(x947)))+(((-1.00000000000000)*(r00)*(sj6)*(x948)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x947))));
evalcond[3]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x947)))+(((-1.00000000000000)*(r10)*(sj6)*(x948)))+(((cj5)*(r11)*(sj6)*(x947)))+(((r12)*(sj5)*(x947)))+(((-1.00000000000000)*(cj6)*(r11)*(x948))));
evalcond[4]=((((cj6)*(r01)*(x947)))+(((cj5)*(r01)*(sj6)*(x948)))+(((r02)*(sj5)*(x948)))+(((r00)*(sj6)*(x947)))+(((-1.00000000000000)*(sj3)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x948))));
evalcond[5]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x948)))+(((cj5)*(r11)*(sj6)*(x948)))+(((-1.00000000000000)*(cj3)))+(((r10)*(sj6)*(x947)))+(((cj6)*(r11)*(x947)))+(((r12)*(sj5)*(x948))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKcos(j3))))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(IKsin(j3))))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst32;
IKReal x949=(cj6)*(cj6);
IKReal x950=(sj6)*(sj6);
gconst32=IKsign(((((-1.00000000000000)*(r10)*(r22)*(sj5)*(sj6)))+(((r12)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x950)))+(((cj6)*(r12)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x949)))+(((cj5)*(r11)*(r20)*(x950)))+(((-1.00000000000000)*(cj6)*(r11)*(r22)*(sj5)))+(((cj5)*(r11)*(r20)*(x949)))));
IKReal x951=(cj6)*(cj6);
IKReal x952=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(r10)*(r22)*(sj5)*(sj6)))+(((r12)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x952)))+(((-1.00000000000000)*(cj5)*(r10)*(r21)*(x951)))+(((cj6)*(r12)*(r21)*(sj5)))+(((cj5)*(r11)*(r20)*(x951)))+(((cj5)*(r11)*(r20)*(x952)))+(((-1.00000000000000)*(cj6)*(r11)*(r22)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst32)*(((((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r20)))+(((cj3)*(r22)*(sj5)))+(((cj3)*(cj5)*(r21)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst32)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst32)*(((((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r20)))+(((cj3)*(r22)*(sj5)))+(((cj3)*(cj5)*(r21)*(sj6)))))), ((gconst32)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x953=IKsin(j4);
IKReal x954=IKcos(j4);
evalcond[0]=((1.00000000000000)+(((r22)*(sj5)*(x953)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x953)))+(((-1.00000000000000)*(r20)*(sj6)*(x954)))+(((cj5)*(r21)*(sj6)*(x953)))+(((-1.00000000000000)*(cj6)*(r21)*(x954))));
evalcond[1]=((((r20)*(sj6)*(x953)))+(((r22)*(sj5)*(x954)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x954)))+(((cj5)*(r21)*(sj6)*(x954)))+(((cj6)*(r21)*(x953))));
evalcond[2]=((((cj5)*(r01)*(sj6)*(x953)))+(((-1.00000000000000)*(r00)*(sj6)*(x954)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x953)))+(((-1.00000000000000)*(cj6)*(r01)*(x954)))+(((r02)*(sj5)*(x953))));
evalcond[3]=((((-1.00000000000000)*(r10)*(sj6)*(x954)))+(((cj5)*(r11)*(sj6)*(x953)))+(((r12)*(sj5)*(x953)))+(((-1.00000000000000)*(cj6)*(r11)*(x954)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x953))));
evalcond[4]=((((cj5)*(r01)*(sj6)*(x954)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x954)))+(((cj6)*(r01)*(x953)))+(((r00)*(sj6)*(x953)))+(((r02)*(sj5)*(x954)))+(((-1.00000000000000)*(sj3))));
evalcond[5]=((cj3)+(((cj5)*(r11)*(sj6)*(x954)))+(((r10)*(sj6)*(x953)))+(((r12)*(sj5)*(x954)))+(((cj6)*(r11)*(x953)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x954))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(cj2) != 0)?((IKReal)1/(cj2)):(IKReal)1.0e30))*(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x955=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x955)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKcos(j3))))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((cj2)*(x955)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst24;
IKReal x956=(cj6)*(cj6);
IKReal x957=(sj6)*(sj6);
gconst24=IKsign(((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((cj5)*(r00)*(r11)*(x956)))+(((cj5)*(r00)*(r11)*(x957)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x957)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x956)))+(((r00)*(r12)*(sj5)*(sj6)))));
IKReal x958=(cj6)*(cj6);
IKReal x959=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((cj5)*(r00)*(r11)*(x958)))+(((cj5)*(r00)*(r11)*(x959)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x959)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x958)))+(((r00)*(r12)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst24)*(((((-1.00000000000000)*(cj6)*(r01)*(sj2)))+(((-1.00000000000000)*(r00)*(sj2)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((-1.00000000000000)*(cj5)*(r01)*(sj2)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj2)))+(((-1.00000000000000)*(r02)*(sj2)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst24)*(((((-1.00000000000000)*(cj6)*(r01)*(sj2)))+(((-1.00000000000000)*(r00)*(sj2)*(sj6)))))), ((gconst24)*(((((-1.00000000000000)*(cj5)*(r01)*(sj2)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj2)))+(((-1.00000000000000)*(r02)*(sj2)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x960=IKsin(j4);
IKReal x961=IKcos(j4);
evalcond[0]=((((r22)*(sj5)*(x960)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x960)))+(((-1.00000000000000)*(r20)*(sj6)*(x961)))+(((cj5)*(r21)*(sj6)*(x960)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj6)*(r21)*(x961))));
evalcond[1]=((((r22)*(sj5)*(x961)))+(((r20)*(sj6)*(x960)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x961)))+(((cj5)*(r21)*(sj6)*(x961)))+(((cj6)*(r21)*(x960)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((((cj5)*(r01)*(sj6)*(x960)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x960)))+(((-1.00000000000000)*(cj6)*(r01)*(x961)))+(((r02)*(sj5)*(x960)))+(((-1.00000000000000)*(r00)*(sj6)*(x961))));
evalcond[3]=((sj2)+(((cj5)*(r11)*(sj6)*(x960)))+(((r12)*(sj5)*(x960)))+(((-1.00000000000000)*(cj6)*(r11)*(x961)))+(((-1.00000000000000)*(r10)*(sj6)*(x961)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x960))));
evalcond[4]=((((cj5)*(r01)*(sj6)*(x961)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x961)))+(((cj6)*(r01)*(x960)))+(((r00)*(sj6)*(x960)))+(((r02)*(sj5)*(x961)))+(((-1.00000000000000)*(sj3))));
evalcond[5]=((((cj5)*(r11)*(sj6)*(x961)))+(((r10)*(sj6)*(x960)))+(((-1.00000000000000)*(cj2)*(cj3)))+(((r12)*(sj5)*(x961)))+(((cj6)*(r11)*(x960)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x961))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30))*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x962=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((sj2)*(x962)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(IKcos(j3))))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((cj2)*(x962)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst24;
IKReal x963=(cj6)*(cj6);
IKReal x964=(sj6)*(sj6);
gconst24=IKsign(((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((cj6)*(r01)*(r12)*(sj5)))+(((cj5)*(r00)*(r11)*(x964)))+(((cj5)*(r00)*(r11)*(x963)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x963)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x964)))+(((r00)*(r12)*(sj5)*(sj6)))));
IKReal x965=(cj6)*(cj6);
IKReal x966=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((cj6)*(r01)*(r12)*(sj5)))+(((cj5)*(r00)*(r11)*(x966)))+(((cj5)*(r00)*(r11)*(x965)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x966)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x965)))+(((r00)*(r12)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst24)*(((((-1.00000000000000)*(cj6)*(r01)*(sj2)))+(((-1.00000000000000)*(r00)*(sj2)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((-1.00000000000000)*(cj5)*(r01)*(sj2)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj2)))+(((-1.00000000000000)*(r02)*(sj2)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst24)*(((((-1.00000000000000)*(cj6)*(r01)*(sj2)))+(((-1.00000000000000)*(r00)*(sj2)*(sj6)))))), ((gconst24)*(((((-1.00000000000000)*(cj5)*(r01)*(sj2)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj2)))+(((-1.00000000000000)*(r02)*(sj2)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x967=IKsin(j4);
IKReal x968=IKcos(j4);
evalcond[0]=((((r22)*(sj5)*(x967)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x967)))+(((-1.00000000000000)*(r20)*(sj6)*(x968)))+(((cj5)*(r21)*(sj6)*(x967)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj6)*(r21)*(x968))));
evalcond[1]=((((r22)*(sj5)*(x968)))+(((r20)*(sj6)*(x967)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x968)))+(((cj5)*(r21)*(sj6)*(x968)))+(((cj6)*(r21)*(x967)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((((cj5)*(r01)*(sj6)*(x967)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x967)))+(((-1.00000000000000)*(cj6)*(r01)*(x968)))+(((r02)*(sj5)*(x967)))+(((-1.00000000000000)*(r00)*(sj6)*(x968))));
evalcond[3]=((sj2)+(((cj5)*(r11)*(sj6)*(x967)))+(((r12)*(sj5)*(x967)))+(((-1.00000000000000)*(cj6)*(r11)*(x968)))+(((-1.00000000000000)*(r10)*(sj6)*(x968)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x967))));
evalcond[4]=((((cj5)*(r01)*(sj6)*(x968)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x968)))+(((cj6)*(r01)*(x967)))+(((r00)*(sj6)*(x967)))+(((r02)*(sj5)*(x968)))+(((-1.00000000000000)*(sj3))));
evalcond[5]=((((cj5)*(r11)*(sj6)*(x968)))+(((r10)*(sj6)*(x967)))+(((-1.00000000000000)*(cj2)*(cj3)))+(((r12)*(sj5)*(x968)))+(((cj6)*(r11)*(x967)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x968))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst23)*(((((-1.00000000000000)*(cj6)*(r01)*(sj2)))+(((-1.00000000000000)*(r00)*(sj2)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((-1.00000000000000)*(cj5)*(r01)*(sj2)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj2)))+(((-1.00000000000000)*(r02)*(sj2)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst23)*(((((-1.00000000000000)*(cj6)*(r01)*(sj2)))+(((-1.00000000000000)*(r00)*(sj2)*(sj6)))))), ((gconst23)*(((((-1.00000000000000)*(cj5)*(r01)*(sj2)*(sj6)))+(((cj5)*(cj6)*(r00)*(sj2)))+(((-1.00000000000000)*(r02)*(sj2)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[3];
IKReal x969=IKsin(j4);
IKReal x970=IKcos(j4);
evalcond[0]=((((r22)*(sj5)*(x969)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x969)))+(((cj5)*(r21)*(sj6)*(x969)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj6)*(r21)*(x970)))+(((-1.00000000000000)*(r20)*(sj6)*(x970))));
evalcond[1]=((((cj5)*(r01)*(sj6)*(x969)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x969)))+(((-1.00000000000000)*(cj6)*(r01)*(x970)))+(((r02)*(sj5)*(x969)))+(((-1.00000000000000)*(r00)*(sj6)*(x970))));
evalcond[2]=((sj2)+(((-1.00000000000000)*(r10)*(sj6)*(x970)))+(((cj5)*(r11)*(sj6)*(x969)))+(((r12)*(sj5)*(x969)))+(((-1.00000000000000)*(cj6)*(r11)*(x970)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x969))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x971=IKsin(j3);
IKReal x972=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((sj2)*(x971)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(x972)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((cj2)*(x971)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((-1.00000000000000)*(sj2)*(x972)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))+(((-1.00000000000000)*(x971))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((-1.00000000000000)*(cj2)*(x972)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j2)), 6.28318530717959)));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.400000000000000)*(sj1)))+(((-0.00200000000000000)*(cj1)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[3]=((((-0.00200000000000000)*(sj1)))+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((0.400000000000000)*(cj1)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst33;
IKReal x973=(cj6)*(cj6);
IKReal x974=(sj6)*(sj6);
gconst33=IKsign(((((cj6)*(r01)*(r22)*(sj5)))+(((-1.00000000000000)*(cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x973)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x974)))+(((-1.00000000000000)*(r02)*(r20)*(sj5)*(sj6)))+(((r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r00)*(r21)*(x973)))+(((cj5)*(r00)*(r21)*(x974)))));
IKReal x975=(cj6)*(cj6);
IKReal x976=(sj6)*(sj6);
dummyeval[0]=((((cj6)*(r01)*(r22)*(sj5)))+(((-1.00000000000000)*(cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x976)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x975)))+(((-1.00000000000000)*(r02)*(r20)*(sj5)*(sj6)))+(((r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r00)*(r21)*(x976)))+(((cj5)*(r00)*(r21)*(x975))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j1)), 6.28318530717959)));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(IKsin(j3))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(IKcos(j3))))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst36;
IKReal x977=(cj6)*(cj6);
IKReal x978=(sj6)*(sj6);
gconst36=IKsign(((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x978)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x977)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x977)))+(((cj5)*(r01)*(r20)*(x978)))));
IKReal x979=(cj6)*(cj6);
IKReal x980=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x979)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x980)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x979)))+(((cj5)*(r01)*(r20)*(x980))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst36)*(((((cj3)*(cj5)*(r01)*(sj6)))+(((cj3)*(r02)*(sj5)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((((-1.00000000000000)*(cj3)*(r00)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj6)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst36)*(((((cj3)*(cj5)*(r01)*(sj6)))+(((cj3)*(r02)*(sj5)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r00)))))), ((gconst36)*(((((-1.00000000000000)*(cj3)*(r00)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj6)*(r01)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x981=IKsin(j4);
IKReal x982=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x981)))+(((r22)*(sj5)*(x981)))+(((-1.00000000000000)*(cj6)*(r21)*(x982)))+(((-1.00000000000000)*(r20)*(sj6)*(x982)))+(((cj5)*(r21)*(sj6)*(x981))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x982)))+(((r20)*(sj6)*(x981)))+(((r22)*(sj5)*(x982)))+(((-1.00000000000000)*(cj3)))+(((cj5)*(r21)*(sj6)*(x982)))+(((cj6)*(r21)*(x981))));
evalcond[2]=((-1.00000000000000)+(((cj5)*(r01)*(sj6)*(x981)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x981)))+(((-1.00000000000000)*(cj6)*(r01)*(x982)))+(((r02)*(sj5)*(x981)))+(((-1.00000000000000)*(r00)*(sj6)*(x982))));
evalcond[3]=((((-1.00000000000000)*(r10)*(sj6)*(x982)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x981)))+(((cj5)*(r11)*(sj6)*(x981)))+(((r12)*(sj5)*(x981)))+(((-1.00000000000000)*(cj6)*(r11)*(x982))));
evalcond[4]=((((cj5)*(r01)*(sj6)*(x982)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x982)))+(((r00)*(sj6)*(x981)))+(((cj6)*(r01)*(x981)))+(((r02)*(sj5)*(x982))));
evalcond[5]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x982)))+(((r10)*(sj6)*(x981)))+(((cj5)*(r11)*(sj6)*(x982)))+(((r12)*(sj5)*(x982)))+(((cj6)*(r11)*(x981)))+(((-1.00000000000000)*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j1)), 6.28318530717959)));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(IKsin(j3))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(IKcos(j3))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst38;
IKReal x983=(cj6)*(cj6);
IKReal x984=(sj6)*(sj6);
gconst38=IKsign(((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((cj5)*(r00)*(r11)*(x984)))+(((cj5)*(r00)*(r11)*(x983)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x984)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x983)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((r00)*(r12)*(sj5)*(sj6)))));
IKReal x985=(cj6)*(cj6);
IKReal x986=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r02)*(r11)*(sj5)))+(((cj5)*(r00)*(r11)*(x986)))+(((cj5)*(r00)*(r11)*(x985)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x985)))+(((-1.00000000000000)*(cj5)*(r01)*(r10)*(x986)))+(((cj6)*(r01)*(r12)*(sj5)))+(((-1.00000000000000)*(r02)*(r10)*(sj5)*(sj6)))+(((r00)*(r12)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst38)*(((((r02)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(sj3)))+(((cj5)*(r01)*(sj3)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((((-1.00000000000000)*(cj6)*(r01)*(sj3)))+(((-1.00000000000000)*(r00)*(sj3)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst38)*(((((r02)*(sj3)*(sj5)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(sj3)))+(((cj5)*(r01)*(sj3)*(sj6)))))), ((gconst38)*(((((-1.00000000000000)*(cj6)*(r01)*(sj3)))+(((-1.00000000000000)*(r00)*(sj3)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x987=IKsin(j4);
IKReal x988=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x987)))+(((r22)*(sj5)*(x987)))+(((-1.00000000000000)*(cj6)*(r21)*(x988)))+(((-1.00000000000000)*(r20)*(sj6)*(x988)))+(((cj5)*(r21)*(sj6)*(x987))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x988)))+(((r20)*(sj6)*(x987)))+(((r22)*(sj5)*(x988)))+(((-1.00000000000000)*(cj3)))+(((cj5)*(r21)*(sj6)*(x988)))+(((cj6)*(r21)*(x987))));
evalcond[2]=((1.00000000000000)+(((cj5)*(r01)*(sj6)*(x987)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x987)))+(((-1.00000000000000)*(cj6)*(r01)*(x988)))+(((r02)*(sj5)*(x987)))+(((-1.00000000000000)*(r00)*(sj6)*(x988))));
evalcond[3]=((((-1.00000000000000)*(r10)*(sj6)*(x988)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x987)))+(((cj5)*(r11)*(sj6)*(x987)))+(((r12)*(sj5)*(x987)))+(((-1.00000000000000)*(cj6)*(r11)*(x988))));
evalcond[4]=((((cj5)*(r01)*(sj6)*(x988)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x988)))+(((r00)*(sj6)*(x987)))+(((cj6)*(r01)*(x987)))+(((r02)*(sj5)*(x988))));
evalcond[5]=((sj3)+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x988)))+(((r10)*(sj6)*(x987)))+(((cj5)*(r11)*(sj6)*(x988)))+(((r12)*(sj5)*(x988)))+(((cj6)*(r11)*(x987))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x989=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(IKsin(j3))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((sj1)*(x989)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((-1.00000000000000)*(cj1)*(x989)))+(((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst34;
IKReal x990=(cj5)*(cj5);
IKReal x991=(r20)*(r20);
IKReal x992=(sj6)*(sj6);
IKReal x993=(cj6)*(cj6);
IKReal x994=(r21)*(r21);
gconst34=IKsign(((((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x990)))+(((-1.00000000000000)*(x991)*(x992)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((-1.00000000000000)*(x990)*(x992)*(x994)))+(((-1.00000000000000)*(x990)*(x991)*(x993)))+(((-2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((-1.00000000000000)*(x993)*(x994)))));
IKReal x995=(cj5)*(cj5);
IKReal x996=(r20)*(r20);
IKReal x997=(sj6)*(sj6);
IKReal x998=(cj6)*(cj6);
IKReal x999=(r21)*(r21);
dummyeval[0]=((((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x995)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((-1.00000000000000)*(x996)*(x997)))+(((-1.00000000000000)*(x995)*(x997)*(x999)))+(((-2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((-1.00000000000000)*(x998)*(x999)))+(((-1.00000000000000)*(x995)*(x996)*(x998))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst34)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((-1.00000000000000)*(cj3)*(cj5)*(r21)*(sj6)))+(((cj3)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj3)*(r22)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst34)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6)))))), ((gconst34)*(((((-1.00000000000000)*(cj3)*(cj5)*(r21)*(sj6)))+(((cj3)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj3)*(r22)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x1000=IKsin(j4);
IKReal x1001=IKcos(j4);
evalcond[0]=((((cj5)*(r21)*(sj6)*(x1000)))+(((r22)*(sj5)*(x1000)))+(((-1.00000000000000)*(r20)*(sj6)*(x1001)))+(((-1.00000000000000)*(cj6)*(r21)*(x1001)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1000))));
evalcond[1]=((((cj5)*(r21)*(sj6)*(x1001)))+(((r22)*(sj5)*(x1001)))+(((cj6)*(r21)*(x1000)))+(((r20)*(sj6)*(x1000)))+(((-1.00000000000000)*(cj3)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1001))));
evalcond[2]=((((-1.00000000000000)*(cj6)*(r01)*(x1001)))+(((-1.00000000000000)*(r00)*(sj6)*(x1001)))+(((-1.00000000000000)*(cj1)))+(((r02)*(sj5)*(x1000)))+(((cj5)*(r01)*(sj6)*(x1000)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1000))));
evalcond[3]=((((-1.00000000000000)*(cj6)*(r11)*(x1001)))+(((r12)*(sj5)*(x1000)))+(((-1.00000000000000)*(r10)*(sj6)*(x1001)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1000)))+(((cj5)*(r11)*(sj6)*(x1000)))+(((-1.00000000000000)*(sj1))));
evalcond[4]=((((r00)*(sj6)*(x1000)))+(((sj1)*(sj3)))+(((r02)*(sj5)*(x1001)))+(((cj5)*(r01)*(sj6)*(x1001)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1001)))+(((cj6)*(r01)*(x1000))));
evalcond[5]=((((r10)*(sj6)*(x1000)))+(((r12)*(sj5)*(x1001)))+(((-1.00000000000000)*(cj1)*(sj3)))+(((cj6)*(r11)*(x1000)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1001)))+(((cj5)*(r11)*(sj6)*(x1001))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x1002=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(IKsin(j3))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((sj1)*(x1002)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x1002)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst34;
IKReal x1003=(cj5)*(cj5);
IKReal x1004=(r20)*(r20);
IKReal x1005=(sj6)*(sj6);
IKReal x1006=(cj6)*(cj6);
IKReal x1007=(r21)*(r21);
gconst34=IKsign(((((-1.00000000000000)*(x1003)*(x1004)*(x1006)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x1003)))+(((-1.00000000000000)*(x1006)*(x1007)))+(((-2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*((r22)*(r22))*((sj5)*(sj5))))+(((-1.00000000000000)*(x1004)*(x1005)))+(((2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((-1.00000000000000)*(x1003)*(x1005)*(x1007)))));
IKReal x1008=(cj5)*(cj5);
IKReal x1009=(r20)*(r20);
IKReal x1010=(sj6)*(sj6);
IKReal x1011=(cj6)*(cj6);
IKReal x1012=(r21)*(r21);
dummyeval[0]=((((-1.00000000000000)*(x1008)*(x1010)*(x1012)))+(((-1.00000000000000)*(x1011)*(x1012)))+(((-1.00000000000000)*(x1009)*(x1010)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x1008)))+(((-2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-1.00000000000000)*((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((-1.00000000000000)*(x1008)*(x1009)*(x1011))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst34)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((-1.00000000000000)*(cj3)*(cj5)*(r21)*(sj6)))+(((cj3)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj3)*(r22)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst34)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6)))))), ((gconst34)*(((((-1.00000000000000)*(cj3)*(cj5)*(r21)*(sj6)))+(((cj3)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj3)*(r22)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x1013=IKsin(j4);
IKReal x1014=IKcos(j4);
evalcond[0]=((((r22)*(sj5)*(x1013)))+(((cj5)*(r21)*(sj6)*(x1013)))+(((-1.00000000000000)*(cj6)*(r21)*(x1014)))+(((-1.00000000000000)*(r20)*(sj6)*(x1014)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1013))));
evalcond[1]=((((r22)*(sj5)*(x1014)))+(((cj5)*(r21)*(sj6)*(x1014)))+(((cj6)*(r21)*(x1013)))+(((-1.00000000000000)*(cj3)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1014)))+(((r20)*(sj6)*(x1013))));
evalcond[2]=((((-1.00000000000000)*(r00)*(sj6)*(x1014)))+(((r02)*(sj5)*(x1013)))+(((-1.00000000000000)*(cj6)*(r01)*(x1014)))+(((-1.00000000000000)*(cj1)))+(((cj5)*(r01)*(sj6)*(x1013)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1013))));
evalcond[3]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1013)))+(((cj5)*(r11)*(sj6)*(x1013)))+(((r12)*(sj5)*(x1013)))+(((-1.00000000000000)*(cj6)*(r11)*(x1014)))+(((-1.00000000000000)*(sj1)))+(((-1.00000000000000)*(r10)*(sj6)*(x1014))));
evalcond[4]=((((cj6)*(r01)*(x1013)))+(((r00)*(sj6)*(x1013)))+(((r02)*(sj5)*(x1014)))+(((sj1)*(sj3)))+(((cj5)*(r01)*(sj6)*(x1014)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1014))));
evalcond[5]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1014)))+(((cj5)*(r11)*(sj6)*(x1014)))+(((-1.00000000000000)*(cj1)*(sj3)))+(((r10)*(sj6)*(x1013)))+(((r12)*(sj5)*(x1014)))+(((cj6)*(r11)*(x1013))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst33)*(((((-1.00000000000000)*(cj1)*(r20)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r21))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((-1.00000000000000)*(cj1)*(cj5)*(r21)*(sj6)))+(((cj1)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj1)*(r22)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst33)*(((((-1.00000000000000)*(cj1)*(r20)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r21)))))), ((gconst33)*(((((-1.00000000000000)*(cj1)*(cj5)*(r21)*(sj6)))+(((cj1)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj1)*(r22)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[3];
IKReal x1015=IKsin(j4);
IKReal x1016=IKcos(j4);
evalcond[0]=((((r22)*(sj5)*(x1015)))+(((cj5)*(r21)*(sj6)*(x1015)))+(((-1.00000000000000)*(cj6)*(r21)*(x1016)))+(((-1.00000000000000)*(r20)*(sj6)*(x1016)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1015))));
evalcond[1]=((((-1.00000000000000)*(r00)*(sj6)*(x1016)))+(((r02)*(sj5)*(x1015)))+(((-1.00000000000000)*(cj6)*(r01)*(x1016)))+(((-1.00000000000000)*(cj1)))+(((cj5)*(r01)*(sj6)*(x1015)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1015))));
evalcond[2]=((((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1015)))+(((cj5)*(r11)*(sj6)*(x1015)))+(((r12)*(sj5)*(x1015)))+(((-1.00000000000000)*(cj6)*(r11)*(x1016)))+(((-1.00000000000000)*(sj1)))+(((-1.00000000000000)*(r10)*(sj6)*(x1016))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x1017=IKcos(j3);
IKReal x1018=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(x1018)+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((sj1)*(x1017)))+(((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x1017)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(x1017)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((sj1)*(x1018)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj1)*(x1018)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j2)), 6.28318530717959)));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((((0.00200000000000000)*(cj1)))+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.400000000000000)*(sj1)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((0.400000000000000)*(cj1)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((0.00200000000000000)*(sj1)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst39;
IKReal x1019=(cj6)*(cj6);
IKReal x1020=(sj6)*(sj6);
gconst39=IKsign(((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x1020)))+(((cj5)*(r01)*(r20)*(x1020)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6)))+(((cj5)*(r01)*(r20)*(x1019)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x1019)))));
IKReal x1021=(cj6)*(cj6);
IKReal x1022=(sj6)*(sj6);
dummyeval[0]=((((-1.00000000000000)*(cj6)*(r01)*(r22)*(sj5)))+(((cj6)*(r02)*(r21)*(sj5)))+(((r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x1022)))+(((-1.00000000000000)*(cj5)*(r00)*(r21)*(x1021)))+(((cj5)*(r01)*(r20)*(x1022)))+(((cj5)*(r01)*(r20)*(x1021)))+(((-1.00000000000000)*(r00)*(r22)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal evalcond[5];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j1)), 6.28318530717959)));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(((-1.00000000000000)*(IKsin(j3))))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(IKcos(j3))))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst42;
IKReal x1023=(cj6)*(cj6);
IKReal x1024=(sj6)*(sj6);
gconst42=IKsign(((((cj5)*(r00)*(r21)*(x1024)))+(((cj5)*(r00)*(r21)*(x1023)))+(((cj6)*(r01)*(r22)*(sj5)))+(((-1.00000000000000)*(cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x1023)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x1024)))+(((-1.00000000000000)*(r02)*(r20)*(sj5)*(sj6)))+(((r00)*(r22)*(sj5)*(sj6)))));
IKReal x1025=(cj6)*(cj6);
IKReal x1026=(sj6)*(sj6);
dummyeval[0]=((((cj5)*(r00)*(r21)*(x1025)))+(((cj5)*(r00)*(r21)*(x1026)))+(((cj6)*(r01)*(r22)*(sj5)))+(((-1.00000000000000)*(cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x1026)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x1025)))+(((-1.00000000000000)*(r02)*(r20)*(sj5)*(sj6)))+(((r00)*(r22)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst42)*(((((cj3)*(cj5)*(r01)*(sj6)))+(((cj3)*(r02)*(sj5)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst42)*(((((-1.00000000000000)*(cj3)*(r00)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj6)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst42)*(((((cj3)*(cj5)*(r01)*(sj6)))+(((cj3)*(r02)*(sj5)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r00)))))), ((gconst42)*(((((-1.00000000000000)*(cj3)*(r00)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj6)*(r01)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x1027=IKsin(j4);
IKReal x1028=IKcos(j4);
evalcond[0]=((((r22)*(sj5)*(x1027)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1027)))+(((cj5)*(r21)*(sj6)*(x1027)))+(((-1.00000000000000)*(r20)*(sj6)*(x1028)))+(((-1.00000000000000)*(cj6)*(r21)*(x1028))));
evalcond[1]=((((r22)*(sj5)*(x1028)))+(((cj6)*(r21)*(x1027)))+(cj3)+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1028)))+(((r20)*(sj6)*(x1027)))+(((cj5)*(r21)*(sj6)*(x1028))));
evalcond[2]=((1.00000000000000)+(((r02)*(sj5)*(x1027)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1027)))+(((cj5)*(r01)*(sj6)*(x1027)))+(((-1.00000000000000)*(r00)*(sj6)*(x1028)))+(((-1.00000000000000)*(cj6)*(r01)*(x1028))));
evalcond[3]=((((cj5)*(r11)*(sj6)*(x1027)))+(((-1.00000000000000)*(r10)*(sj6)*(x1028)))+(((r12)*(sj5)*(x1027)))+(((-1.00000000000000)*(cj6)*(r11)*(x1028)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1027))));
evalcond[4]=((((r00)*(sj6)*(x1027)))+(((r02)*(sj5)*(x1028)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1028)))+(((cj6)*(r01)*(x1027)))+(((cj5)*(r01)*(sj6)*(x1028))));
evalcond[5]=((((cj5)*(r11)*(sj6)*(x1028)))+(((r12)*(sj5)*(x1028)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1028)))+(((r10)*(sj6)*(x1027)))+(((cj6)*(r11)*(x1027)))+(((-1.00000000000000)*(sj3))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j1)), 6.28318530717959)));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((-1.00000000000000)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r12)))+(((r11)*(sj5)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[2];
evalcond[0]=((((cj5)*(r22)))+(((-1.00000000000000)*(IKsin(j3))))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(IKcos(j3))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst44;
IKReal x1029=(cj6)*(cj6);
IKReal x1030=(sj6)*(sj6);
gconst44=IKsign(((((cj5)*(r00)*(r21)*(x1029)))+(((cj5)*(r00)*(r21)*(x1030)))+(((cj6)*(r01)*(r22)*(sj5)))+(((-1.00000000000000)*(cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x1029)))+(((-1.00000000000000)*(r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x1030)))+(((r00)*(r22)*(sj5)*(sj6)))));
IKReal x1031=(cj6)*(cj6);
IKReal x1032=(sj6)*(sj6);
dummyeval[0]=((((cj5)*(r00)*(r21)*(x1032)))+(((cj5)*(r00)*(r21)*(x1031)))+(((cj6)*(r01)*(r22)*(sj5)))+(((-1.00000000000000)*(cj6)*(r02)*(r21)*(sj5)))+(((-1.00000000000000)*(r02)*(r20)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x1032)))+(((-1.00000000000000)*(cj5)*(r01)*(r20)*(x1031)))+(((r00)*(r22)*(sj5)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst44)*(((((cj3)*(cj5)*(r01)*(sj6)))+(((cj3)*(r02)*(sj5)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst44)*(((((-1.00000000000000)*(cj3)*(r00)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj6)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst44)*(((((cj3)*(cj5)*(r01)*(sj6)))+(((cj3)*(r02)*(sj5)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r00)))))), ((gconst44)*(((((-1.00000000000000)*(cj3)*(r00)*(sj6)))+(((-1.00000000000000)*(cj3)*(cj6)*(r01)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x1033=IKsin(j4);
IKReal x1034=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1033)))+(((r22)*(sj5)*(x1033)))+(((cj5)*(r21)*(sj6)*(x1033)))+(((-1.00000000000000)*(r20)*(sj6)*(x1034)))+(((-1.00000000000000)*(cj6)*(r21)*(x1034))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1034)))+(((r20)*(sj6)*(x1033)))+(((r22)*(sj5)*(x1034)))+(((cj5)*(r21)*(sj6)*(x1034)))+(cj3)+(((cj6)*(r21)*(x1033))));
evalcond[2]=((-1.00000000000000)+(((-1.00000000000000)*(cj6)*(r01)*(x1034)))+(((r02)*(sj5)*(x1033)))+(((cj5)*(r01)*(sj6)*(x1033)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1033)))+(((-1.00000000000000)*(r00)*(sj6)*(x1034))));
evalcond[3]=((((-1.00000000000000)*(cj6)*(r11)*(x1034)))+(((r12)*(sj5)*(x1033)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1033)))+(((-1.00000000000000)*(r10)*(sj6)*(x1034)))+(((cj5)*(r11)*(sj6)*(x1033))));
evalcond[4]=((((cj6)*(r01)*(x1033)))+(((r02)*(sj5)*(x1034)))+(((r00)*(sj6)*(x1033)))+(((cj5)*(r01)*(sj6)*(x1034)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1034))));
evalcond[5]=((sj3)+(((r12)*(sj5)*(x1034)))+(((r10)*(sj6)*(x1033)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1034)))+(((cj6)*(r11)*(x1033)))+(((cj5)*(r11)*(sj6)*(x1034))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((IKabs(sj1) != 0)?((IKReal)1/(sj1)):(IKReal)1.0e30))*(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x1035=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((-1.00000000000000)*(IKsin(j3))))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((sj1)*(x1035)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x1035)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst40;
IKReal x1036=(r20)*(r20);
IKReal x1037=(cj5)*(cj5);
IKReal x1038=(sj6)*(sj6);
IKReal x1039=(cj6)*(cj6);
IKReal x1040=(r21)*(r21);
gconst40=IKsign(((((x1036)*(x1038)))+(((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x1036)*(x1037)*(x1039)))+(((x1039)*(x1040)))+(((x1037)*(x1038)*(x1040)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x1037)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))));
IKReal x1041=(r20)*(r20);
IKReal x1042=(cj5)*(cj5);
IKReal x1043=(sj6)*(sj6);
IKReal x1044=(cj6)*(cj6);
IKReal x1045=(r21)*(r21);
dummyeval[0]=((((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x1042)*(x1043)*(x1045)))+(((x1041)*(x1043)))+(((x1041)*(x1042)*(x1044)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x1042)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((x1044)*(x1045))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst40)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((-1.00000000000000)*(cj3)*(cj5)*(r21)*(sj6)))+(((cj3)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj3)*(r22)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst40)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6)))))), ((gconst40)*(((((-1.00000000000000)*(cj3)*(cj5)*(r21)*(sj6)))+(((cj3)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj3)*(r22)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x1046=IKsin(j4);
IKReal x1047=IKcos(j4);
evalcond[0]=((((-1.00000000000000)*(r20)*(sj6)*(x1047)))+(((r22)*(sj5)*(x1046)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1046)))+(((-1.00000000000000)*(cj6)*(r21)*(x1047)))+(((cj5)*(r21)*(sj6)*(x1046))));
evalcond[1]=((cj3)+(((r22)*(sj5)*(x1047)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1047)))+(((r20)*(sj6)*(x1046)))+(((cj6)*(r21)*(x1046)))+(((cj5)*(r21)*(sj6)*(x1047))));
evalcond[2]=((cj1)+(((-1.00000000000000)*(r00)*(sj6)*(x1047)))+(((r02)*(sj5)*(x1046)))+(((-1.00000000000000)*(cj6)*(r01)*(x1047)))+(((cj5)*(r01)*(sj6)*(x1046)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1046))));
evalcond[3]=((sj1)+(((-1.00000000000000)*(cj6)*(r11)*(x1047)))+(((-1.00000000000000)*(r10)*(sj6)*(x1047)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1046)))+(((r12)*(sj5)*(x1046)))+(((cj5)*(r11)*(sj6)*(x1046))));
evalcond[4]=((((sj1)*(sj3)))+(((r00)*(sj6)*(x1046)))+(((r02)*(sj5)*(x1047)))+(((cj5)*(r01)*(sj6)*(x1047)))+(((cj6)*(r01)*(x1046)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1047))));
evalcond[5]=((((r10)*(sj6)*(x1046)))+(((-1.00000000000000)*(cj1)*(sj3)))+(((cj6)*(r11)*(x1046)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1047)))+(((r12)*(sj5)*(x1047)))+(((cj5)*(r11)*(sj6)*(x1047))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x1048=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((-1.00000000000000)*(IKsin(j3))))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((sj1)*(x1048)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x1048)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst40;
IKReal x1049=(r20)*(r20);
IKReal x1050=(cj5)*(cj5);
IKReal x1051=(sj6)*(sj6);
IKReal x1052=(cj6)*(cj6);
IKReal x1053=(r21)*(r21);
gconst40=IKsign(((((x1050)*(x1051)*(x1053)))+(((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x1052)*(x1053)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x1050)))+(((x1049)*(x1051)))+(((x1049)*(x1050)*(x1052)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))));
IKReal x1054=(r20)*(r20);
IKReal x1055=(cj5)*(cj5);
IKReal x1056=(sj6)*(sj6);
IKReal x1057=(cj6)*(cj6);
IKReal x1058=(r21)*(r21);
dummyeval[0]=((((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((x1054)*(x1056)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x1057)*(x1058)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x1055)))+(((x1055)*(x1056)*(x1058)))+(((x1054)*(x1055)*(x1057)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst40)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((-1.00000000000000)*(cj3)*(cj5)*(r21)*(sj6)))+(((cj3)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj3)*(r22)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst40)*(((((-1.00000000000000)*(cj3)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(r20)*(sj6)))))), ((gconst40)*(((((-1.00000000000000)*(cj3)*(cj5)*(r21)*(sj6)))+(((cj3)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj3)*(r22)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x1059=IKsin(j4);
IKReal x1060=IKcos(j4);
evalcond[0]=((((r22)*(sj5)*(x1059)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1059)))+(((-1.00000000000000)*(cj6)*(r21)*(x1060)))+(((cj5)*(r21)*(sj6)*(x1059)))+(((-1.00000000000000)*(r20)*(sj6)*(x1060))));
evalcond[1]=((cj3)+(((r22)*(sj5)*(x1060)))+(((cj6)*(r21)*(x1059)))+(((r20)*(sj6)*(x1059)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1060)))+(((cj5)*(r21)*(sj6)*(x1060))));
evalcond[2]=((((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1059)))+(cj1)+(((-1.00000000000000)*(cj6)*(r01)*(x1060)))+(((r02)*(sj5)*(x1059)))+(((-1.00000000000000)*(r00)*(sj6)*(x1060)))+(((cj5)*(r01)*(sj6)*(x1059))));
evalcond[3]=((sj1)+(((-1.00000000000000)*(r10)*(sj6)*(x1060)))+(((cj5)*(r11)*(sj6)*(x1059)))+(((r12)*(sj5)*(x1059)))+(((-1.00000000000000)*(cj6)*(r11)*(x1060)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1059))));
evalcond[4]=((((sj1)*(sj3)))+(((r00)*(sj6)*(x1059)))+(((r02)*(sj5)*(x1060)))+(((cj5)*(r01)*(sj6)*(x1060)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1060)))+(((cj6)*(r01)*(x1059))));
evalcond[5]=((((r10)*(sj6)*(x1059)))+(((cj6)*(r11)*(x1059)))+(((-1.00000000000000)*(cj1)*(sj3)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1060)))+(((r12)*(sj5)*(x1060)))+(((cj5)*(r11)*(sj6)*(x1060))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst39)*(((((-1.00000000000000)*(cj1)*(r20)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r21))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((-1.00000000000000)*(cj1)*(cj5)*(r21)*(sj6)))+(((cj1)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj1)*(r22)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst39)*(((((-1.00000000000000)*(cj1)*(r20)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r21)))))), ((gconst39)*(((((-1.00000000000000)*(cj1)*(cj5)*(r21)*(sj6)))+(((cj1)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(cj1)*(r22)*(sj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[3];
IKReal x1061=IKsin(j4);
IKReal x1062=IKcos(j4);
evalcond[0]=((((r22)*(sj5)*(x1061)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1061)))+(((-1.00000000000000)*(cj6)*(r21)*(x1062)))+(((cj5)*(r21)*(sj6)*(x1061)))+(((-1.00000000000000)*(r20)*(sj6)*(x1062))));
evalcond[1]=((cj1)+(((-1.00000000000000)*(cj6)*(r01)*(x1062)))+(((r02)*(sj5)*(x1061)))+(((cj5)*(r01)*(sj6)*(x1061)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1061)))+(((-1.00000000000000)*(r00)*(sj6)*(x1062))));
evalcond[2]=((sj1)+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1061)))+(((-1.00000000000000)*(r10)*(sj6)*(x1062)))+(((r12)*(sj5)*(x1061)))+(((cj5)*(r11)*(sj6)*(x1061)))+(((-1.00000000000000)*(cj6)*(r11)*(x1062))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj4)*(r22)*(sj5)))+(((cj4)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(r20)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(r21)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((-1.00000000000000)*(cj4)*(r22)*(sj5)))+(((cj4)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(r20)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(r21)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((-1.00000000000000)*(cj4)*(r22)*(sj5)))+(((cj4)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(r20)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(r21)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj4)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x1063=IKcos(j3);
IKReal x1064=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(x1064)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((sj1)*(x1063)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x1063)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((x1063)+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((sj1)*(x1064)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj1)*(x1064)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IKReal x1065=((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30);
if( IKabs(((x1065)*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1065)*(((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj2)))+(((cj2)*(cj6)*(r20)*(sj1)*(sj5)))+(((cj2)*(cj5)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r21)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(r11)*(sj2)*(sj5)*(sj6)))+(((cj6)*(r10)*(sj2)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1065)*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))))+IKsqr(((x1065)*(((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj2)))+(((cj2)*(cj6)*(r20)*(sj1)*(sj5)))+(((cj2)*(cj5)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r21)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(r11)*(sj2)*(sj5)*(sj6)))+(((cj6)*(r10)*(sj2)*(sj5)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1065)*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))), ((x1065)*(((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj2)))+(((cj2)*(cj6)*(r20)*(sj1)*(sj5)))+(((cj2)*(cj5)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r21)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(r11)*(sj2)*(sj5)*(sj6)))+(((cj6)*(r10)*(sj2)*(sj5)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x1066=IKsin(j3);
IKReal x1067=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x1066)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((sj1)*(x1067)))+(((-1.00000000000000)*(cj1)*(cj2)*(x1066)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x1067)))+(((-1.00000000000000)*(cj2)*(sj1)*(x1066)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst1;
IKReal x1068=(r20)*(r20);
IKReal x1069=(cj5)*(cj5);
IKReal x1070=(sj6)*(sj6);
IKReal x1071=(cj6)*(cj6);
IKReal x1072=(r21)*(r21);
gconst1=IKsign(((((x1068)*(x1070)))+(((x1069)*(x1070)*(x1072)))+(((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x1071)*(x1072)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x1069)))+(((x1068)*(x1069)*(x1071)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))));
IKReal x1073=(r20)*(r20);
IKReal x1074=(cj5)*(cj5);
IKReal x1075=(sj6)*(sj6);
IKReal x1076=(cj6)*(cj6);
IKReal x1077=(r21)*(r21);
dummyeval[0]=((((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x1074)))+(((x1073)*(x1075)))+(((x1076)*(x1077)))+(((x1074)*(x1075)*(x1077)))+(((x1073)*(x1074)*(x1076)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst1)*(((((cj3)*(cj6)*(r21)*(sj2)))+(((cj2)*(r22)*(sj5)))+(((cj3)*(r20)*(sj2)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj5)*(cj6)*(r20)))+(((cj2)*(cj5)*(r21)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((-1.00000000000000)*(cj2)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r20)*(sj2)))+(((cj3)*(r22)*(sj2)*(sj5)))+(((-1.00000000000000)*(cj2)*(r20)*(sj6)))+(((cj3)*(cj5)*(r21)*(sj2)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst1)*(((((cj3)*(cj6)*(r21)*(sj2)))+(((cj2)*(r22)*(sj5)))+(((cj3)*(r20)*(sj2)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj5)*(cj6)*(r20)))+(((cj2)*(cj5)*(r21)*(sj6)))))), ((gconst1)*(((((-1.00000000000000)*(cj2)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r20)*(sj2)))+(((cj3)*(r22)*(sj2)*(sj5)))+(((-1.00000000000000)*(cj2)*(r20)*(sj6)))+(((cj3)*(cj5)*(r21)*(sj2)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x1078=IKsin(j4);
IKReal x1079=IKcos(j4);
evalcond[0]=((((r22)*(sj5)*(x1078)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1078)))+(((cj5)*(r21)*(sj6)*(x1078)))+(((-1.00000000000000)*(cj6)*(r21)*(x1079)))+(((-1.00000000000000)*(r20)*(sj6)*(x1079))));
evalcond[1]=((((r22)*(sj5)*(x1079)))+(((cj6)*(r21)*(x1078)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1079)))+(((cj5)*(r21)*(sj6)*(x1079)))+(((r20)*(sj6)*(x1078)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((((-1.00000000000000)*(cj1)*(sj2)))+(((-1.00000000000000)*(cj6)*(r01)*(x1079)))+(((-1.00000000000000)*(r00)*(sj6)*(x1079)))+(((cj5)*(r01)*(sj6)*(x1078)))+(((r02)*(sj5)*(x1078)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1078))));
evalcond[3]=((((-1.00000000000000)*(r10)*(sj6)*(x1079)))+(((cj5)*(r11)*(sj6)*(x1078)))+(((r12)*(sj5)*(x1078)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1078)))+(((-1.00000000000000)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj6)*(r11)*(x1079))));
evalcond[4]=((((sj1)*(sj3)))+(((cj1)*(cj2)*(cj3)))+(((r00)*(sj6)*(x1078)))+(((cj6)*(r01)*(x1078)))+(((cj5)*(r01)*(sj6)*(x1079)))+(((r02)*(sj5)*(x1079)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1079))));
evalcond[5]=((((cj6)*(r11)*(x1078)))+(((-1.00000000000000)*(cj1)*(sj3)))+(((cj5)*(r11)*(sj6)*(x1079)))+(((r12)*(sj5)*(x1079)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1079)))+(((cj2)*(cj3)*(sj1)))+(((r10)*(sj6)*(x1078))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IKReal x1080=(sj1)*(sj1);
IKReal x1081=(cj1)*(cj1);
if( IKabs(((((IKabs(((((cj2)*(x1081)))+(((cj2)*(x1080))))) != 0)?((IKReal)1/(((((cj2)*(x1081)))+(((cj2)*(x1080)))))):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((x1081)+(x1080))) != 0)?((IKReal)1/(((x1081)+(x1080)))):(IKReal)1.0e30))*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((cj2)*(x1081)))+(((cj2)*(x1080))))) != 0)?((IKReal)1/(((((cj2)*(x1081)))+(((cj2)*(x1080)))))):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))))+IKsqr(((((IKabs(((x1081)+(x1080))) != 0)?((IKReal)1/(((x1081)+(x1080)))):(IKReal)1.0e30))*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(((((cj2)*(x1081)))+(((cj2)*(x1080))))) != 0)?((IKReal)1/(((((cj2)*(x1081)))+(((cj2)*(x1080)))))):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))), ((((IKabs(((x1081)+(x1080))) != 0)?((IKReal)1/(((x1081)+(x1080)))):(IKReal)1.0e30))*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[3];
IKReal x1082=IKsin(j3);
IKReal x1083=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x1082)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((-1.00000000000000)*(cj1)*(cj2)*(x1082)))+(((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((sj1)*(x1083)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj2)*(sj1)*(x1082)))+(((-1.00000000000000)*(cj1)*(x1083)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst1;
IKReal x1084=(r20)*(r20);
IKReal x1085=(cj5)*(cj5);
IKReal x1086=(sj6)*(sj6);
IKReal x1087=(cj6)*(cj6);
IKReal x1088=(r21)*(r21);
gconst1=IKsign(((((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((x1085)*(x1086)*(x1088)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x1087)*(x1088)))+(((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x1085)))+(((x1084)*(x1086)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)))+(((x1084)*(x1085)*(x1087)))));
IKReal x1089=(r20)*(r20);
IKReal x1090=(cj5)*(cj5);
IKReal x1091=(sj6)*(sj6);
IKReal x1092=(cj6)*(cj6);
IKReal x1093=(r21)*(r21);
dummyeval[0]=((((-2.00000000000000)*(cj6)*(r20)*(r21)*(sj6)*(x1090)))+(((-2.00000000000000)*(cj5)*(cj6)*(r20)*(r22)*(sj5)))+(((2.00000000000000)*(cj5)*(r21)*(r22)*(sj5)*(sj6)))+(((x1089)*(x1091)))+(((x1090)*(x1091)*(x1093)))+(((x1092)*(x1093)))+(((x1089)*(x1090)*(x1092)))+((((r22)*(r22))*((sj5)*(sj5))))+(((2.00000000000000)*(cj6)*(r20)*(r21)*(sj6))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst1)*(((((cj3)*(cj6)*(r21)*(sj2)))+(((cj2)*(r22)*(sj5)))+(((cj3)*(r20)*(sj2)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj5)*(cj6)*(r20)))+(((cj2)*(cj5)*(r21)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((-1.00000000000000)*(cj2)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r20)*(sj2)))+(((cj3)*(r22)*(sj2)*(sj5)))+(((-1.00000000000000)*(cj2)*(r20)*(sj6)))+(((cj3)*(cj5)*(r21)*(sj2)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst1)*(((((cj3)*(cj6)*(r21)*(sj2)))+(((cj2)*(r22)*(sj5)))+(((cj3)*(r20)*(sj2)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj5)*(cj6)*(r20)))+(((cj2)*(cj5)*(r21)*(sj6)))))), ((gconst1)*(((((-1.00000000000000)*(cj2)*(cj6)*(r21)))+(((-1.00000000000000)*(cj3)*(cj5)*(cj6)*(r20)*(sj2)))+(((cj3)*(r22)*(sj2)*(sj5)))+(((-1.00000000000000)*(cj2)*(r20)*(sj6)))+(((cj3)*(cj5)*(r21)*(sj2)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[6];
IKReal x1094=IKsin(j4);
IKReal x1095=IKcos(j4);
evalcond[0]=((((r22)*(sj5)*(x1094)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1094)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj6)*(r21)*(x1095)))+(((cj5)*(r21)*(sj6)*(x1094)))+(((-1.00000000000000)*(r20)*(sj6)*(x1095))));
evalcond[1]=((((r20)*(sj6)*(x1094)))+(((r22)*(sj5)*(x1095)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1095)))+(((cj6)*(r21)*(x1094)))+(((cj5)*(r21)*(sj6)*(x1095)))+(((-1.00000000000000)*(cj3)*(sj2))));
evalcond[2]=((((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1094)))+(((-1.00000000000000)*(cj1)*(sj2)))+(((-1.00000000000000)*(cj6)*(r01)*(x1095)))+(((cj5)*(r01)*(sj6)*(x1094)))+(((-1.00000000000000)*(r00)*(sj6)*(x1095)))+(((r02)*(sj5)*(x1094))));
evalcond[3]=((((r12)*(sj5)*(x1094)))+(((cj5)*(r11)*(sj6)*(x1094)))+(((-1.00000000000000)*(r10)*(sj6)*(x1095)))+(((-1.00000000000000)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj6)*(r11)*(x1095)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1094))));
evalcond[4]=((((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1095)))+(((sj1)*(sj3)))+(((r00)*(sj6)*(x1094)))+(((cj1)*(cj2)*(cj3)))+(((cj5)*(r01)*(sj6)*(x1095)))+(((cj6)*(r01)*(x1094)))+(((r02)*(sj5)*(x1095))));
evalcond[5]=((((r10)*(sj6)*(x1094)))+(((-1.00000000000000)*(cj1)*(sj3)))+(((cj6)*(r11)*(x1094)))+(((r12)*(sj5)*(x1095)))+(((cj5)*(r11)*(sj6)*(x1095)))+(((cj2)*(cj3)*(sj1)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1095))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}

} else
{
{
IKReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((gconst0)*(((((-1.00000000000000)*(cj2)*(cj6)*(r01)))+(((cj1)*(r20)*(sj2)*(sj6)))+(((-1.00000000000000)*(cj2)*(r00)*(sj6)))+(((cj1)*(cj6)*(r21)*(sj2))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((-1.00000000000000)*(cj2)*(r02)*(sj5)))+(((cj2)*(cj5)*(cj6)*(r00)))+(((-1.00000000000000)*(cj1)*(cj5)*(cj6)*(r20)*(sj2)))+(((cj1)*(r22)*(sj2)*(sj5)))+(((cj1)*(cj5)*(r21)*(sj2)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj5)*(r01)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst0)*(((((-1.00000000000000)*(cj2)*(cj6)*(r01)))+(((cj1)*(r20)*(sj2)*(sj6)))+(((-1.00000000000000)*(cj2)*(r00)*(sj6)))+(((cj1)*(cj6)*(r21)*(sj2)))))), ((gconst0)*(((((-1.00000000000000)*(cj2)*(r02)*(sj5)))+(((cj2)*(cj5)*(cj6)*(r00)))+(((-1.00000000000000)*(cj1)*(cj5)*(cj6)*(r20)*(sj2)))+(((cj1)*(r22)*(sj2)*(sj5)))+(((cj1)*(cj5)*(r21)*(sj2)*(sj6)))+(((-1.00000000000000)*(cj2)*(cj5)*(r01)*(sj6)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IKReal evalcond[3];
IKReal x1096=IKsin(j4);
IKReal x1097=IKcos(j4);
evalcond[0]=((((r22)*(sj5)*(x1096)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(x1096)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj6)*(r21)*(x1097)))+(((cj5)*(r21)*(sj6)*(x1096)))+(((-1.00000000000000)*(r20)*(sj6)*(x1097))));
evalcond[1]=((((-1.00000000000000)*(cj5)*(cj6)*(r00)*(x1096)))+(((-1.00000000000000)*(cj1)*(sj2)))+(((-1.00000000000000)*(cj6)*(r01)*(x1097)))+(((cj5)*(r01)*(sj6)*(x1096)))+(((-1.00000000000000)*(r00)*(sj6)*(x1097)))+(((r02)*(sj5)*(x1096))));
evalcond[2]=((((r12)*(sj5)*(x1096)))+(((cj5)*(r11)*(sj6)*(x1096)))+(((-1.00000000000000)*(r10)*(sj6)*(x1097)))+(((-1.00000000000000)*(sj1)*(sj2)))+(((-1.00000000000000)*(cj6)*(r11)*(x1097)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(x1096))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IKReal dummyeval[1];
IKReal gconst2;
gconst2=IKsign(sj2);
dummyeval[0]=sj2;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IKReal dummyeval[2];
IKReal x1098=(sj1)*(sj1);
IKReal x1099=(cj1)*(cj1);
dummyeval[0]=((((cj2)*(x1099)))+(((cj2)*(x1098))));
dummyeval[1]=((x1098)+(x1099));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IKReal dummyeval[2];
dummyeval[0]=sj2;
dummyeval[1]=cj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IKReal evalcond[9];
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((-0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.400000000000000)*(sj1)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((0.400000000000000)*(cj1)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
evalcond[5]=((-1.00000000000000)+(((cj5)*(r21)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj4)))+(((-1.00000000000000)*(cj4)*(r20)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r21)))+(((r22)*(sj4)*(sj5))));
evalcond[6]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[7]=((((cj5)*(r01)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r01)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(sj4)))+(((r02)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(r00)*(sj6))));
evalcond[8]=((((-1.00000000000000)*(cj4)*(r10)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r11)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(sj4)))+(((cj5)*(r11)*(sj4)*(sj6)))+(((r12)*(sj4)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst3;
gconst3=IKsign((((sj1)*(sj1))+((cj1)*(cj1))));
dummyeval[0]=(((sj1)*(sj1))+((cj1)*(cj1)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst3)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst3)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))), ((gconst3)*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x1100=IKcos(j3);
IKReal x1101=IKsin(j3);
IKReal x1102=((cj1)*(x1100));
IKReal x1103=((sj1)*(x1101));
IKReal x1104=((sj1)*(x1100));
IKReal x1105=((cj1)*(x1101));
evalcond[0]=((x1104)+(((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(x1105)))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(x1103)))+(((-1.00000000000000)*(x1102)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((x1102)+(x1103)+(((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))));
evalcond[3]=((x1104)+(((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((-1.00000000000000)*(x1105)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.11022302462516e-16)+(j2)), 6.28318530717959)));
evalcond[1]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((0.00200000000000000)+(((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.400000000000000)*(sj1)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[4]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((0.400000000000000)*(cj1)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
evalcond[5]=((1.00000000000000)+(((cj5)*(r21)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj4)))+(((-1.00000000000000)*(cj4)*(r20)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r21)))+(((r22)*(sj4)*(sj5))));
evalcond[6]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[7]=((((cj5)*(r01)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r01)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(sj4)))+(((r02)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(r00)*(sj6))));
evalcond[8]=((((-1.00000000000000)*(cj4)*(r10)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r11)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(sj4)))+(((cj5)*(r11)*(sj4)*(sj6)))+(((r12)*(sj4)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IKReal dummyeval[1];
IKReal gconst4;
gconst4=IKsign(((((-1.00000000000000)*((sj1)*(sj1))))+(((-1.00000000000000)*((cj1)*(cj1))))));
dummyeval[0]=((((-1.00000000000000)*((sj1)*(sj1))))+(((-1.00000000000000)*((cj1)*(cj1)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst4)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((-1.00000000000000)*(r01)*(sj1)*(sj5)*(sj6)))+(((cj5)*(r02)*(sj1)))+(((cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(cj5)*(r12)))+(((cj1)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r10)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst4)*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))), ((gconst4)*(((((-1.00000000000000)*(r01)*(sj1)*(sj5)*(sj6)))+(((cj5)*(r02)*(sj1)))+(((cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(cj5)*(r12)))+(((cj1)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj6)*(r10)*(sj5)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[4];
IKReal x1106=IKsin(j3);
IKReal x1107=IKcos(j3);
IKReal x1108=((sj1)*(x1106));
IKReal x1109=((cj1)*(x1107));
IKReal x1110=((sj1)*(x1107));
IKReal x1111=((cj1)*(x1106));
evalcond[0]=((x1111)+(x1110)+(((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[1]=((((cj5)*(r12)))+(x1108)+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(x1109)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[2]=((x1108)+(((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))+(((-1.00000000000000)*(x1109))));
evalcond[3]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((-1.00000000000000)*(x1110)))+(((-1.00000000000000)*(x1111)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j1)), 6.28318530717959)));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((-0.00200000000000000)*(cj2)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((-0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[3]=((((-0.00200000000000000)*(sj2)))+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
evalcond[4]=((((cj5)*(r21)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj4)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj4)*(r20)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r21)))+(((r22)*(sj4)*(sj5))));
evalcond[5]=((((cj5)*(r01)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r01)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(sj4)))+(((r02)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(r00)*(sj6))));
evalcond[6]=((((-1.00000000000000)*(cj4)*(r10)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r11)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(sj4)))+(((cj5)*(r11)*(sj4)*(sj6)))+(((r12)*(sj4)*(sj5)))+(((-1.00000000000000)*(sj2))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((-1.00000000000000)*(cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(sj6)))+(((-1.00000000000000)*(cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(cj6)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.00000000000000)*(cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(sj6)))+(((-1.00000000000000)*(cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(cj6)*(r00)))))+IKsqr(((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.00000000000000)*(cj6)*(r01)*(sj4)))+(((-1.00000000000000)*(cj4)*(cj5)*(r01)*(sj6)))+(((-1.00000000000000)*(cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(cj6)*(r00)))), ((((r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x1112=IKsin(j3);
IKReal x1113=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x1112)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((x1113)+(((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj2)*(x1112)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((-1.00000000000000)*(sj2)*(x1113)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((x1112)+(((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj2)*(x1113)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j1)), 6.28318530717959)));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((-0.00200000000000000)*(cj2)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((0.400000000000000)+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((0.00200000000000000)*(sj2)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
evalcond[4]=((((cj5)*(r21)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj4)))+(((-1.00000000000000)*(cj2)))+(((-1.00000000000000)*(cj4)*(r20)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r21)))+(((r22)*(sj4)*(sj5))));
evalcond[5]=((((cj5)*(r01)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r01)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(sj4)))+(((r02)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(r00)*(sj6))));
evalcond[6]=((sj2)+(((-1.00000000000000)*(cj4)*(r10)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r11)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(sj4)))+(((cj5)*(r11)*(sj4)*(sj6)))+(((r12)*(sj4)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))))+IKsqr(((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))), ((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((cj5)*(r02)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x1114=IKsin(j3);
IKReal x1115=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x1114)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(x1115)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((cj2)*(x1114)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((-1.00000000000000)*(sj2)*(x1115)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))+(((-1.00000000000000)*(x1114))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((-1.00000000000000)*(cj2)*(x1115)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((1.57079632679490)+(j2)), 6.28318530717959)));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.400000000000000)*(sj1)))+(((-0.00200000000000000)*(cj1)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[3]=((((-0.00200000000000000)*(sj1)))+(((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((0.400000000000000)*(cj1)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
evalcond[4]=((((cj5)*(r21)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj4)))+(((-1.00000000000000)*(cj4)*(r20)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r21)))+(((r22)*(sj4)*(sj5))));
evalcond[5]=((((cj5)*(r01)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj1)))+(((-1.00000000000000)*(cj4)*(cj6)*(r01)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(sj4)))+(((r02)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(r00)*(sj6))));
evalcond[6]=((((-1.00000000000000)*(cj4)*(r10)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r11)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(sj4)))+(((cj5)*(r11)*(sj4)*(sj6)))+(((r12)*(sj4)*(sj5)))+(((-1.00000000000000)*(sj1))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))+IKsqr(((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))), ((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x1116=IKcos(j3);
IKReal x1117=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(x1117)+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((sj1)*(x1116)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x1116)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((-1.00000000000000)*(x1116)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((sj1)*(x1117)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj1)*(x1117)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

} else
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((4.71238898038469)+(j2)), 6.28318530717959)));
evalcond[1]=((((0.000500000000000000)*(cj6)*(r21)))+(((0.390000000000000)*(cj5)*(r22)))+(((0.390000000000000)*(cj6)*(r20)*(sj5)))+(((0.000500000000000000)*(r20)*(sj6)))+(((-1.00000000000000)*(pz)))+(((-0.390000000000000)*(r21)*(sj5)*(sj6))));
evalcond[2]=((((0.00200000000000000)*(cj1)))+(((0.000500000000000000)*(cj6)*(r01)))+(((0.390000000000000)*(cj6)*(r00)*(sj5)))+(((0.390000000000000)*(cj5)*(r02)))+(((0.000500000000000000)*(r00)*(sj6)))+(((-0.400000000000000)*(sj1)))+(((-0.390000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(px))));
evalcond[3]=((((0.000500000000000000)*(cj6)*(r11)))+(((0.390000000000000)*(cj5)*(r12)))+(((0.400000000000000)*(cj1)))+(((-0.390000000000000)*(r11)*(sj5)*(sj6)))+(((0.00200000000000000)*(sj1)))+(((-1.00000000000000)*(py)))+(((0.000500000000000000)*(r10)*(sj6)))+(((0.390000000000000)*(cj6)*(r10)*(sj5))));
evalcond[4]=((((cj5)*(r21)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj5)*(cj6)*(r20)*(sj4)))+(((-1.00000000000000)*(cj4)*(r20)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r21)))+(((r22)*(sj4)*(sj5))));
evalcond[5]=((((cj5)*(r01)*(sj4)*(sj6)))+(cj1)+(((-1.00000000000000)*(cj4)*(cj6)*(r01)))+(((-1.00000000000000)*(cj5)*(cj6)*(r00)*(sj4)))+(((r02)*(sj4)*(sj5)))+(((-1.00000000000000)*(cj4)*(r00)*(sj6))));
evalcond[6]=((sj1)+(((-1.00000000000000)*(cj4)*(r10)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj6)*(r11)))+(((-1.00000000000000)*(cj5)*(cj6)*(r10)*(sj4)))+(((cj5)*(r11)*(sj4)*(sj6)))+(((r12)*(sj4)*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.00000000000000)*(cj4)*(r22)*(sj5)))+(((cj4)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(r20)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(r21)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))))+IKsqr(((((-1.00000000000000)*(cj4)*(r22)*(sj5)))+(((cj4)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(r20)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(r21)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))), ((((-1.00000000000000)*(cj4)*(r22)*(sj5)))+(((cj4)*(cj5)*(cj6)*(r20)))+(((-1.00000000000000)*(r20)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj4)*(cj5)*(r21)*(sj6)))+(((-1.00000000000000)*(cj6)*(r21)*(sj4)))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x1118=IKcos(j3);
IKReal x1119=IKsin(j3);
evalcond[0]=((((cj5)*(r22)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(x1119))));
evalcond[1]=((((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((sj1)*(x1118)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x1118)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((x1118)+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((cj4)*(r02)*(sj5)))+(((sj1)*(x1119)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj1)*(x1119)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IKReal x1120=((IKabs(sj2) != 0)?((IKReal)1/(sj2)):(IKReal)1.0e30);
if( IKabs(((x1120)*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1120)*(((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj2)))+(((cj2)*(cj6)*(r20)*(sj1)*(sj5)))+(((cj2)*(cj5)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r21)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(r11)*(sj2)*(sj5)*(sj6)))+(((cj6)*(r10)*(sj2)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1120)*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))))+IKsqr(((x1120)*(((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj2)))+(((cj2)*(cj6)*(r20)*(sj1)*(sj5)))+(((cj2)*(cj5)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r21)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(r11)*(sj2)*(sj5)*(sj6)))+(((cj6)*(r10)*(sj2)*(sj5)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x1120)*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))), ((x1120)*(((IKabs(cj1) != 0)?((IKReal)1/(cj1)):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj2)))+(((cj2)*(cj6)*(r20)*(sj1)*(sj5)))+(((cj2)*(cj5)*(r22)*(sj1)))+(((-1.00000000000000)*(cj2)*(r21)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(r11)*(sj2)*(sj5)*(sj6)))+(((cj6)*(r10)*(sj2)*(sj5)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x1121=IKsin(j3);
IKReal x1122=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x1121)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((sj1)*(x1122)))+(((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj2)*(x1121)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x1122)))+(((-1.00000000000000)*(cj2)*(sj1)*(x1121)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(sj2)*(x1122)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((sj1)*(x1121)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))+(((cj1)*(cj2)*(x1122))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj1)*(x1121)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5)))+(((cj2)*(sj1)*(x1122))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IKReal x1123=(sj1)*(sj1);
IKReal x1124=(cj1)*(cj1);
if( IKabs(((((IKabs(((((cj2)*(x1124)))+(((cj2)*(x1123))))) != 0)?((IKReal)1/(((((cj2)*(x1124)))+(((cj2)*(x1123)))))):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((x1123)+(x1124))) != 0)?((IKReal)1/(((x1123)+(x1124)))):(IKReal)1.0e30))*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((cj2)*(x1124)))+(((cj2)*(x1123))))) != 0)?((IKReal)1/(((((cj2)*(x1124)))+(((cj2)*(x1123)))))):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))))+IKsqr(((((IKabs(((x1123)+(x1124))) != 0)?((IKReal)1/(((x1123)+(x1124)))):(IKReal)1.0e30))*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((IKabs(((((cj2)*(x1124)))+(((cj2)*(x1123))))) != 0)?((IKReal)1/(((((cj2)*(x1124)))+(((cj2)*(x1123)))))):(IKReal)1.0e30))*(((((cj5)*(r12)*(sj1)))+(((cj1)*(cj5)*(r02)))+(((-1.00000000000000)*(r11)*(sj1)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(r01)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r00)*(sj5)))+(((cj6)*(r10)*(sj1)*(sj5)))))), ((((IKabs(((x1123)+(x1124))) != 0)?((IKReal)1/(((x1123)+(x1124)))):(IKReal)1.0e30))*(((((cj1)*(cj5)*(r12)))+(((-1.00000000000000)*(cj6)*(r00)*(sj1)*(sj5)))+(((-1.00000000000000)*(cj1)*(r11)*(sj5)*(sj6)))+(((cj1)*(cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj5)*(r02)*(sj1)))+(((r01)*(sj1)*(sj5)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x1125=IKsin(j3);
IKReal x1126=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x1125)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((sj1)*(x1126)))+(((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj2)*(x1125)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x1126)))+(((-1.00000000000000)*(cj2)*(sj1)*(x1125)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(sj2)*(x1126)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((sj1)*(x1125)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))+(((cj1)*(cj2)*(x1126))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj1)*(x1125)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5)))+(((cj2)*(sj1)*(x1126))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}

} else
{
{
IKReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst2)*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst2)*(((((r21)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(cj5)*(r22)))))), ((gconst2)*(((((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IKReal evalcond[6];
IKReal x1127=IKsin(j3);
IKReal x1128=IKcos(j3);
evalcond[0]=((((cj5)*(r22)))+(((sj2)*(x1127)))+(((cj6)*(r20)*(sj5)))+(((-1.00000000000000)*(r21)*(sj5)*(sj6))));
evalcond[1]=((((sj1)*(x1128)))+(((cj6)*(r00)*(sj5)))+(((-1.00000000000000)*(r01)*(sj5)*(sj6)))+(((-1.00000000000000)*(cj1)*(cj2)*(x1127)))+(((cj5)*(r02))));
evalcond[2]=((((cj5)*(r12)))+(((cj6)*(r10)*(sj5)))+(((-1.00000000000000)*(cj1)*(x1128)))+(((-1.00000000000000)*(cj2)*(sj1)*(x1127)))+(((-1.00000000000000)*(r11)*(sj5)*(sj6))));
evalcond[3]=((((-1.00000000000000)*(sj2)*(x1128)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r20)))+(((cj4)*(r22)*(sj5)))+(((cj6)*(r21)*(sj4)))+(((r20)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r21)*(sj6))));
evalcond[4]=((((r00)*(sj4)*(sj6)))+(((cj4)*(cj5)*(r01)*(sj6)))+(((cj6)*(r01)*(sj4)))+(((sj1)*(x1127)))+(((cj4)*(r02)*(sj5)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r00)))+(((cj1)*(cj2)*(x1128))));
evalcond[5]=((((cj4)*(cj5)*(r11)*(sj6)))+(((r10)*(sj4)*(sj6)))+(((-1.00000000000000)*(cj1)*(x1127)))+(((-1.00000000000000)*(cj4)*(cj5)*(cj6)*(r10)))+(((cj6)*(r11)*(sj4)))+(((cj4)*(r12)*(sj5)))+(((cj2)*(sj1)*(x1128))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
vsolutions.push_back(IKSolution()); IKSolution& solution = vsolutions.back();
solution.basesol.resize(7);
solution.basesol[0].foffset = j0;
solution.basesol[0].indices[0] = _ij0[0];
solution.basesol[0].indices[1] = _ij0[1];
solution.basesol[0].maxsolutions = _nj0;
solution.basesol[1].foffset = j1;
solution.basesol[1].indices[0] = _ij1[0];
solution.basesol[1].indices[1] = _ij1[1];
solution.basesol[1].maxsolutions = _nj1;
solution.basesol[2].foffset = j2;
solution.basesol[2].indices[0] = _ij2[0];
solution.basesol[2].indices[1] = _ij2[1];
solution.basesol[2].maxsolutions = _nj2;
solution.basesol[3].foffset = j3;
solution.basesol[3].indices[0] = _ij3[0];
solution.basesol[3].indices[1] = _ij3[1];
solution.basesol[3].maxsolutions = _nj3;
solution.basesol[4].foffset = j4;
solution.basesol[4].indices[0] = _ij4[0];
solution.basesol[4].indices[1] = _ij4[1];
solution.basesol[4].maxsolutions = _nj4;
solution.basesol[5].foffset = j5;
solution.basesol[5].indices[0] = _ij5[0];
solution.basesol[5].indices[1] = _ij5[1];
solution.basesol[5].maxsolutions = _nj5;
solution.basesol[6].foffset = j6;
solution.basesol[6].indices[0] = _ij6[0];
solution.basesol[6].indices[1] = _ij6[1];
solution.basesol[6].maxsolutions = _nj6;
solution.vfree.resize(0);
}
}
}

}

}
}
}

}

}
}
}

}

}
    }
}
return vsolutions.size()>0;
}

static inline bool checkconsistency8(const IKReal* Breal)
{
    IKReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    IKReal tol = 1e-5*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IKReal* matcoeffs, IKReal* rawroots, int& numroots)
{
    const IKReal tol = 128.0*std::numeric_limits<IKReal>::epsilon();
    IKReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IKReal IKFAST_ALIGNED16(A[8*8]);
    IKReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IKReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IKReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IKReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IKReal IKFAST_ALIGNED16(wr[16]);
    IKReal IKFAST_ALIGNED16(wi[16]);
    IKReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IKReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IKReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IKReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IKReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ik(const IKReal* eetrans, const IKReal* eerot, const IKReal* pfree, std::vector<IKSolution>& vsolutions) {
IKSolver solver;
return solver.ik(eetrans,eerot,pfree,vsolutions);
}

IKFAST_API const char* getKinematicsHash() { return "<robot:genericrobot - cob3_3 (d173c765099122003ab0f2e7020361c8)>"; }

IKFAST_API const char* getIKFastVersion() { return "55"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+getNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",getNumFreeParameters());
        return 1;
    }

    std::vector<IKSolution> vsolutions;
    std::vector<IKReal> vfree(getNumFreeParameters());
    IKReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ik(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, vsolutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)vsolutions.size());
    std::vector<IKReal> sol(getNumJoints());
    for(std::size_t i = 0; i < vsolutions.size(); ++i) {
        printf("sol%d (free=%d): ", (int)i, (int)vsolutions[i].GetFree().size());
        std::vector<IKReal> vsolfree(vsolutions[i].GetFree().size());
        vsolutions[i].GetSolution(&sol[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < sol.size(); ++j)
            printf("%.15f, ", sol[j]);
        printf("\n");
    }
    return 0;
}

#endif
